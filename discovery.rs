// This file is generated by rust-protobuf 2.6.0. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq,Clone,Default)]
pub struct Discovery {
    // message fields
    pub analysis_kind: super::common::NoteKind,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Discovery {
    fn default() -> &'a Discovery {
        <Discovery as ::protobuf::Message>::default_instance()
    }
}

impl Discovery {
    pub fn new() -> Discovery {
        ::std::default::Default::default()
    }

    // .grafeas.v1beta1.NoteKind analysis_kind = 1;


    pub fn get_analysis_kind(&self) -> super::common::NoteKind {
        self.analysis_kind
    }
    pub fn clear_analysis_kind(&mut self) {
        self.analysis_kind = super::common::NoteKind::NOTE_KIND_UNSPECIFIED;
    }

    // Param is passed by value, moved
    pub fn set_analysis_kind(&mut self, v: super::common::NoteKind) {
        self.analysis_kind = v;
    }
}

impl ::protobuf::Message for Discovery {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.analysis_kind, 1, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.analysis_kind != super::common::NoteKind::NOTE_KIND_UNSPECIFIED {
            my_size += ::protobuf::rt::enum_size(1, self.analysis_kind);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.analysis_kind != super::common::NoteKind::NOTE_KIND_UNSPECIFIED {
            os.write_enum(1, self.analysis_kind.value())?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Discovery {
        Discovery::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<super::common::NoteKind>>(
                    "analysis_kind",
                    |m: &Discovery| { &m.analysis_kind },
                    |m: &mut Discovery| { &mut m.analysis_kind },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Discovery>(
                    "Discovery",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Discovery {
        static mut instance: ::protobuf::lazy::Lazy<Discovery> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Discovery,
        };
        unsafe {
            instance.get(Discovery::new)
        }
    }
}

impl ::protobuf::Clear for Discovery {
    fn clear(&mut self) {
        self.analysis_kind = super::common::NoteKind::NOTE_KIND_UNSPECIFIED;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Discovery {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Discovery {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Details {
    // message fields
    pub discovered: ::protobuf::SingularPtrField<Discovered>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Details {
    fn default() -> &'a Details {
        <Details as ::protobuf::Message>::default_instance()
    }
}

impl Details {
    pub fn new() -> Details {
        ::std::default::Default::default()
    }

    // .grafeas.v1beta1.discovery.Discovered discovered = 1;


    pub fn get_discovered(&self) -> &Discovered {
        self.discovered.as_ref().unwrap_or_else(|| Discovered::default_instance())
    }
    pub fn clear_discovered(&mut self) {
        self.discovered.clear();
    }

    pub fn has_discovered(&self) -> bool {
        self.discovered.is_some()
    }

    // Param is passed by value, moved
    pub fn set_discovered(&mut self, v: Discovered) {
        self.discovered = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_discovered(&mut self) -> &mut Discovered {
        if self.discovered.is_none() {
            self.discovered.set_default();
        }
        self.discovered.as_mut().unwrap()
    }

    // Take field
    pub fn take_discovered(&mut self) -> Discovered {
        self.discovered.take().unwrap_or_else(|| Discovered::new())
    }
}

impl ::protobuf::Message for Details {
    fn is_initialized(&self) -> bool {
        for v in &self.discovered {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.discovered)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.discovered.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.discovered.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Details {
        Details::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Discovered>>(
                    "discovered",
                    |m: &Details| { &m.discovered },
                    |m: &mut Details| { &mut m.discovered },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Details>(
                    "Details",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Details {
        static mut instance: ::protobuf::lazy::Lazy<Details> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Details,
        };
        unsafe {
            instance.get(Details::new)
        }
    }
}

impl ::protobuf::Clear for Details {
    fn clear(&mut self) {
        self.discovered.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Details {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Details {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Discovered {
    // message fields
    pub continuous_analysis: Discovered_ContinuousAnalysis,
    pub last_analysis_time: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    pub analysis_status: Discovered_AnalysisStatus,
    pub analysis_status_error: ::protobuf::SingularPtrField<super::status::Status>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Discovered {
    fn default() -> &'a Discovered {
        <Discovered as ::protobuf::Message>::default_instance()
    }
}

impl Discovered {
    pub fn new() -> Discovered {
        ::std::default::Default::default()
    }

    // .grafeas.v1beta1.discovery.Discovered.ContinuousAnalysis continuous_analysis = 1;


    pub fn get_continuous_analysis(&self) -> Discovered_ContinuousAnalysis {
        self.continuous_analysis
    }
    pub fn clear_continuous_analysis(&mut self) {
        self.continuous_analysis = Discovered_ContinuousAnalysis::CONTINUOUS_ANALYSIS_UNSPECIFIED;
    }

    // Param is passed by value, moved
    pub fn set_continuous_analysis(&mut self, v: Discovered_ContinuousAnalysis) {
        self.continuous_analysis = v;
    }

    // .google.protobuf.Timestamp last_analysis_time = 2;


    pub fn get_last_analysis_time(&self) -> &::protobuf::well_known_types::Timestamp {
        self.last_analysis_time.as_ref().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::default_instance())
    }
    pub fn clear_last_analysis_time(&mut self) {
        self.last_analysis_time.clear();
    }

    pub fn has_last_analysis_time(&self) -> bool {
        self.last_analysis_time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_last_analysis_time(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.last_analysis_time = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_last_analysis_time(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.last_analysis_time.is_none() {
            self.last_analysis_time.set_default();
        }
        self.last_analysis_time.as_mut().unwrap()
    }

    // Take field
    pub fn take_last_analysis_time(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.last_analysis_time.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }

    // .grafeas.v1beta1.discovery.Discovered.AnalysisStatus analysis_status = 3;


    pub fn get_analysis_status(&self) -> Discovered_AnalysisStatus {
        self.analysis_status
    }
    pub fn clear_analysis_status(&mut self) {
        self.analysis_status = Discovered_AnalysisStatus::ANALYSIS_STATUS_UNSPECIFIED;
    }

    // Param is passed by value, moved
    pub fn set_analysis_status(&mut self, v: Discovered_AnalysisStatus) {
        self.analysis_status = v;
    }

    // .google.rpc.Status analysis_status_error = 4;


    pub fn get_analysis_status_error(&self) -> &super::status::Status {
        self.analysis_status_error.as_ref().unwrap_or_else(|| super::status::Status::default_instance())
    }
    pub fn clear_analysis_status_error(&mut self) {
        self.analysis_status_error.clear();
    }

    pub fn has_analysis_status_error(&self) -> bool {
        self.analysis_status_error.is_some()
    }

    // Param is passed by value, moved
    pub fn set_analysis_status_error(&mut self, v: super::status::Status) {
        self.analysis_status_error = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_analysis_status_error(&mut self) -> &mut super::status::Status {
        if self.analysis_status_error.is_none() {
            self.analysis_status_error.set_default();
        }
        self.analysis_status_error.as_mut().unwrap()
    }

    // Take field
    pub fn take_analysis_status_error(&mut self) -> super::status::Status {
        self.analysis_status_error.take().unwrap_or_else(|| super::status::Status::new())
    }
}

impl ::protobuf::Message for Discovered {
    fn is_initialized(&self) -> bool {
        for v in &self.last_analysis_time {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.analysis_status_error {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.continuous_analysis, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.last_analysis_time)?;
                },
                3 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.analysis_status, 3, &mut self.unknown_fields)?
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.analysis_status_error)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.continuous_analysis != Discovered_ContinuousAnalysis::CONTINUOUS_ANALYSIS_UNSPECIFIED {
            my_size += ::protobuf::rt::enum_size(1, self.continuous_analysis);
        }
        if let Some(ref v) = self.last_analysis_time.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.analysis_status != Discovered_AnalysisStatus::ANALYSIS_STATUS_UNSPECIFIED {
            my_size += ::protobuf::rt::enum_size(3, self.analysis_status);
        }
        if let Some(ref v) = self.analysis_status_error.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.continuous_analysis != Discovered_ContinuousAnalysis::CONTINUOUS_ANALYSIS_UNSPECIFIED {
            os.write_enum(1, self.continuous_analysis.value())?;
        }
        if let Some(ref v) = self.last_analysis_time.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.analysis_status != Discovered_AnalysisStatus::ANALYSIS_STATUS_UNSPECIFIED {
            os.write_enum(3, self.analysis_status.value())?;
        }
        if let Some(ref v) = self.analysis_status_error.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Discovered {
        Discovered::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<Discovered_ContinuousAnalysis>>(
                    "continuous_analysis",
                    |m: &Discovered| { &m.continuous_analysis },
                    |m: &mut Discovered| { &mut m.continuous_analysis },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                    "last_analysis_time",
                    |m: &Discovered| { &m.last_analysis_time },
                    |m: &mut Discovered| { &mut m.last_analysis_time },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<Discovered_AnalysisStatus>>(
                    "analysis_status",
                    |m: &Discovered| { &m.analysis_status },
                    |m: &mut Discovered| { &mut m.analysis_status },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::status::Status>>(
                    "analysis_status_error",
                    |m: &Discovered| { &m.analysis_status_error },
                    |m: &mut Discovered| { &mut m.analysis_status_error },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Discovered>(
                    "Discovered",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Discovered {
        static mut instance: ::protobuf::lazy::Lazy<Discovered> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Discovered,
        };
        unsafe {
            instance.get(Discovered::new)
        }
    }
}

impl ::protobuf::Clear for Discovered {
    fn clear(&mut self) {
        self.continuous_analysis = Discovered_ContinuousAnalysis::CONTINUOUS_ANALYSIS_UNSPECIFIED;
        self.last_analysis_time.clear();
        self.analysis_status = Discovered_AnalysisStatus::ANALYSIS_STATUS_UNSPECIFIED;
        self.analysis_status_error.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Discovered {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Discovered {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum Discovered_ContinuousAnalysis {
    CONTINUOUS_ANALYSIS_UNSPECIFIED = 0,
    ACTIVE = 1,
    INACTIVE = 2,
}

impl ::protobuf::ProtobufEnum for Discovered_ContinuousAnalysis {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<Discovered_ContinuousAnalysis> {
        match value {
            0 => ::std::option::Option::Some(Discovered_ContinuousAnalysis::CONTINUOUS_ANALYSIS_UNSPECIFIED),
            1 => ::std::option::Option::Some(Discovered_ContinuousAnalysis::ACTIVE),
            2 => ::std::option::Option::Some(Discovered_ContinuousAnalysis::INACTIVE),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [Discovered_ContinuousAnalysis] = &[
            Discovered_ContinuousAnalysis::CONTINUOUS_ANALYSIS_UNSPECIFIED,
            Discovered_ContinuousAnalysis::ACTIVE,
            Discovered_ContinuousAnalysis::INACTIVE,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("Discovered_ContinuousAnalysis", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for Discovered_ContinuousAnalysis {
}

impl ::std::default::Default for Discovered_ContinuousAnalysis {
    fn default() -> Self {
        Discovered_ContinuousAnalysis::CONTINUOUS_ANALYSIS_UNSPECIFIED
    }
}

impl ::protobuf::reflect::ProtobufValue for Discovered_ContinuousAnalysis {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum Discovered_AnalysisStatus {
    ANALYSIS_STATUS_UNSPECIFIED = 0,
    PENDING = 1,
    SCANNING = 2,
    FINISHED_SUCCESS = 3,
    FINISHED_FAILED = 4,
    FINISHED_UNSUPPORTED = 5,
}

impl ::protobuf::ProtobufEnum for Discovered_AnalysisStatus {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<Discovered_AnalysisStatus> {
        match value {
            0 => ::std::option::Option::Some(Discovered_AnalysisStatus::ANALYSIS_STATUS_UNSPECIFIED),
            1 => ::std::option::Option::Some(Discovered_AnalysisStatus::PENDING),
            2 => ::std::option::Option::Some(Discovered_AnalysisStatus::SCANNING),
            3 => ::std::option::Option::Some(Discovered_AnalysisStatus::FINISHED_SUCCESS),
            4 => ::std::option::Option::Some(Discovered_AnalysisStatus::FINISHED_FAILED),
            5 => ::std::option::Option::Some(Discovered_AnalysisStatus::FINISHED_UNSUPPORTED),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [Discovered_AnalysisStatus] = &[
            Discovered_AnalysisStatus::ANALYSIS_STATUS_UNSPECIFIED,
            Discovered_AnalysisStatus::PENDING,
            Discovered_AnalysisStatus::SCANNING,
            Discovered_AnalysisStatus::FINISHED_SUCCESS,
            Discovered_AnalysisStatus::FINISHED_FAILED,
            Discovered_AnalysisStatus::FINISHED_UNSUPPORTED,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("Discovered_AnalysisStatus", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for Discovered_AnalysisStatus {
}

impl ::std::default::Default for Discovered_AnalysisStatus {
    fn default() -> Self {
        Discovered_AnalysisStatus::ANALYSIS_STATUS_UNSPECIFIED
    }
}

impl ::protobuf::reflect::ProtobufValue for Discovered_AnalysisStatus {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1dproto/v1beta1/discovery.proto\x12\x19grafeas.v1beta1.discovery\x1a\
    \x1fgoogle/protobuf/timestamp.proto\x1a\x17google/rpc/status.proto\x1a\
    \x1aproto/v1beta1/common.proto\"K\n\tDiscovery\x12>\n\ranalysis_kind\x18\
    \x01\x20\x01(\x0e2\x19.grafeas.v1beta1.NoteKindR\x0canalysisKind\"P\n\
    \x07Details\x12E\n\ndiscovered\x18\x01\x20\x01(\x0b2%.grafeas.v1beta1.di\
    scovery.DiscoveredR\ndiscovered\"\xd1\x04\n\nDiscovered\x12i\n\x13contin\
    uous_analysis\x18\x01\x20\x01(\x0e28.grafeas.v1beta1.discovery.Discovere\
    d.ContinuousAnalysisR\x12continuousAnalysis\x12H\n\x12last_analysis_time\
    \x18\x02\x20\x01(\x0b2\x1a.google.protobuf.TimestampR\x10lastAnalysisTim\
    e\x12]\n\x0fanalysis_status\x18\x03\x20\x01(\x0e24.grafeas.v1beta1.disco\
    very.Discovered.AnalysisStatusR\x0eanalysisStatus\x12F\n\x15analysis_sta\
    tus_error\x18\x04\x20\x01(\x0b2\x12.google.rpc.StatusR\x13analysisStatus\
    Error\"S\n\x12ContinuousAnalysis\x12#\n\x1fCONTINUOUS_ANALYSIS_UNSPECIFI\
    ED\x10\0\x12\n\n\x06ACTIVE\x10\x01\x12\x0c\n\x08INACTIVE\x10\x02\"\x91\
    \x01\n\x0eAnalysisStatus\x12\x1f\n\x1bANALYSIS_STATUS_UNSPECIFIED\x10\0\
    \x12\x0b\n\x07PENDING\x10\x01\x12\x0c\n\x08SCANNING\x10\x02\x12\x14\n\
    \x10FINISHED_SUCCESS\x10\x03\x12\x13\n\x0fFINISHED_FAILED\x10\x04\x12\
    \x18\n\x14FINISHED_UNSUPPORTED\x10\x05Bc\n\x1cio.grafeas.v1beta1.discove\
    ryP\x01Z;github.com/grafeas/grafeas/proto/v1beta1/discovery_go_proto\xa2\
    \x02\x03GRAJ\xea\x17\n\x06\x12\x04\x0e\0V\x01\n\xda\x04\n\x01\x0c\x12\
    \x03\x0e\0\x122\xcf\x04\x20Copyright\x202018\x20The\x20Grafeas\x20Author\
    s.\x20All\x20rights\x20reserved.\n\n\x20Licensed\x20under\x20the\x20Apac\
    he\x20License,\x20Version\x202.0\x20(the\x20\"License\");\n\x20you\x20ma\
    y\x20not\x20use\x20this\x20file\x20except\x20in\x20compliance\x20with\
    \x20the\x20License.\n\x20You\x20may\x20obtain\x20a\x20copy\x20of\x20the\
    \x20License\x20at\n\n\x20\x20\x20\x20http://www.apache.org/licenses/LICE\
    NSE-2.0\n\n\x20Unless\x20required\x20by\x20applicable\x20law\x20or\x20ag\
    reed\x20to\x20in\x20writing,\x20software\n\x20distributed\x20under\x20th\
    e\x20License\x20is\x20distributed\x20on\x20an\x20\"AS\x20IS\"\x20BASIS,\
    \n\x20WITHOUT\x20WARRANTIES\x20OR\x20CONDITIONS\x20OF\x20ANY\x20KIND,\
    \x20either\x20express\x20or\x20implied.\n\x20See\x20the\x20License\x20fo\
    r\x20the\x20specific\x20language\x20governing\x20permissions\x20and\n\
    \x20limitations\x20under\x20the\x20License.\n\n\x08\n\x01\x02\x12\x03\
    \x10\0\"\n\x08\n\x01\x08\x12\x03\x12\0R\n\t\n\x02\x08\x0b\x12\x03\x12\0R\
    \n\x08\n\x01\x08\x12\x03\x13\0\"\n\t\n\x02\x08\n\x12\x03\x13\0\"\n\x08\n\
    \x01\x08\x12\x03\x14\05\n\t\n\x02\x08\x01\x12\x03\x14\05\n\x08\n\x01\x08\
    \x12\x03\x15\0!\n\t\n\x02\x08$\x12\x03\x15\0!\n\t\n\x02\x03\0\x12\x03\
    \x17\0)\n\t\n\x02\x03\x01\x12\x03\x18\0!\n\t\n\x02\x03\x02\x12\x03\x19\0\
    $\n\xd3\x01\n\x02\x04\0\x12\x04\x1e\0\"\x01\x1a\xc6\x01\x20A\x20note\x20\
    that\x20indicates\x20a\x20type\x20of\x20analysis\x20a\x20provider\x20wou\
    ld\x20perform.\x20This\x20note\n\x20exists\x20in\x20a\x20provider's\x20p\
    roject.\x20A\x20`Discovery`\x20occurrence\x20is\x20created\x20in\x20a\n\
    \x20consumer's\x20project\x20at\x20the\x20start\x20of\x20analysis.\n\n\n\
    \n\x03\x04\0\x01\x12\x03\x1e\x08\x11\n\\\n\x04\x04\0\x02\0\x12\x03!\x02-\
    \x1aO\x20Required.\x20Immutable.\x20The\x20kind\x20of\x20analysis\x20tha\
    t\x20is\x20handled\x20by\x20this\n\x20discovery.\n\n\r\n\x05\x04\0\x02\0\
    \x04\x12\x04!\x02\x1e\x13\n\x0c\n\x05\x04\0\x02\0\x06\x12\x03!\x02\x1a\n\
    \x0c\n\x05\x04\0\x02\0\x01\x12\x03!\x1b(\n\x0c\n\x05\x04\0\x02\0\x03\x12\
    \x03!+,\n0\n\x02\x04\x01\x12\x04%\0(\x01\x1a$\x20Details\x20of\x20a\x20d\
    iscovery\x20occurrence.\n\n\n\n\x03\x04\x01\x01\x12\x03%\x08\x0f\nE\n\
    \x04\x04\x01\x02\0\x12\x03'\x02\x1c\x1a8\x20Required.\x20Analysis\x20sta\
    tus\x20for\x20the\x20discovered\x20resource.\n\n\r\n\x05\x04\x01\x02\0\
    \x04\x12\x04'\x02%\x11\n\x0c\n\x05\x04\x01\x02\0\x06\x12\x03'\x02\x0c\n\
    \x0c\n\x05\x04\x01\x02\0\x01\x12\x03'\r\x17\n\x0c\n\x05\x04\x01\x02\0\
    \x03\x12\x03'\x1a\x1b\nV\n\x02\x04\x02\x12\x04+\0V\x01\x1aJ\x20Provides\
    \x20information\x20about\x20the\x20analysis\x20status\x20of\x20a\x20disc\
    overed\x20resource.\n\n\n\n\x03\x04\x02\x01\x12\x03+\x08\x12\n>\n\x04\
    \x04\x02\x04\0\x12\x04-\x024\x03\x1a0\x20Whether\x20the\x20resource\x20i\
    s\x20continuously\x20analyzed.\n\n\x0c\n\x05\x04\x02\x04\0\x01\x12\x03-\
    \x07\x19\n\x19\n\x06\x04\x02\x04\0\x02\0\x12\x03/\x04(\x1a\n\x20Unknown.\
    \n\n\x0e\n\x07\x04\x02\x04\0\x02\0\x01\x12\x03/\x04#\n\x0e\n\x07\x04\x02\
    \x04\0\x02\0\x02\x12\x03/&'\n7\n\x06\x04\x02\x04\0\x02\x01\x12\x031\x04\
    \x0f\x1a(\x20The\x20resource\x20is\x20continuously\x20analyzed.\n\n\x0e\
    \n\x07\x04\x02\x04\0\x02\x01\x01\x12\x031\x04\n\n\x0e\n\x07\x04\x02\x04\
    \0\x02\x01\x02\x12\x031\r\x0e\nA\n\x06\x04\x02\x04\0\x02\x02\x12\x033\
    \x04\x11\x1a2\x20The\x20resource\x20is\x20ignored\x20for\x20continuous\
    \x20analysis.\n\n\x0e\n\x07\x04\x02\x04\0\x02\x02\x01\x12\x033\x04\x0c\n\
    \x0e\n\x07\x04\x02\x04\0\x02\x02\x02\x12\x033\x0f\x10\n=\n\x04\x04\x02\
    \x02\0\x12\x037\x02-\x1a0\x20Whether\x20the\x20resource\x20is\x20continu\
    ously\x20analyzed.\n\n\r\n\x05\x04\x02\x02\0\x04\x12\x047\x024\x03\n\x0c\
    \n\x05\x04\x02\x02\0\x06\x12\x037\x02\x14\n\x0c\n\x05\x04\x02\x02\0\x01\
    \x12\x037\x15(\n\x0c\n\x05\x04\x02\x02\0\x03\x12\x037+,\ne\n\x04\x04\x02\
    \x02\x01\x12\x03;\x023\x1aX\x20The\x20last\x20time\x20continuous\x20anal\
    ysis\x20was\x20done\x20for\x20this\x20resource.\n\x20Deprecated,\x20do\
    \x20not\x20use.\n\n\r\n\x05\x04\x02\x02\x01\x04\x12\x04;\x027-\n\x0c\n\
    \x05\x04\x02\x02\x01\x06\x12\x03;\x02\x1b\n\x0c\n\x05\x04\x02\x02\x01\
    \x01\x12\x03;\x1c.\n\x0c\n\x05\x04\x02\x02\x01\x03\x12\x03;12\nz\n\x04\
    \x04\x02\x04\x01\x12\x04?\x02M\x03\x1al\x20Analysis\x20status\x20for\x20\
    a\x20resource.\x20Currently\x20for\x20initial\x20analysis\x20only\x20(no\
    t\n\x20updated\x20in\x20continuous\x20analysis).\n\n\x0c\n\x05\x04\x02\
    \x04\x01\x01\x12\x03?\x07\x15\n\x19\n\x06\x04\x02\x04\x01\x02\0\x12\x03A\
    \x04$\x1a\n\x20Unknown.\n\n\x0e\n\x07\x04\x02\x04\x01\x02\0\x01\x12\x03A\
    \x04\x1f\n\x0e\n\x07\x04\x02\x04\x01\x02\0\x02\x12\x03A\"#\nD\n\x06\x04\
    \x02\x04\x01\x02\x01\x12\x03C\x04\x10\x1a5\x20Resource\x20is\x20known\
    \x20but\x20no\x20action\x20has\x20been\x20taken\x20yet.\n\n\x0e\n\x07\
    \x04\x02\x04\x01\x02\x01\x01\x12\x03C\x04\x0b\n\x0e\n\x07\x04\x02\x04\
    \x01\x02\x01\x02\x12\x03C\x0e\x0f\n,\n\x06\x04\x02\x04\x01\x02\x02\x12\
    \x03E\x04\x11\x1a\x1d\x20Resource\x20is\x20being\x20analyzed.\n\n\x0e\n\
    \x07\x04\x02\x04\x01\x02\x02\x01\x12\x03E\x04\x0c\n\x0e\n\x07\x04\x02\
    \x04\x01\x02\x02\x02\x12\x03E\x0f\x10\n4\n\x06\x04\x02\x04\x01\x02\x03\
    \x12\x03G\x04\x19\x1a%\x20Analysis\x20has\x20finished\x20successfully.\n\
    \n\x0e\n\x07\x04\x02\x04\x01\x02\x03\x01\x12\x03G\x04\x14\n\x0e\n\x07\
    \x04\x02\x04\x01\x02\x03\x02\x12\x03G\x17\x18\n^\n\x06\x04\x02\x04\x01\
    \x02\x04\x12\x03J\x04\x18\x1aO\x20Analysis\x20has\x20finished\x20unsucce\
    ssfully,\x20the\x20analysis\x20itself\x20is\x20in\x20a\x20bad\n\x20state\
    .\n\n\x0e\n\x07\x04\x02\x04\x01\x02\x04\x01\x12\x03J\x04\x13\n\x0e\n\x07\
    \x04\x02\x04\x01\x02\x04\x02\x12\x03J\x16\x17\n:\n\x06\x04\x02\x04\x01\
    \x02\x05\x12\x03L\x04\x1d\x1a+\x20The\x20resource\x20is\x20known\x20not\
    \x20to\x20be\x20supported\n\n\x0e\n\x07\x04\x02\x04\x01\x02\x05\x01\x12\
    \x03L\x04\x18\n\x0e\n\x07\x04\x02\x04\x01\x02\x05\x02\x12\x03L\x1b\x1c\n\
    8\n\x04\x04\x02\x02\x02\x12\x03P\x02%\x1a+\x20The\x20status\x20of\x20dis\
    covery\x20for\x20the\x20resource.\n\n\r\n\x05\x04\x02\x02\x02\x04\x12\
    \x04P\x02M\x03\n\x0c\n\x05\x04\x02\x02\x02\x06\x12\x03P\x02\x10\n\x0c\n\
    \x05\x04\x02\x02\x02\x01\x12\x03P\x11\x20\n\x0c\n\x05\x04\x02\x02\x02\
    \x03\x12\x03P#$\n\xb4\x01\n\x04\x04\x02\x02\x03\x12\x03U\x02.\x1a\xa6\
    \x01\x20When\x20an\x20error\x20is\x20encountered\x20this\x20will\x20cont\
    ain\x20a\x20LocalizedMessage\x20under\n\x20details\x20to\x20show\x20to\
    \x20the\x20user.\x20The\x20LocalizedMessage\x20is\x20output\x20only\x20a\
    nd\n\x20populated\x20by\x20the\x20API.\n\n\r\n\x05\x04\x02\x02\x03\x04\
    \x12\x04U\x02P%\n\x0c\n\x05\x04\x02\x02\x03\x06\x12\x03U\x02\x13\n\x0c\n\
    \x05\x04\x02\x02\x03\x01\x12\x03U\x14)\n\x0c\n\x05\x04\x02\x02\x03\x03\
    \x12\x03U,-b\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
