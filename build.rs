// This file is generated by rust-protobuf 2.6.0. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq,Clone,Default)]
pub struct Build {
    // message fields
    pub builder_version: ::std::string::String,
    pub signature: ::protobuf::SingularPtrField<BuildSignature>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Build {
    fn default() -> &'a Build {
        <Build as ::protobuf::Message>::default_instance()
    }
}

impl Build {
    pub fn new() -> Build {
        ::std::default::Default::default()
    }

    // string builder_version = 1;


    pub fn get_builder_version(&self) -> &str {
        &self.builder_version
    }
    pub fn clear_builder_version(&mut self) {
        self.builder_version.clear();
    }

    // Param is passed by value, moved
    pub fn set_builder_version(&mut self, v: ::std::string::String) {
        self.builder_version = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_builder_version(&mut self) -> &mut ::std::string::String {
        &mut self.builder_version
    }

    // Take field
    pub fn take_builder_version(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.builder_version, ::std::string::String::new())
    }

    // .grafeas.v1beta1.build.BuildSignature signature = 2;


    pub fn get_signature(&self) -> &BuildSignature {
        self.signature.as_ref().unwrap_or_else(|| BuildSignature::default_instance())
    }
    pub fn clear_signature(&mut self) {
        self.signature.clear();
    }

    pub fn has_signature(&self) -> bool {
        self.signature.is_some()
    }

    // Param is passed by value, moved
    pub fn set_signature(&mut self, v: BuildSignature) {
        self.signature = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_signature(&mut self) -> &mut BuildSignature {
        if self.signature.is_none() {
            self.signature.set_default();
        }
        self.signature.as_mut().unwrap()
    }

    // Take field
    pub fn take_signature(&mut self) -> BuildSignature {
        self.signature.take().unwrap_or_else(|| BuildSignature::new())
    }
}

impl ::protobuf::Message for Build {
    fn is_initialized(&self) -> bool {
        for v in &self.signature {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.builder_version)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.signature)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.builder_version.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.builder_version);
        }
        if let Some(ref v) = self.signature.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.builder_version.is_empty() {
            os.write_string(1, &self.builder_version)?;
        }
        if let Some(ref v) = self.signature.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Build {
        Build::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "builder_version",
                    |m: &Build| { &m.builder_version },
                    |m: &mut Build| { &mut m.builder_version },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<BuildSignature>>(
                    "signature",
                    |m: &Build| { &m.signature },
                    |m: &mut Build| { &mut m.signature },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Build>(
                    "Build",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Build {
        static mut instance: ::protobuf::lazy::Lazy<Build> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Build,
        };
        unsafe {
            instance.get(Build::new)
        }
    }
}

impl ::protobuf::Clear for Build {
    fn clear(&mut self) {
        self.builder_version.clear();
        self.signature.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Build {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Build {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct BuildSignature {
    // message fields
    pub public_key: ::std::string::String,
    pub signature: ::std::vec::Vec<u8>,
    pub key_id: ::std::string::String,
    pub key_type: BuildSignature_KeyType,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a BuildSignature {
    fn default() -> &'a BuildSignature {
        <BuildSignature as ::protobuf::Message>::default_instance()
    }
}

impl BuildSignature {
    pub fn new() -> BuildSignature {
        ::std::default::Default::default()
    }

    // string public_key = 1;


    pub fn get_public_key(&self) -> &str {
        &self.public_key
    }
    pub fn clear_public_key(&mut self) {
        self.public_key.clear();
    }

    // Param is passed by value, moved
    pub fn set_public_key(&mut self, v: ::std::string::String) {
        self.public_key = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_public_key(&mut self) -> &mut ::std::string::String {
        &mut self.public_key
    }

    // Take field
    pub fn take_public_key(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.public_key, ::std::string::String::new())
    }

    // bytes signature = 2;


    pub fn get_signature(&self) -> &[u8] {
        &self.signature
    }
    pub fn clear_signature(&mut self) {
        self.signature.clear();
    }

    // Param is passed by value, moved
    pub fn set_signature(&mut self, v: ::std::vec::Vec<u8>) {
        self.signature = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_signature(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.signature
    }

    // Take field
    pub fn take_signature(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.signature, ::std::vec::Vec::new())
    }

    // string key_id = 3;


    pub fn get_key_id(&self) -> &str {
        &self.key_id
    }
    pub fn clear_key_id(&mut self) {
        self.key_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_key_id(&mut self, v: ::std::string::String) {
        self.key_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_key_id(&mut self) -> &mut ::std::string::String {
        &mut self.key_id
    }

    // Take field
    pub fn take_key_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.key_id, ::std::string::String::new())
    }

    // .grafeas.v1beta1.build.BuildSignature.KeyType key_type = 4;


    pub fn get_key_type(&self) -> BuildSignature_KeyType {
        self.key_type
    }
    pub fn clear_key_type(&mut self) {
        self.key_type = BuildSignature_KeyType::KEY_TYPE_UNSPECIFIED;
    }

    // Param is passed by value, moved
    pub fn set_key_type(&mut self, v: BuildSignature_KeyType) {
        self.key_type = v;
    }
}

impl ::protobuf::Message for BuildSignature {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.public_key)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.signature)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.key_id)?;
                },
                4 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.key_type, 4, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.public_key.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.public_key);
        }
        if !self.signature.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.signature);
        }
        if !self.key_id.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.key_id);
        }
        if self.key_type != BuildSignature_KeyType::KEY_TYPE_UNSPECIFIED {
            my_size += ::protobuf::rt::enum_size(4, self.key_type);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.public_key.is_empty() {
            os.write_string(1, &self.public_key)?;
        }
        if !self.signature.is_empty() {
            os.write_bytes(2, &self.signature)?;
        }
        if !self.key_id.is_empty() {
            os.write_string(3, &self.key_id)?;
        }
        if self.key_type != BuildSignature_KeyType::KEY_TYPE_UNSPECIFIED {
            os.write_enum(4, self.key_type.value())?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> BuildSignature {
        BuildSignature::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "public_key",
                    |m: &BuildSignature| { &m.public_key },
                    |m: &mut BuildSignature| { &mut m.public_key },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "signature",
                    |m: &BuildSignature| { &m.signature },
                    |m: &mut BuildSignature| { &mut m.signature },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "key_id",
                    |m: &BuildSignature| { &m.key_id },
                    |m: &mut BuildSignature| { &mut m.key_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<BuildSignature_KeyType>>(
                    "key_type",
                    |m: &BuildSignature| { &m.key_type },
                    |m: &mut BuildSignature| { &mut m.key_type },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<BuildSignature>(
                    "BuildSignature",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static BuildSignature {
        static mut instance: ::protobuf::lazy::Lazy<BuildSignature> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const BuildSignature,
        };
        unsafe {
            instance.get(BuildSignature::new)
        }
    }
}

impl ::protobuf::Clear for BuildSignature {
    fn clear(&mut self) {
        self.public_key.clear();
        self.signature.clear();
        self.key_id.clear();
        self.key_type = BuildSignature_KeyType::KEY_TYPE_UNSPECIFIED;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for BuildSignature {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BuildSignature {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum BuildSignature_KeyType {
    KEY_TYPE_UNSPECIFIED = 0,
    PGP_ASCII_ARMORED = 1,
    PKIX_PEM = 2,
}

impl ::protobuf::ProtobufEnum for BuildSignature_KeyType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<BuildSignature_KeyType> {
        match value {
            0 => ::std::option::Option::Some(BuildSignature_KeyType::KEY_TYPE_UNSPECIFIED),
            1 => ::std::option::Option::Some(BuildSignature_KeyType::PGP_ASCII_ARMORED),
            2 => ::std::option::Option::Some(BuildSignature_KeyType::PKIX_PEM),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [BuildSignature_KeyType] = &[
            BuildSignature_KeyType::KEY_TYPE_UNSPECIFIED,
            BuildSignature_KeyType::PGP_ASCII_ARMORED,
            BuildSignature_KeyType::PKIX_PEM,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("BuildSignature_KeyType", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for BuildSignature_KeyType {
}

impl ::std::default::Default for BuildSignature_KeyType {
    fn default() -> Self {
        BuildSignature_KeyType::KEY_TYPE_UNSPECIFIED
    }
}

impl ::protobuf::reflect::ProtobufValue for BuildSignature_KeyType {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Details {
    // message fields
    pub provenance: ::protobuf::SingularPtrField<super::provenance::BuildProvenance>,
    pub provenance_bytes: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Details {
    fn default() -> &'a Details {
        <Details as ::protobuf::Message>::default_instance()
    }
}

impl Details {
    pub fn new() -> Details {
        ::std::default::Default::default()
    }

    // .grafeas.v1beta1.provenance.BuildProvenance provenance = 1;


    pub fn get_provenance(&self) -> &super::provenance::BuildProvenance {
        self.provenance.as_ref().unwrap_or_else(|| super::provenance::BuildProvenance::default_instance())
    }
    pub fn clear_provenance(&mut self) {
        self.provenance.clear();
    }

    pub fn has_provenance(&self) -> bool {
        self.provenance.is_some()
    }

    // Param is passed by value, moved
    pub fn set_provenance(&mut self, v: super::provenance::BuildProvenance) {
        self.provenance = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_provenance(&mut self) -> &mut super::provenance::BuildProvenance {
        if self.provenance.is_none() {
            self.provenance.set_default();
        }
        self.provenance.as_mut().unwrap()
    }

    // Take field
    pub fn take_provenance(&mut self) -> super::provenance::BuildProvenance {
        self.provenance.take().unwrap_or_else(|| super::provenance::BuildProvenance::new())
    }

    // string provenance_bytes = 2;


    pub fn get_provenance_bytes(&self) -> &str {
        &self.provenance_bytes
    }
    pub fn clear_provenance_bytes(&mut self) {
        self.provenance_bytes.clear();
    }

    // Param is passed by value, moved
    pub fn set_provenance_bytes(&mut self, v: ::std::string::String) {
        self.provenance_bytes = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_provenance_bytes(&mut self) -> &mut ::std::string::String {
        &mut self.provenance_bytes
    }

    // Take field
    pub fn take_provenance_bytes(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.provenance_bytes, ::std::string::String::new())
    }
}

impl ::protobuf::Message for Details {
    fn is_initialized(&self) -> bool {
        for v in &self.provenance {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.provenance)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.provenance_bytes)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.provenance.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.provenance_bytes.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.provenance_bytes);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.provenance.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.provenance_bytes.is_empty() {
            os.write_string(2, &self.provenance_bytes)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Details {
        Details::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::provenance::BuildProvenance>>(
                    "provenance",
                    |m: &Details| { &m.provenance },
                    |m: &mut Details| { &mut m.provenance },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "provenance_bytes",
                    |m: &Details| { &m.provenance_bytes },
                    |m: &mut Details| { &mut m.provenance_bytes },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Details>(
                    "Details",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Details {
        static mut instance: ::protobuf::lazy::Lazy<Details> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Details,
        };
        unsafe {
            instance.get(Details::new)
        }
    }
}

impl ::protobuf::Clear for Details {
    fn clear(&mut self) {
        self.provenance.clear();
        self.provenance_bytes.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Details {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Details {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x19proto/v1beta1/build.proto\x12\x15grafeas.v1beta1.build\x1a\x1eprot\
    o/v1beta1/provenance.proto\"u\n\x05Build\x12'\n\x0fbuilder_version\x18\
    \x01\x20\x01(\tR\x0ebuilderVersion\x12C\n\tsignature\x18\x02\x20\x01(\
    \x0b2%.grafeas.v1beta1.build.BuildSignatureR\tsignature\"\xf8\x01\n\x0eB\
    uildSignature\x12\x1d\n\npublic_key\x18\x01\x20\x01(\tR\tpublicKey\x12\
    \x1c\n\tsignature\x18\x02\x20\x01(\x0cR\tsignature\x12\x15\n\x06key_id\
    \x18\x03\x20\x01(\tR\x05keyId\x12H\n\x08key_type\x18\x04\x20\x01(\x0e2-.\
    grafeas.v1beta1.build.BuildSignature.KeyTypeR\x07keyType\"H\n\x07KeyType\
    \x12\x18\n\x14KEY_TYPE_UNSPECIFIED\x10\0\x12\x15\n\x11PGP_ASCII_ARMORED\
    \x10\x01\x12\x0c\n\x08PKIX_PEM\x10\x02\"\x81\x01\n\x07Details\x12K\n\npr\
    ovenance\x18\x01\x20\x01(\x0b2+.grafeas.v1beta1.provenance.BuildProvenan\
    ceR\nprovenance\x12)\n\x10provenance_bytes\x18\x02\x20\x01(\tR\x0fproven\
    anceBytesB[\n\x18io.grafeas.v1beta1.buildP\x01Z7github.com/grafeas/grafe\
    as/proto/v1beta1/build_go_proto\xa2\x02\x03GRAJ\x8d\x1e\n\x06\x12\x04\
    \x0e\0_\x01\n\xda\x04\n\x01\x0c\x12\x03\x0e\0\x122\xcf\x04\x20Copyright\
    \x202018\x20The\x20Grafeas\x20Authors.\x20All\x20rights\x20reserved.\n\n\
    \x20Licensed\x20under\x20the\x20Apache\x20License,\x20Version\x202.0\x20\
    (the\x20\"License\");\n\x20you\x20may\x20not\x20use\x20this\x20file\x20e\
    xcept\x20in\x20compliance\x20with\x20the\x20License.\n\x20You\x20may\x20\
    obtain\x20a\x20copy\x20of\x20the\x20License\x20at\n\n\x20\x20\x20\x20htt\
    p://www.apache.org/licenses/LICENSE-2.0\n\n\x20Unless\x20required\x20by\
    \x20applicable\x20law\x20or\x20agreed\x20to\x20in\x20writing,\x20softwar\
    e\n\x20distributed\x20under\x20the\x20License\x20is\x20distributed\x20on\
    \x20an\x20\"AS\x20IS\"\x20BASIS,\n\x20WITHOUT\x20WARRANTIES\x20OR\x20CON\
    DITIONS\x20OF\x20ANY\x20KIND,\x20either\x20express\x20or\x20implied.\n\
    \x20See\x20the\x20License\x20for\x20the\x20specific\x20language\x20gover\
    ning\x20permissions\x20and\n\x20limitations\x20under\x20the\x20License.\
    \n\n\x08\n\x01\x02\x12\x03\x10\0\x1e\n\x08\n\x01\x08\x12\x03\x12\0N\n\t\
    \n\x02\x08\x0b\x12\x03\x12\0N\n\x08\n\x01\x08\x12\x03\x13\0\"\n\t\n\x02\
    \x08\n\x12\x03\x13\0\"\n\x08\n\x01\x08\x12\x03\x14\01\n\t\n\x02\x08\x01\
    \x12\x03\x14\01\n\x08\n\x01\x08\x12\x03\x15\0!\n\t\n\x02\x08$\x12\x03\
    \x15\0!\n\t\n\x02\x03\0\x12\x03\x17\0(\n\x8f\x01\n\x02\x04\0\x12\x04\x1b\
    \0\"\x01\x1a\x82\x01\x20Note\x20holding\x20the\x20version\x20of\x20the\
    \x20provider's\x20builder\x20and\x20the\x20signature\x20of\x20the\n\x20p\
    rovenance\x20message\x20in\x20the\x20build\x20details\x20occurrence.\n\n\
    \n\n\x03\x04\0\x01\x12\x03\x1b\x08\r\nU\n\x04\x04\0\x02\0\x12\x03\x1d\
    \x02\x1d\x1aH\x20Required.\x20Immutable.\x20Version\x20of\x20the\x20buil\
    der\x20which\x20produced\x20this\x20build.\n\n\r\n\x05\x04\0\x02\0\x04\
    \x12\x04\x1d\x02\x1b\x0f\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\x1d\x02\x08\
    \n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x1d\t\x18\n\x0c\n\x05\x04\0\x02\0\
    \x03\x12\x03\x1d\x1b\x1c\nk\n\x04\x04\0\x02\x01\x12\x03!\x02\x1f\x1a^\
    \x20Signature\x20of\x20the\x20build\x20in\x20occurrences\x20pointing\x20\
    to\x20this\x20build\x20note\n\x20containing\x20build\x20details.\n\n\r\n\
    \x05\x04\0\x02\x01\x04\x12\x04!\x02\x1d\x1d\n\x0c\n\x05\x04\0\x02\x01\
    \x06\x12\x03!\x02\x10\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03!\x11\x1a\n\
    \x0c\n\x05\x04\0\x02\x01\x03\x12\x03!\x1d\x1e\nH\n\x02\x04\x01\x12\x04%\
    \0L\x01\x1a<\x20Message\x20encapsulating\x20the\x20signature\x20of\x20th\
    e\x20verified\x20build.\n\n\n\n\x03\x04\x01\x01\x12\x03%\x08\x16\n\xdc\
    \x05\n\x04\x04\x01\x02\0\x12\x033\x02\x18\x1a\xce\x05\x20Public\x20key\
    \x20of\x20the\x20builder\x20which\x20can\x20be\x20used\x20to\x20verify\
    \x20that\x20the\x20related\n\x20findings\x20are\x20valid\x20and\x20uncha\
    nged.\x20If\x20`key_type`\x20is\x20empty,\x20this\x20defaults\n\x20to\
    \x20PEM\x20encoded\x20public\x20keys.\n\n\x20This\x20field\x20may\x20be\
    \x20empty\x20if\x20`key_id`\x20references\x20an\x20external\x20key.\n\n\
    \x20For\x20Cloud\x20Build\x20based\x20signatures,\x20this\x20is\x20a\x20\
    PEM\x20encoded\x20public\n\x20key.\x20To\x20verify\x20the\x20Cloud\x20Bu\
    ild\x20signature,\x20place\x20the\x20contents\x20of\n\x20this\x20field\
    \x20into\x20a\x20file\x20(public.pem).\x20The\x20signature\x20field\x20i\
    s\x20base64-decoded\n\x20into\x20its\x20binary\x20representation\x20in\
    \x20signature.bin,\x20and\x20the\x20provenance\x20bytes\n\x20from\x20`Bu\
    ildDetails`\x20are\x20base64-decoded\x20into\x20a\x20binary\x20represent\
    ation\x20in\n\x20signed.bin.\x20OpenSSL\x20can\x20then\x20verify\x20the\
    \x20signature:\n\x20`openssl\x20sha256\x20-verify\x20public.pem\x20-sign\
    ature\x20signature.bin\x20signed.bin`\n\n\r\n\x05\x04\x01\x02\0\x04\x12\
    \x043\x02%\x18\n\x0c\n\x05\x04\x01\x02\0\x05\x12\x033\x02\x08\n\x0c\n\
    \x05\x04\x01\x02\0\x01\x12\x033\t\x13\n\x0c\n\x05\x04\x01\x02\0\x03\x12\
    \x033\x16\x17\ng\n\x04\x04\x01\x02\x01\x12\x037\x02\x16\x1aZ\x20Required\
    .\x20Signature\x20of\x20the\x20related\x20`BuildProvenance`.\x20In\x20JS\
    ON,\x20this\x20is\n\x20base-64\x20encoded.\n\n\r\n\x05\x04\x01\x02\x01\
    \x04\x12\x047\x023\x18\n\x0c\n\x05\x04\x01\x02\x01\x05\x12\x037\x02\x07\
    \n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x037\x08\x11\n\x0c\n\x05\x04\x01\
    \x02\x01\x03\x12\x037\x14\x15\n\x97\x02\n\x04\x04\x01\x02\x02\x12\x03=\
    \x02\x14\x1a\x89\x02\x20An\x20ID\x20for\x20the\x20key\x20used\x20to\x20s\
    ign.\x20This\x20could\x20be\x20either\x20an\x20ID\x20for\x20the\x20key\n\
    \x20stored\x20in\x20`public_key`\x20(such\x20as\x20the\x20ID\x20or\x20fi\
    ngerprint\x20for\x20a\x20PGP\x20key,\x20or\x20the\n\x20CN\x20for\x20a\
    \x20cert),\x20or\x20a\x20reference\x20to\x20an\x20external\x20key\x20(su\
    ch\x20as\x20a\x20reference\x20to\x20a\n\x20key\x20in\x20Cloud\x20Key\x20\
    Management\x20Service).\n\n\r\n\x05\x04\x01\x02\x02\x04\x12\x04=\x027\
    \x16\n\x0c\n\x05\x04\x01\x02\x02\x05\x12\x03=\x02\x08\n\x0c\n\x05\x04\
    \x01\x02\x02\x01\x12\x03=\t\x0f\n\x0c\n\x05\x04\x01\x02\x02\x03\x12\x03=\
    \x12\x13\n#\n\x04\x04\x01\x04\0\x12\x04@\x02G\x03\x1a\x15\x20Public\x20k\
    ey\x20formats.\n\n\x0c\n\x05\x04\x01\x04\0\x01\x12\x03@\x07\x0e\n&\n\x06\
    \x04\x01\x04\0\x02\0\x12\x03B\x04\x1d\x1a\x17\x20`KeyType`\x20is\x20not\
    \x20set.\n\n\x0e\n\x07\x04\x01\x04\0\x02\0\x01\x12\x03B\x04\x18\n\x0e\n\
    \x07\x04\x01\x04\0\x02\0\x02\x12\x03B\x1b\x1c\n0\n\x06\x04\x01\x04\0\x02\
    \x01\x12\x03D\x04\x1a\x1a!\x20`PGP\x20ASCII\x20Armored`\x20public\x20key\
    .\n\n\x0e\n\x07\x04\x01\x04\0\x02\x01\x01\x12\x03D\x04\x15\n\x0e\n\x07\
    \x04\x01\x04\0\x02\x01\x02\x12\x03D\x18\x19\n'\n\x06\x04\x01\x04\0\x02\
    \x02\x12\x03F\x04\x11\x1a\x18\x20`PKIX\x20PEM`\x20public\x20key.\n\n\x0e\
    \n\x07\x04\x01\x04\0\x02\x02\x01\x12\x03F\x04\x0c\n\x0e\n\x07\x04\x01\
    \x04\0\x02\x02\x02\x12\x03F\x0f\x10\n]\n\x04\x04\x01\x02\x03\x12\x03K\
    \x02\x17\x1aP\x20The\x20type\x20of\x20the\x20key,\x20either\x20stored\
    \x20in\x20`public_key`\x20or\x20referenced\x20in\n\x20`key_id`.\n\n\r\n\
    \x05\x04\x01\x02\x03\x04\x12\x04K\x02G\x03\n\x0c\n\x05\x04\x01\x02\x03\
    \x06\x12\x03K\x02\t\n\x0c\n\x05\x04\x01\x02\x03\x01\x12\x03K\n\x12\n\x0c\
    \n\x05\x04\x01\x02\x03\x03\x12\x03K\x15\x16\n,\n\x02\x04\x02\x12\x04O\0_\
    \x01\x1a\x20\x20Details\x20of\x20a\x20build\x20occurrence.\n\n\n\n\x03\
    \x04\x02\x01\x12\x03O\x08\x0f\n=\n\x04\x04\x02\x02\0\x12\x03Q\x02<\x1a0\
    \x20Required.\x20The\x20actual\x20provenance\x20for\x20the\x20build.\n\n\
    \r\n\x05\x04\x02\x02\0\x04\x12\x04Q\x02O\x11\n\x0c\n\x05\x04\x02\x02\0\
    \x06\x12\x03Q\x02,\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03Q-7\n\x0c\n\x05\
    \x04\x02\x02\0\x03\x12\x03Q:;\n\xec\x04\n\x04\x04\x02\x02\x01\x12\x03^\
    \x02\x1e\x1a\xde\x04\x20Serialized\x20JSON\x20representation\x20of\x20th\
    e\x20provenance,\x20used\x20in\x20generating\x20the\n\x20build\x20signat\
    ure\x20in\x20the\x20corresponding\x20build\x20note.\x20After\x20verifyin\
    g\x20the\n\x20signature,\x20`provenance_bytes`\x20can\x20be\x20unmarshal\
    led\x20and\x20compared\x20to\x20the\n\x20provenance\x20to\x20confirm\x20\
    that\x20it\x20is\x20unchanged.\x20A\x20base64-encoded\x20string\n\x20rep\
    resentation\x20of\x20the\x20provenance\x20bytes\x20is\x20used\x20for\x20\
    the\x20signature\x20in\x20order\n\x20to\x20interoperate\x20with\x20opens\
    sl\x20which\x20expects\x20this\x20format\x20for\x20signature\n\x20verifi\
    cation.\n\n\x20The\x20serialized\x20form\x20is\x20captured\x20both\x20to\
    \x20avoid\x20ambiguity\x20in\x20how\x20the\n\x20provenance\x20is\x20mars\
    halled\x20to\x20json\x20as\x20well\x20to\x20prevent\x20incompatibilities\
    \x20with\n\x20future\x20changes.\n\n\r\n\x05\x04\x02\x02\x01\x04\x12\x04\
    ^\x02Q<\n\x0c\n\x05\x04\x02\x02\x01\x05\x12\x03^\x02\x08\n\x0c\n\x05\x04\
    \x02\x02\x01\x01\x12\x03^\t\x19\n\x0c\n\x05\x04\x02\x02\x01\x03\x12\x03^\
    \x1c\x1db\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
