// This file is generated by rust-protobuf 2.6.0. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq,Clone,Default)]
pub struct RelatedUrl {
    // message fields
    pub url: ::std::string::String,
    pub label: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RelatedUrl {
    fn default() -> &'a RelatedUrl {
        <RelatedUrl as ::protobuf::Message>::default_instance()
    }
}

impl RelatedUrl {
    pub fn new() -> RelatedUrl {
        ::std::default::Default::default()
    }

    // string url = 1;


    pub fn get_url(&self) -> &str {
        &self.url
    }
    pub fn clear_url(&mut self) {
        self.url.clear();
    }

    // Param is passed by value, moved
    pub fn set_url(&mut self, v: ::std::string::String) {
        self.url = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_url(&mut self) -> &mut ::std::string::String {
        &mut self.url
    }

    // Take field
    pub fn take_url(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.url, ::std::string::String::new())
    }

    // string label = 2;


    pub fn get_label(&self) -> &str {
        &self.label
    }
    pub fn clear_label(&mut self) {
        self.label.clear();
    }

    // Param is passed by value, moved
    pub fn set_label(&mut self, v: ::std::string::String) {
        self.label = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_label(&mut self) -> &mut ::std::string::String {
        &mut self.label
    }

    // Take field
    pub fn take_label(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.label, ::std::string::String::new())
    }
}

impl ::protobuf::Message for RelatedUrl {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.url)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.label)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.url.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.url);
        }
        if !self.label.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.label);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.url.is_empty() {
            os.write_string(1, &self.url)?;
        }
        if !self.label.is_empty() {
            os.write_string(2, &self.label)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RelatedUrl {
        RelatedUrl::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "url",
                    |m: &RelatedUrl| { &m.url },
                    |m: &mut RelatedUrl| { &mut m.url },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "label",
                    |m: &RelatedUrl| { &m.label },
                    |m: &mut RelatedUrl| { &mut m.label },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<RelatedUrl>(
                    "RelatedUrl",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static RelatedUrl {
        static mut instance: ::protobuf::lazy::Lazy<RelatedUrl> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const RelatedUrl,
        };
        unsafe {
            instance.get(RelatedUrl::new)
        }
    }
}

impl ::protobuf::Clear for RelatedUrl {
    fn clear(&mut self) {
        self.url.clear();
        self.label.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RelatedUrl {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RelatedUrl {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Signature {
    // message fields
    pub signature: ::std::vec::Vec<u8>,
    pub public_key_id: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Signature {
    fn default() -> &'a Signature {
        <Signature as ::protobuf::Message>::default_instance()
    }
}

impl Signature {
    pub fn new() -> Signature {
        ::std::default::Default::default()
    }

    // bytes signature = 1;


    pub fn get_signature(&self) -> &[u8] {
        &self.signature
    }
    pub fn clear_signature(&mut self) {
        self.signature.clear();
    }

    // Param is passed by value, moved
    pub fn set_signature(&mut self, v: ::std::vec::Vec<u8>) {
        self.signature = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_signature(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.signature
    }

    // Take field
    pub fn take_signature(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.signature, ::std::vec::Vec::new())
    }

    // string public_key_id = 2;


    pub fn get_public_key_id(&self) -> &str {
        &self.public_key_id
    }
    pub fn clear_public_key_id(&mut self) {
        self.public_key_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_public_key_id(&mut self, v: ::std::string::String) {
        self.public_key_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_public_key_id(&mut self) -> &mut ::std::string::String {
        &mut self.public_key_id
    }

    // Take field
    pub fn take_public_key_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.public_key_id, ::std::string::String::new())
    }
}

impl ::protobuf::Message for Signature {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.signature)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.public_key_id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.signature.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.signature);
        }
        if !self.public_key_id.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.public_key_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.signature.is_empty() {
            os.write_bytes(1, &self.signature)?;
        }
        if !self.public_key_id.is_empty() {
            os.write_string(2, &self.public_key_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Signature {
        Signature::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "signature",
                    |m: &Signature| { &m.signature },
                    |m: &mut Signature| { &mut m.signature },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "public_key_id",
                    |m: &Signature| { &m.public_key_id },
                    |m: &mut Signature| { &mut m.public_key_id },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Signature>(
                    "Signature",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Signature {
        static mut instance: ::protobuf::lazy::Lazy<Signature> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Signature,
        };
        unsafe {
            instance.get(Signature::new)
        }
    }
}

impl ::protobuf::Clear for Signature {
    fn clear(&mut self) {
        self.signature.clear();
        self.public_key_id.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Signature {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Signature {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum NoteKind {
    NOTE_KIND_UNSPECIFIED = 0,
    VULNERABILITY = 1,
    BUILD = 2,
    IMAGE = 3,
    PACKAGE = 4,
    DEPLOYMENT = 5,
    DISCOVERY = 6,
    ATTESTATION = 7,
}

impl ::protobuf::ProtobufEnum for NoteKind {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<NoteKind> {
        match value {
            0 => ::std::option::Option::Some(NoteKind::NOTE_KIND_UNSPECIFIED),
            1 => ::std::option::Option::Some(NoteKind::VULNERABILITY),
            2 => ::std::option::Option::Some(NoteKind::BUILD),
            3 => ::std::option::Option::Some(NoteKind::IMAGE),
            4 => ::std::option::Option::Some(NoteKind::PACKAGE),
            5 => ::std::option::Option::Some(NoteKind::DEPLOYMENT),
            6 => ::std::option::Option::Some(NoteKind::DISCOVERY),
            7 => ::std::option::Option::Some(NoteKind::ATTESTATION),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [NoteKind] = &[
            NoteKind::NOTE_KIND_UNSPECIFIED,
            NoteKind::VULNERABILITY,
            NoteKind::BUILD,
            NoteKind::IMAGE,
            NoteKind::PACKAGE,
            NoteKind::DEPLOYMENT,
            NoteKind::DISCOVERY,
            NoteKind::ATTESTATION,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("NoteKind", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for NoteKind {
}

impl ::std::default::Default for NoteKind {
    fn default() -> Self {
        NoteKind::NOTE_KIND_UNSPECIFIED
    }
}

impl ::protobuf::reflect::ProtobufValue for NoteKind {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1aproto/v1beta1/common.proto\x12\x0fgrafeas.v1beta1\"4\n\nRelatedUrl\
    \x12\x10\n\x03url\x18\x01\x20\x01(\tR\x03url\x12\x14\n\x05label\x18\x02\
    \x20\x01(\tR\x05label\"M\n\tSignature\x12\x1c\n\tsignature\x18\x01\x20\
    \x01(\x0cR\tsignature\x12\"\n\rpublic_key_id\x18\x02\x20\x01(\tR\x0bpubl\
    icKeyId*\x8b\x01\n\x08NoteKind\x12\x19\n\x15NOTE_KIND_UNSPECIFIED\x10\0\
    \x12\x11\n\rVULNERABILITY\x10\x01\x12\t\n\x05BUILD\x10\x02\x12\t\n\x05IM\
    AGE\x10\x03\x12\x0b\n\x07PACKAGE\x10\x04\x12\x0e\n\nDEPLOYMENT\x10\x05\
    \x12\r\n\tDISCOVERY\x10\x06\x12\x0f\n\x0bATTESTATION\x10\x07BV\n\x12io.g\
    rafeas.v1beta1P\x01Z8github.com/grafeas/grafeas/proto/v1beta1/common_go_\
    proto\xa2\x02\x03GRAJ\xba\"\n\x06\x12\x04\x0e\0d\x01\n\xda\x04\n\x01\x0c\
    \x12\x03\x0e\0\x122\xcf\x04\x20Copyright\x202018\x20The\x20Grafeas\x20Au\
    thors.\x20All\x20rights\x20reserved.\n\n\x20Licensed\x20under\x20the\x20\
    Apache\x20License,\x20Version\x202.0\x20(the\x20\"License\");\n\x20you\
    \x20may\x20not\x20use\x20this\x20file\x20except\x20in\x20compliance\x20w\
    ith\x20the\x20License.\n\x20You\x20may\x20obtain\x20a\x20copy\x20of\x20t\
    he\x20License\x20at\n\n\x20\x20\x20\x20http://www.apache.org/licenses/LI\
    CENSE-2.0\n\n\x20Unless\x20required\x20by\x20applicable\x20law\x20or\x20\
    agreed\x20to\x20in\x20writing,\x20software\n\x20distributed\x20under\x20\
    the\x20License\x20is\x20distributed\x20on\x20an\x20\"AS\x20IS\"\x20BASIS\
    ,\n\x20WITHOUT\x20WARRANTIES\x20OR\x20CONDITIONS\x20OF\x20ANY\x20KIND,\
    \x20either\x20express\x20or\x20implied.\n\x20See\x20the\x20License\x20fo\
    r\x20the\x20specific\x20language\x20governing\x20permissions\x20and\n\
    \x20limitations\x20under\x20the\x20License.\n\n\x08\n\x01\x02\x12\x03\
    \x10\0\x18\n\x08\n\x01\x08\x12\x03\x12\0O\n\t\n\x02\x08\x0b\x12\x03\x12\
    \0O\n\x08\n\x01\x08\x12\x03\x13\0\"\n\t\n\x02\x08\n\x12\x03\x13\0\"\n\
    \x08\n\x01\x08\x12\x03\x14\0+\n\t\n\x02\x08\x01\x12\x03\x14\0+\n\x08\n\
    \x01\x08\x12\x03\x15\0!\n\t\n\x02\x08$\x12\x03\x15\0!\n;\n\x02\x05\0\x12\
    \x04\x18\0)\x01\x1a/\x20Kind\x20represents\x20the\x20kinds\x20of\x20note\
    s\x20supported.\n\n\n\n\x03\x05\0\x01\x12\x03\x18\x05\r\n\x17\n\x04\x05\
    \0\x02\0\x12\x03\x1a\x02\x1c\x1a\n\x20Unknown.\n\n\x0c\n\x05\x05\0\x02\0\
    \x01\x12\x03\x1a\x02\x17\n\x0c\n\x05\x05\0\x02\0\x02\x12\x03\x1a\x1a\x1b\
    \nI\n\x04\x05\0\x02\x01\x12\x03\x1c\x02\x14\x1a<\x20The\x20note\x20and\
    \x20occurrence\x20represent\x20a\x20package\x20vulnerability.\n\n\x0c\n\
    \x05\x05\0\x02\x01\x01\x12\x03\x1c\x02\x0f\n\x0c\n\x05\x05\0\x02\x01\x02\
    \x12\x03\x1c\x12\x13\n?\n\x04\x05\0\x02\x02\x12\x03\x1e\x02\x0c\x1a2\x20\
    The\x20note\x20and\x20occurrence\x20assert\x20build\x20provenance.\n\n\
    \x0c\n\x05\x05\0\x02\x02\x01\x12\x03\x1e\x02\x07\n\x0c\n\x05\x05\0\x02\
    \x02\x02\x12\x03\x1e\n\x0b\n;\n\x04\x05\0\x02\x03\x12\x03\x20\x02\x0c\
    \x1a.\x20This\x20represents\x20an\x20image\x20basis\x20relationship.\n\n\
    \x0c\n\x05\x05\0\x02\x03\x01\x12\x03\x20\x02\x07\n\x0c\n\x05\x05\0\x02\
    \x03\x02\x12\x03\x20\n\x0b\nI\n\x04\x05\0\x02\x04\x12\x03\"\x02\x0e\x1a<\
    \x20This\x20represents\x20a\x20package\x20installed\x20via\x20a\x20packa\
    ge\x20manager.\n\n\x0c\n\x05\x05\0\x02\x04\x01\x12\x03\"\x02\t\n\x0c\n\
    \x05\x05\0\x02\x04\x02\x12\x03\"\x0c\r\n?\n\x04\x05\0\x02\x05\x12\x03$\
    \x02\x11\x1a2\x20The\x20note\x20and\x20occurrence\x20track\x20deployment\
    \x20events.\n\n\x0c\n\x05\x05\0\x02\x05\x01\x12\x03$\x02\x0c\n\x0c\n\x05\
    \x05\0\x02\x05\x02\x12\x03$\x0f\x10\nX\n\x04\x05\0\x02\x06\x12\x03&\x02\
    \x10\x1aK\x20The\x20note\x20and\x20occurrence\x20track\x20the\x20initial\
    \x20discovery\x20status\x20of\x20a\x20resource.\n\n\x0c\n\x05\x05\0\x02\
    \x06\x01\x12\x03&\x02\x0b\n\x0c\n\x05\x05\0\x02\x06\x02\x12\x03&\x0e\x0f\
    \nM\n\x04\x05\0\x02\x07\x12\x03(\x02\x12\x1a@\x20This\x20represents\x20a\
    \x20logical\x20\"role\"\x20that\x20can\x20attest\x20to\x20artifacts.\n\n\
    \x0c\n\x05\x05\0\x02\x07\x01\x12\x03(\x02\r\n\x0c\n\x05\x05\0\x02\x07\
    \x02\x12\x03(\x10\x11\n7\n\x02\x04\0\x12\x04,\01\x01\x1a+\x20Metadata\
    \x20for\x20any\x20related\x20URL\x20information.\n\n\n\n\x03\x04\0\x01\
    \x12\x03,\x08\x12\n9\n\x04\x04\0\x02\0\x12\x03.\x02\x11\x1a,\x20Specific\
    \x20URL\x20associated\x20with\x20the\x20resource.\n\n\r\n\x05\x04\0\x02\
    \0\x04\x12\x04.\x02,\x14\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03.\x02\x08\n\
    \x0c\n\x05\x04\0\x02\0\x01\x12\x03.\t\x0c\n\x0c\n\x05\x04\0\x02\0\x03\
    \x12\x03.\x0f\x10\n2\n\x04\x04\0\x02\x01\x12\x030\x02\x13\x1a%\x20Label\
    \x20to\x20describe\x20usage\x20of\x20the\x20URL.\n\n\r\n\x05\x04\0\x02\
    \x01\x04\x12\x040\x02.\x11\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x030\x02\
    \x08\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x030\t\x0e\n\x0c\n\x05\x04\0\x02\
    \x01\x03\x12\x030\x11\x12\n\xa7\n\n\x02\x04\x01\x12\x04I\0d\x01\x1a\x9a\
    \n\x20Verifiers\x20(e.g.\x20Kritis\x20implementations)\x20MUST\x20verify\
    \x20signatures\n\x20with\x20respect\x20to\x20the\x20trust\x20anchors\x20\
    defined\x20in\x20policy\x20(e.g.\x20a\x20Kritis\x20policy).\n\x20Typical\
    ly\x20this\x20means\x20that\x20the\x20verifier\x20has\x20been\x20configu\
    red\x20with\x20a\x20map\x20from\n\x20`public_key_id`\x20to\x20public\x20\
    key\x20material\x20(and\x20any\x20required\x20parameters,\x20e.g.\n\x20s\
    igning\x20algorithm).\n\n\x20In\x20particular,\x20verification\x20implem\
    entations\x20MUST\x20NOT\x20treat\x20the\x20signature\n\x20`public_key_i\
    d`\x20as\x20anything\x20more\x20than\x20a\x20key\x20lookup\x20hint.\x20T\
    he\x20`public_key_id`\n\x20DOES\x20NOT\x20validate\x20or\x20authenticate\
    \x20a\x20public\x20key;\x20it\x20only\x20provides\x20a\x20mechanism\n\
    \x20for\x20quickly\x20selecting\x20a\x20public\x20key\x20ALREADY\x20CONF\
    IGURED\x20on\x20the\x20verifier\x20through\n\x20a\x20trusted\x20channel.\
    \x20Verification\x20implementations\x20MUST\x20reject\x20signatures\x20i\
    n\x20any\n\x20of\x20the\x20following\x20circumstances:\n\x20\x20\x20*\
    \x20The\x20`public_key_id`\x20is\x20not\x20recognized\x20by\x20the\x20ve\
    rifier.\n\x20\x20\x20*\x20The\x20public\x20key\x20that\x20`public_key_id\
    `\x20refers\x20to\x20does\x20not\x20verify\x20the\n\x20\x20\x20\x20\x20s\
    ignature\x20with\x20respect\x20to\x20the\x20payload.\n\n\x20The\x20`sign\
    ature`\x20contents\x20SHOULD\x20NOT\x20be\x20\"attached\"\x20(where\x20t\
    he\x20payload\x20is\n\x20included\x20with\x20the\x20serialized\x20`signa\
    ture`\x20bytes).\x20Verifiers\x20MUST\x20ignore\x20any\n\x20\"attached\"\
    \x20payload\x20and\x20only\x20verify\x20signatures\x20with\x20respect\
    \x20to\x20explicitly\n\x20provided\x20payload\x20(e.g.\x20a\x20`payload`\
    \x20field\x20on\x20the\x20proto\x20message\x20that\x20holds\n\x20this\
    \x20Signature,\x20or\x20the\x20canonical\x20serialization\x20of\x20the\
    \x20proto\x20message\x20that\n\x20holds\x20this\x20signature).\n\n\n\n\
    \x03\x04\x01\x01\x12\x03I\x08\x11\n\xef\x02\n\x04\x04\x01\x02\0\x12\x03P\
    \x02\x16\x1a\xe1\x02\x20The\x20content\x20of\x20the\x20signature,\x20an\
    \x20opaque\x20bytestring.\n\x20The\x20payload\x20that\x20this\x20signatu\
    re\x20verifies\x20MUST\x20be\x20unambiguously\x20provided\n\x20with\x20t\
    he\x20Signature\x20during\x20verification.\x20A\x20wrapper\x20message\
    \x20might\x20provide\n\x20the\x20payload\x20explicitly.\x20Alternatively\
    ,\x20a\x20message\x20might\x20have\x20a\x20canonical\n\x20serialization\
    \x20that\x20can\x20always\x20be\x20unambiguously\x20computed\x20to\x20de\
    rive\x20the\n\x20payload.\n\n\r\n\x05\x04\x01\x02\0\x04\x12\x04P\x02I\
    \x13\n\x0c\n\x05\x04\x01\x02\0\x05\x12\x03P\x02\x07\n\x0c\n\x05\x04\x01\
    \x02\0\x01\x12\x03P\x08\x11\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03P\x14\
    \x15\n\xf4\x05\n\x04\x04\x01\x02\x01\x12\x03c\x02\x1b\x1a\xe6\x05\x20The\
    \x20identifier\x20for\x20the\x20public\x20key\x20that\x20verifies\x20thi\
    s\x20signature.\n\x20\x20\x20*\x20The\x20`public_key_id`\x20is\x20requir\
    ed.\n\x20\x20\x20*\x20The\x20`public_key_id`\x20MUST\x20be\x20an\x20RFC3\
    986\x20conformant\x20URI.\n\x20\x20\x20*\x20When\x20possible,\x20the\x20\
    `public_key_id`\x20SHOULD\x20be\x20an\x20immutable\x20reference,\n\x20\
    \x20\x20\x20\x20such\x20as\x20a\x20cryptographic\x20digest.\n\n\x20Examp\
    les\x20of\x20valid\x20`public_key_id`s:\n\n\x20OpenPGP\x20V4\x20public\
    \x20key\x20fingerprint:\n\x20\x20\x20*\x20\"openpgp4fpr:74FAF3B861BDA087\
    0C7B6DEF607E48D2A663AEEA\"\n\x20See\x20https://www.iana.org/assignments/\
    uri-schemes/prov/openpgp4fpr\x20for\x20more\n\x20details\x20on\x20this\
    \x20scheme.\n\n\x20RFC6920\x20digest-named\x20SubjectPublicKeyInfo\x20(d\
    igest\x20of\x20the\x20DER\n\x20serialization):\n\x20\x20\x20*\x20\"ni://\
    /sha-256;cD9o9Cq6LG3jD0iKXqEi_vdjJGecm_iXkbqVoScViaU\"\n\x20\x20\x20*\
    \x20\"nih:///sha-256;703f68f42aba2c6de30f488a5ea122fef76324679c9bf89791b\
    a95a1271589a5\"\n\n\r\n\x05\x04\x01\x02\x01\x04\x12\x04c\x02P\x16\n\x0c\
    \n\x05\x04\x01\x02\x01\x05\x12\x03c\x02\x08\n\x0c\n\x05\x04\x01\x02\x01\
    \x01\x12\x03c\t\x16\n\x0c\n\x05\x04\x01\x02\x01\x03\x12\x03c\x19\x1ab\
    \x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
