// This file is generated by rust-protobuf 2.6.0. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq,Clone,Default)]
pub struct Layer {
    // message fields
    pub directive: Layer_Directive,
    pub arguments: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Layer {
    fn default() -> &'a Layer {
        <Layer as ::protobuf::Message>::default_instance()
    }
}

impl Layer {
    pub fn new() -> Layer {
        ::std::default::Default::default()
    }

    // .grafeas.v1beta1.image.Layer.Directive directive = 1;


    pub fn get_directive(&self) -> Layer_Directive {
        self.directive
    }
    pub fn clear_directive(&mut self) {
        self.directive = Layer_Directive::DIRECTIVE_UNSPECIFIED;
    }

    // Param is passed by value, moved
    pub fn set_directive(&mut self, v: Layer_Directive) {
        self.directive = v;
    }

    // string arguments = 2;


    pub fn get_arguments(&self) -> &str {
        &self.arguments
    }
    pub fn clear_arguments(&mut self) {
        self.arguments.clear();
    }

    // Param is passed by value, moved
    pub fn set_arguments(&mut self, v: ::std::string::String) {
        self.arguments = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_arguments(&mut self) -> &mut ::std::string::String {
        &mut self.arguments
    }

    // Take field
    pub fn take_arguments(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.arguments, ::std::string::String::new())
    }
}

impl ::protobuf::Message for Layer {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.directive, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.arguments)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.directive != Layer_Directive::DIRECTIVE_UNSPECIFIED {
            my_size += ::protobuf::rt::enum_size(1, self.directive);
        }
        if !self.arguments.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.arguments);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.directive != Layer_Directive::DIRECTIVE_UNSPECIFIED {
            os.write_enum(1, self.directive.value())?;
        }
        if !self.arguments.is_empty() {
            os.write_string(2, &self.arguments)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Layer {
        Layer::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<Layer_Directive>>(
                    "directive",
                    |m: &Layer| { &m.directive },
                    |m: &mut Layer| { &mut m.directive },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "arguments",
                    |m: &Layer| { &m.arguments },
                    |m: &mut Layer| { &mut m.arguments },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Layer>(
                    "Layer",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Layer {
        static mut instance: ::protobuf::lazy::Lazy<Layer> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Layer,
        };
        unsafe {
            instance.get(Layer::new)
        }
    }
}

impl ::protobuf::Clear for Layer {
    fn clear(&mut self) {
        self.directive = Layer_Directive::DIRECTIVE_UNSPECIFIED;
        self.arguments.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Layer {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Layer {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum Layer_Directive {
    DIRECTIVE_UNSPECIFIED = 0,
    MAINTAINER = 1,
    RUN = 2,
    CMD = 3,
    LABEL = 4,
    EXPOSE = 5,
    ENV = 6,
    ADD = 7,
    COPY = 8,
    ENTRYPOINT = 9,
    VOLUME = 10,
    USER = 11,
    WORKDIR = 12,
    ARG = 13,
    ONBUILD = 14,
    STOPSIGNAL = 15,
    HEALTHCHECK = 16,
    SHELL = 17,
}

impl ::protobuf::ProtobufEnum for Layer_Directive {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<Layer_Directive> {
        match value {
            0 => ::std::option::Option::Some(Layer_Directive::DIRECTIVE_UNSPECIFIED),
            1 => ::std::option::Option::Some(Layer_Directive::MAINTAINER),
            2 => ::std::option::Option::Some(Layer_Directive::RUN),
            3 => ::std::option::Option::Some(Layer_Directive::CMD),
            4 => ::std::option::Option::Some(Layer_Directive::LABEL),
            5 => ::std::option::Option::Some(Layer_Directive::EXPOSE),
            6 => ::std::option::Option::Some(Layer_Directive::ENV),
            7 => ::std::option::Option::Some(Layer_Directive::ADD),
            8 => ::std::option::Option::Some(Layer_Directive::COPY),
            9 => ::std::option::Option::Some(Layer_Directive::ENTRYPOINT),
            10 => ::std::option::Option::Some(Layer_Directive::VOLUME),
            11 => ::std::option::Option::Some(Layer_Directive::USER),
            12 => ::std::option::Option::Some(Layer_Directive::WORKDIR),
            13 => ::std::option::Option::Some(Layer_Directive::ARG),
            14 => ::std::option::Option::Some(Layer_Directive::ONBUILD),
            15 => ::std::option::Option::Some(Layer_Directive::STOPSIGNAL),
            16 => ::std::option::Option::Some(Layer_Directive::HEALTHCHECK),
            17 => ::std::option::Option::Some(Layer_Directive::SHELL),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [Layer_Directive] = &[
            Layer_Directive::DIRECTIVE_UNSPECIFIED,
            Layer_Directive::MAINTAINER,
            Layer_Directive::RUN,
            Layer_Directive::CMD,
            Layer_Directive::LABEL,
            Layer_Directive::EXPOSE,
            Layer_Directive::ENV,
            Layer_Directive::ADD,
            Layer_Directive::COPY,
            Layer_Directive::ENTRYPOINT,
            Layer_Directive::VOLUME,
            Layer_Directive::USER,
            Layer_Directive::WORKDIR,
            Layer_Directive::ARG,
            Layer_Directive::ONBUILD,
            Layer_Directive::STOPSIGNAL,
            Layer_Directive::HEALTHCHECK,
            Layer_Directive::SHELL,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("Layer_Directive", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for Layer_Directive {
}

impl ::std::default::Default for Layer_Directive {
    fn default() -> Self {
        Layer_Directive::DIRECTIVE_UNSPECIFIED
    }
}

impl ::protobuf::reflect::ProtobufValue for Layer_Directive {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Fingerprint {
    // message fields
    pub v1_name: ::std::string::String,
    pub v2_blob: ::protobuf::RepeatedField<::std::string::String>,
    pub v2_name: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Fingerprint {
    fn default() -> &'a Fingerprint {
        <Fingerprint as ::protobuf::Message>::default_instance()
    }
}

impl Fingerprint {
    pub fn new() -> Fingerprint {
        ::std::default::Default::default()
    }

    // string v1_name = 1;


    pub fn get_v1_name(&self) -> &str {
        &self.v1_name
    }
    pub fn clear_v1_name(&mut self) {
        self.v1_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_v1_name(&mut self, v: ::std::string::String) {
        self.v1_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_v1_name(&mut self) -> &mut ::std::string::String {
        &mut self.v1_name
    }

    // Take field
    pub fn take_v1_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.v1_name, ::std::string::String::new())
    }

    // repeated string v2_blob = 2;


    pub fn get_v2_blob(&self) -> &[::std::string::String] {
        &self.v2_blob
    }
    pub fn clear_v2_blob(&mut self) {
        self.v2_blob.clear();
    }

    // Param is passed by value, moved
    pub fn set_v2_blob(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.v2_blob = v;
    }

    // Mutable pointer to the field.
    pub fn mut_v2_blob(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.v2_blob
    }

    // Take field
    pub fn take_v2_blob(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.v2_blob, ::protobuf::RepeatedField::new())
    }

    // string v2_name = 3;


    pub fn get_v2_name(&self) -> &str {
        &self.v2_name
    }
    pub fn clear_v2_name(&mut self) {
        self.v2_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_v2_name(&mut self, v: ::std::string::String) {
        self.v2_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_v2_name(&mut self) -> &mut ::std::string::String {
        &mut self.v2_name
    }

    // Take field
    pub fn take_v2_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.v2_name, ::std::string::String::new())
    }
}

impl ::protobuf::Message for Fingerprint {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.v1_name)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.v2_blob)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.v2_name)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.v1_name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.v1_name);
        }
        for value in &self.v2_blob {
            my_size += ::protobuf::rt::string_size(2, &value);
        };
        if !self.v2_name.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.v2_name);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.v1_name.is_empty() {
            os.write_string(1, &self.v1_name)?;
        }
        for v in &self.v2_blob {
            os.write_string(2, &v)?;
        };
        if !self.v2_name.is_empty() {
            os.write_string(3, &self.v2_name)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Fingerprint {
        Fingerprint::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "v1_name",
                    |m: &Fingerprint| { &m.v1_name },
                    |m: &mut Fingerprint| { &mut m.v1_name },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "v2_blob",
                    |m: &Fingerprint| { &m.v2_blob },
                    |m: &mut Fingerprint| { &mut m.v2_blob },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "v2_name",
                    |m: &Fingerprint| { &m.v2_name },
                    |m: &mut Fingerprint| { &mut m.v2_name },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Fingerprint>(
                    "Fingerprint",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Fingerprint {
        static mut instance: ::protobuf::lazy::Lazy<Fingerprint> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Fingerprint,
        };
        unsafe {
            instance.get(Fingerprint::new)
        }
    }
}

impl ::protobuf::Clear for Fingerprint {
    fn clear(&mut self) {
        self.v1_name.clear();
        self.v2_blob.clear();
        self.v2_name.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Fingerprint {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Fingerprint {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Basis {
    // message fields
    pub resource_url: ::std::string::String,
    pub fingerprint: ::protobuf::SingularPtrField<Fingerprint>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Basis {
    fn default() -> &'a Basis {
        <Basis as ::protobuf::Message>::default_instance()
    }
}

impl Basis {
    pub fn new() -> Basis {
        ::std::default::Default::default()
    }

    // string resource_url = 1;


    pub fn get_resource_url(&self) -> &str {
        &self.resource_url
    }
    pub fn clear_resource_url(&mut self) {
        self.resource_url.clear();
    }

    // Param is passed by value, moved
    pub fn set_resource_url(&mut self, v: ::std::string::String) {
        self.resource_url = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_resource_url(&mut self) -> &mut ::std::string::String {
        &mut self.resource_url
    }

    // Take field
    pub fn take_resource_url(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.resource_url, ::std::string::String::new())
    }

    // .grafeas.v1beta1.image.Fingerprint fingerprint = 2;


    pub fn get_fingerprint(&self) -> &Fingerprint {
        self.fingerprint.as_ref().unwrap_or_else(|| Fingerprint::default_instance())
    }
    pub fn clear_fingerprint(&mut self) {
        self.fingerprint.clear();
    }

    pub fn has_fingerprint(&self) -> bool {
        self.fingerprint.is_some()
    }

    // Param is passed by value, moved
    pub fn set_fingerprint(&mut self, v: Fingerprint) {
        self.fingerprint = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_fingerprint(&mut self) -> &mut Fingerprint {
        if self.fingerprint.is_none() {
            self.fingerprint.set_default();
        }
        self.fingerprint.as_mut().unwrap()
    }

    // Take field
    pub fn take_fingerprint(&mut self) -> Fingerprint {
        self.fingerprint.take().unwrap_or_else(|| Fingerprint::new())
    }
}

impl ::protobuf::Message for Basis {
    fn is_initialized(&self) -> bool {
        for v in &self.fingerprint {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.resource_url)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.fingerprint)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.resource_url.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.resource_url);
        }
        if let Some(ref v) = self.fingerprint.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.resource_url.is_empty() {
            os.write_string(1, &self.resource_url)?;
        }
        if let Some(ref v) = self.fingerprint.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Basis {
        Basis::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "resource_url",
                    |m: &Basis| { &m.resource_url },
                    |m: &mut Basis| { &mut m.resource_url },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Fingerprint>>(
                    "fingerprint",
                    |m: &Basis| { &m.fingerprint },
                    |m: &mut Basis| { &mut m.fingerprint },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Basis>(
                    "Basis",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Basis {
        static mut instance: ::protobuf::lazy::Lazy<Basis> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Basis,
        };
        unsafe {
            instance.get(Basis::new)
        }
    }
}

impl ::protobuf::Clear for Basis {
    fn clear(&mut self) {
        self.resource_url.clear();
        self.fingerprint.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Basis {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Basis {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Details {
    // message fields
    pub derived_image: ::protobuf::SingularPtrField<Derived>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Details {
    fn default() -> &'a Details {
        <Details as ::protobuf::Message>::default_instance()
    }
}

impl Details {
    pub fn new() -> Details {
        ::std::default::Default::default()
    }

    // .grafeas.v1beta1.image.Derived derived_image = 1;


    pub fn get_derived_image(&self) -> &Derived {
        self.derived_image.as_ref().unwrap_or_else(|| Derived::default_instance())
    }
    pub fn clear_derived_image(&mut self) {
        self.derived_image.clear();
    }

    pub fn has_derived_image(&self) -> bool {
        self.derived_image.is_some()
    }

    // Param is passed by value, moved
    pub fn set_derived_image(&mut self, v: Derived) {
        self.derived_image = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_derived_image(&mut self) -> &mut Derived {
        if self.derived_image.is_none() {
            self.derived_image.set_default();
        }
        self.derived_image.as_mut().unwrap()
    }

    // Take field
    pub fn take_derived_image(&mut self) -> Derived {
        self.derived_image.take().unwrap_or_else(|| Derived::new())
    }
}

impl ::protobuf::Message for Details {
    fn is_initialized(&self) -> bool {
        for v in &self.derived_image {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.derived_image)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.derived_image.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.derived_image.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Details {
        Details::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Derived>>(
                    "derived_image",
                    |m: &Details| { &m.derived_image },
                    |m: &mut Details| { &mut m.derived_image },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Details>(
                    "Details",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Details {
        static mut instance: ::protobuf::lazy::Lazy<Details> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Details,
        };
        unsafe {
            instance.get(Details::new)
        }
    }
}

impl ::protobuf::Clear for Details {
    fn clear(&mut self) {
        self.derived_image.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Details {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Details {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Derived {
    // message fields
    pub fingerprint: ::protobuf::SingularPtrField<Fingerprint>,
    pub distance: i32,
    pub layer_info: ::protobuf::RepeatedField<Layer>,
    pub base_resource_url: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Derived {
    fn default() -> &'a Derived {
        <Derived as ::protobuf::Message>::default_instance()
    }
}

impl Derived {
    pub fn new() -> Derived {
        ::std::default::Default::default()
    }

    // .grafeas.v1beta1.image.Fingerprint fingerprint = 1;


    pub fn get_fingerprint(&self) -> &Fingerprint {
        self.fingerprint.as_ref().unwrap_or_else(|| Fingerprint::default_instance())
    }
    pub fn clear_fingerprint(&mut self) {
        self.fingerprint.clear();
    }

    pub fn has_fingerprint(&self) -> bool {
        self.fingerprint.is_some()
    }

    // Param is passed by value, moved
    pub fn set_fingerprint(&mut self, v: Fingerprint) {
        self.fingerprint = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_fingerprint(&mut self) -> &mut Fingerprint {
        if self.fingerprint.is_none() {
            self.fingerprint.set_default();
        }
        self.fingerprint.as_mut().unwrap()
    }

    // Take field
    pub fn take_fingerprint(&mut self) -> Fingerprint {
        self.fingerprint.take().unwrap_or_else(|| Fingerprint::new())
    }

    // int32 distance = 2;


    pub fn get_distance(&self) -> i32 {
        self.distance
    }
    pub fn clear_distance(&mut self) {
        self.distance = 0;
    }

    // Param is passed by value, moved
    pub fn set_distance(&mut self, v: i32) {
        self.distance = v;
    }

    // repeated .grafeas.v1beta1.image.Layer layer_info = 3;


    pub fn get_layer_info(&self) -> &[Layer] {
        &self.layer_info
    }
    pub fn clear_layer_info(&mut self) {
        self.layer_info.clear();
    }

    // Param is passed by value, moved
    pub fn set_layer_info(&mut self, v: ::protobuf::RepeatedField<Layer>) {
        self.layer_info = v;
    }

    // Mutable pointer to the field.
    pub fn mut_layer_info(&mut self) -> &mut ::protobuf::RepeatedField<Layer> {
        &mut self.layer_info
    }

    // Take field
    pub fn take_layer_info(&mut self) -> ::protobuf::RepeatedField<Layer> {
        ::std::mem::replace(&mut self.layer_info, ::protobuf::RepeatedField::new())
    }

    // string base_resource_url = 4;


    pub fn get_base_resource_url(&self) -> &str {
        &self.base_resource_url
    }
    pub fn clear_base_resource_url(&mut self) {
        self.base_resource_url.clear();
    }

    // Param is passed by value, moved
    pub fn set_base_resource_url(&mut self, v: ::std::string::String) {
        self.base_resource_url = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_base_resource_url(&mut self) -> &mut ::std::string::String {
        &mut self.base_resource_url
    }

    // Take field
    pub fn take_base_resource_url(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.base_resource_url, ::std::string::String::new())
    }
}

impl ::protobuf::Message for Derived {
    fn is_initialized(&self) -> bool {
        for v in &self.fingerprint {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.layer_info {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.fingerprint)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.distance = tmp;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.layer_info)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.base_resource_url)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.fingerprint.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.distance != 0 {
            my_size += ::protobuf::rt::value_size(2, self.distance, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.layer_info {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if !self.base_resource_url.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.base_resource_url);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.fingerprint.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.distance != 0 {
            os.write_int32(2, self.distance)?;
        }
        for v in &self.layer_info {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if !self.base_resource_url.is_empty() {
            os.write_string(4, &self.base_resource_url)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Derived {
        Derived::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Fingerprint>>(
                    "fingerprint",
                    |m: &Derived| { &m.fingerprint },
                    |m: &mut Derived| { &mut m.fingerprint },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "distance",
                    |m: &Derived| { &m.distance },
                    |m: &mut Derived| { &mut m.distance },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Layer>>(
                    "layer_info",
                    |m: &Derived| { &m.layer_info },
                    |m: &mut Derived| { &mut m.layer_info },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "base_resource_url",
                    |m: &Derived| { &m.base_resource_url },
                    |m: &mut Derived| { &mut m.base_resource_url },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Derived>(
                    "Derived",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Derived {
        static mut instance: ::protobuf::lazy::Lazy<Derived> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Derived,
        };
        unsafe {
            instance.get(Derived::new)
        }
    }
}

impl ::protobuf::Clear for Derived {
    fn clear(&mut self) {
        self.fingerprint.clear();
        self.distance = 0;
        self.layer_info.clear();
        self.base_resource_url.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Derived {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Derived {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x19proto/v1beta1/image.proto\x12\x15grafeas.v1beta1.image\"\xde\x02\n\
    \x05Layer\x12D\n\tdirective\x18\x01\x20\x01(\x0e2&.grafeas.v1beta1.image\
    .Layer.DirectiveR\tdirective\x12\x1c\n\targuments\x18\x02\x20\x01(\tR\ta\
    rguments\"\xf0\x01\n\tDirective\x12\x19\n\x15DIRECTIVE_UNSPECIFIED\x10\0\
    \x12\x0e\n\nMAINTAINER\x10\x01\x12\x07\n\x03RUN\x10\x02\x12\x07\n\x03CMD\
    \x10\x03\x12\t\n\x05LABEL\x10\x04\x12\n\n\x06EXPOSE\x10\x05\x12\x07\n\
    \x03ENV\x10\x06\x12\x07\n\x03ADD\x10\x07\x12\x08\n\x04COPY\x10\x08\x12\
    \x0e\n\nENTRYPOINT\x10\t\x12\n\n\x06VOLUME\x10\n\x12\x08\n\x04USER\x10\
    \x0b\x12\x0b\n\x07WORKDIR\x10\x0c\x12\x07\n\x03ARG\x10\r\x12\x0b\n\x07ON\
    BUILD\x10\x0e\x12\x0e\n\nSTOPSIGNAL\x10\x0f\x12\x0f\n\x0bHEALTHCHECK\x10\
    \x10\x12\t\n\x05SHELL\x10\x11\"X\n\x0bFingerprint\x12\x17\n\x07v1_name\
    \x18\x01\x20\x01(\tR\x06v1Name\x12\x17\n\x07v2_blob\x18\x02\x20\x03(\tR\
    \x06v2Blob\x12\x17\n\x07v2_name\x18\x03\x20\x01(\tR\x06v2Name\"p\n\x05Ba\
    sis\x12!\n\x0cresource_url\x18\x01\x20\x01(\tR\x0bresourceUrl\x12D\n\x0b\
    fingerprint\x18\x02\x20\x01(\x0b2\".grafeas.v1beta1.image.FingerprintR\
    \x0bfingerprint\"N\n\x07Details\x12C\n\rderived_image\x18\x01\x20\x01(\
    \x0b2\x1e.grafeas.v1beta1.image.DerivedR\x0cderivedImage\"\xd4\x01\n\x07\
    Derived\x12D\n\x0bfingerprint\x18\x01\x20\x01(\x0b2\".grafeas.v1beta1.im\
    age.FingerprintR\x0bfingerprint\x12\x1a\n\x08distance\x18\x02\x20\x01(\
    \x05R\x08distance\x12;\n\nlayer_info\x18\x03\x20\x03(\x0b2\x1c.grafeas.v\
    1beta1.image.LayerR\tlayerInfo\x12*\n\x11base_resource_url\x18\x04\x20\
    \x01(\tR\x0fbaseResourceUrlB[\n\x18io.grafeas.v1beta1.imageP\x01Z7github\
    .com/grafeas/grafeas/proto/v1beta1/image_go_proto\xa2\x02\x03GRAJ\xc0)\n\
    \x07\x12\x05\x0e\0\x90\x01\x01\n\xda\x04\n\x01\x0c\x12\x03\x0e\0\x122\
    \xcf\x04\x20Copyright\x202018\x20The\x20Grafeas\x20Authors.\x20All\x20ri\
    ghts\x20reserved.\n\n\x20Licensed\x20under\x20the\x20Apache\x20License,\
    \x20Version\x202.0\x20(the\x20\"License\");\n\x20you\x20may\x20not\x20us\
    e\x20this\x20file\x20except\x20in\x20compliance\x20with\x20the\x20Licens\
    e.\n\x20You\x20may\x20obtain\x20a\x20copy\x20of\x20the\x20License\x20at\
    \n\n\x20\x20\x20\x20http://www.apache.org/licenses/LICENSE-2.0\n\n\x20Un\
    less\x20required\x20by\x20applicable\x20law\x20or\x20agreed\x20to\x20in\
    \x20writing,\x20software\n\x20distributed\x20under\x20the\x20License\x20\
    is\x20distributed\x20on\x20an\x20\"AS\x20IS\"\x20BASIS,\n\x20WITHOUT\x20\
    WARRANTIES\x20OR\x20CONDITIONS\x20OF\x20ANY\x20KIND,\x20either\x20expres\
    s\x20or\x20implied.\n\x20See\x20the\x20License\x20for\x20the\x20specific\
    \x20language\x20governing\x20permissions\x20and\n\x20limitations\x20unde\
    r\x20the\x20License.\n\n\x08\n\x01\x02\x12\x03\x10\0\x1e\n\x08\n\x01\x08\
    \x12\x03\x12\0N\n\t\n\x02\x08\x0b\x12\x03\x12\0N\n\x08\n\x01\x08\x12\x03\
    \x13\0\"\n\t\n\x02\x08\n\x12\x03\x13\0\"\n\x08\n\x01\x08\x12\x03\x14\01\
    \n\t\n\x02\x08\x01\x12\x03\x14\01\n\x08\n\x01\x08\x12\x03\x15\0!\n\t\n\
    \x02\x08$\x12\x03\x15\0!\nI\n\x02\x04\0\x12\x04\x18\0W\x01\x1a=\x20Layer\
    \x20holds\x20metadata\x20specific\x20to\x20a\x20layer\x20of\x20a\x20Dock\
    er\x20image.\n\n\n\n\x03\x04\0\x01\x12\x03\x18\x08\r\n-\n\x04\x04\0\x04\
    \0\x12\x04\x1a\x02P\x03\x1a\x1f\x20Instructions\x20from\x20Dockerfile.\n\
    \n\x0c\n\x05\x04\0\x04\0\x01\x12\x03\x1a\x07\x10\nA\n\x06\x04\0\x04\0\
    \x02\0\x12\x03\x1c\x04\x1e\x1a2\x20Default\x20value\x20for\x20unsupporte\
    d/missing\x20directive.\n\n\x0e\n\x07\x04\0\x04\0\x02\0\x01\x12\x03\x1c\
    \x04\x19\n\x0e\n\x07\x04\0\x04\0\x02\0\x02\x12\x03\x1c\x1c\x1d\nB\n\x06\
    \x04\0\x04\0\x02\x01\x12\x03\x1f\x04\x13\x1a3\x20https://docs.docker.com\
    /engine/reference/builder/\n\n\x0e\n\x07\x04\0\x04\0\x02\x01\x01\x12\x03\
    \x1f\x04\x0e\n\x0e\n\x07\x04\0\x04\0\x02\x01\x02\x12\x03\x1f\x11\x12\nB\
    \n\x06\x04\0\x04\0\x02\x02\x12\x03\"\x04\x0c\x1a3\x20https://docs.docker\
    .com/engine/reference/builder/\n\n\x0e\n\x07\x04\0\x04\0\x02\x02\x01\x12\
    \x03\"\x04\x07\n\x0e\n\x07\x04\0\x04\0\x02\x02\x02\x12\x03\"\n\x0b\nB\n\
    \x06\x04\0\x04\0\x02\x03\x12\x03%\x04\x0c\x1a3\x20https://docs.docker.co\
    m/engine/reference/builder/\n\n\x0e\n\x07\x04\0\x04\0\x02\x03\x01\x12\
    \x03%\x04\x07\n\x0e\n\x07\x04\0\x04\0\x02\x03\x02\x12\x03%\n\x0b\nB\n\
    \x06\x04\0\x04\0\x02\x04\x12\x03(\x04\x0e\x1a3\x20https://docs.docker.co\
    m/engine/reference/builder/\n\n\x0e\n\x07\x04\0\x04\0\x02\x04\x01\x12\
    \x03(\x04\t\n\x0e\n\x07\x04\0\x04\0\x02\x04\x02\x12\x03(\x0c\r\nB\n\x06\
    \x04\0\x04\0\x02\x05\x12\x03+\x04\x0f\x1a3\x20https://docs.docker.com/en\
    gine/reference/builder/\n\n\x0e\n\x07\x04\0\x04\0\x02\x05\x01\x12\x03+\
    \x04\n\n\x0e\n\x07\x04\0\x04\0\x02\x05\x02\x12\x03+\r\x0e\nB\n\x06\x04\0\
    \x04\0\x02\x06\x12\x03.\x04\x0c\x1a3\x20https://docs.docker.com/engine/r\
    eference/builder/\n\n\x0e\n\x07\x04\0\x04\0\x02\x06\x01\x12\x03.\x04\x07\
    \n\x0e\n\x07\x04\0\x04\0\x02\x06\x02\x12\x03.\n\x0b\nB\n\x06\x04\0\x04\0\
    \x02\x07\x12\x031\x04\x0c\x1a3\x20https://docs.docker.com/engine/referen\
    ce/builder/\n\n\x0e\n\x07\x04\0\x04\0\x02\x07\x01\x12\x031\x04\x07\n\x0e\
    \n\x07\x04\0\x04\0\x02\x07\x02\x12\x031\n\x0b\nB\n\x06\x04\0\x04\0\x02\
    \x08\x12\x034\x04\r\x1a3\x20https://docs.docker.com/engine/reference/bui\
    lder/\n\n\x0e\n\x07\x04\0\x04\0\x02\x08\x01\x12\x034\x04\x08\n\x0e\n\x07\
    \x04\0\x04\0\x02\x08\x02\x12\x034\x0b\x0c\nB\n\x06\x04\0\x04\0\x02\t\x12\
    \x037\x04\x13\x1a3\x20https://docs.docker.com/engine/reference/builder/\
    \n\n\x0e\n\x07\x04\0\x04\0\x02\t\x01\x12\x037\x04\x0e\n\x0e\n\x07\x04\0\
    \x04\0\x02\t\x02\x12\x037\x11\x12\nB\n\x06\x04\0\x04\0\x02\n\x12\x03:\
    \x04\x10\x1a3\x20https://docs.docker.com/engine/reference/builder/\n\n\
    \x0e\n\x07\x04\0\x04\0\x02\n\x01\x12\x03:\x04\n\n\x0e\n\x07\x04\0\x04\0\
    \x02\n\x02\x12\x03:\r\x0f\nB\n\x06\x04\0\x04\0\x02\x0b\x12\x03=\x04\x0e\
    \x1a3\x20https://docs.docker.com/engine/reference/builder/\n\n\x0e\n\x07\
    \x04\0\x04\0\x02\x0b\x01\x12\x03=\x04\x08\n\x0e\n\x07\x04\0\x04\0\x02\
    \x0b\x02\x12\x03=\x0b\r\nB\n\x06\x04\0\x04\0\x02\x0c\x12\x03@\x04\x11\
    \x1a3\x20https://docs.docker.com/engine/reference/builder/\n\n\x0e\n\x07\
    \x04\0\x04\0\x02\x0c\x01\x12\x03@\x04\x0b\n\x0e\n\x07\x04\0\x04\0\x02\
    \x0c\x02\x12\x03@\x0e\x10\nB\n\x06\x04\0\x04\0\x02\r\x12\x03C\x04\r\x1a3\
    \x20https://docs.docker.com/engine/reference/builder/\n\n\x0e\n\x07\x04\
    \0\x04\0\x02\r\x01\x12\x03C\x04\x07\n\x0e\n\x07\x04\0\x04\0\x02\r\x02\
    \x12\x03C\n\x0c\nB\n\x06\x04\0\x04\0\x02\x0e\x12\x03F\x04\x11\x1a3\x20ht\
    tps://docs.docker.com/engine/reference/builder/\n\n\x0e\n\x07\x04\0\x04\
    \0\x02\x0e\x01\x12\x03F\x04\x0b\n\x0e\n\x07\x04\0\x04\0\x02\x0e\x02\x12\
    \x03F\x0e\x10\nB\n\x06\x04\0\x04\0\x02\x0f\x12\x03I\x04\x14\x1a3\x20http\
    s://docs.docker.com/engine/reference/builder/\n\n\x0e\n\x07\x04\0\x04\0\
    \x02\x0f\x01\x12\x03I\x04\x0e\n\x0e\n\x07\x04\0\x04\0\x02\x0f\x02\x12\
    \x03I\x11\x13\nB\n\x06\x04\0\x04\0\x02\x10\x12\x03L\x04\x15\x1a3\x20http\
    s://docs.docker.com/engine/reference/builder/\n\n\x0e\n\x07\x04\0\x04\0\
    \x02\x10\x01\x12\x03L\x04\x0f\n\x0e\n\x07\x04\0\x04\0\x02\x10\x02\x12\
    \x03L\x12\x14\nB\n\x06\x04\0\x04\0\x02\x11\x12\x03O\x04\x0f\x1a3\x20http\
    s://docs.docker.com/engine/reference/builder/\n\n\x0e\n\x07\x04\0\x04\0\
    \x02\x11\x01\x12\x03O\x04\t\n\x0e\n\x07\x04\0\x04\0\x02\x11\x02\x12\x03O\
    \x0c\x0e\nY\n\x04\x04\0\x02\0\x12\x03S\x02\x1a\x1aL\x20Required.\x20The\
    \x20recovered\x20Dockerfile\x20directive\x20used\x20to\x20construct\x20t\
    his\x20layer.\n\n\r\n\x05\x04\0\x02\0\x04\x12\x04S\x02P\x03\n\x0c\n\x05\
    \x04\0\x02\0\x06\x12\x03S\x02\x0b\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03S\
    \x0c\x15\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03S\x18\x19\nC\n\x04\x04\0\x02\
    \x01\x12\x03V\x02\x17\x1a6\x20The\x20recovered\x20arguments\x20to\x20the\
    \x20Dockerfile\x20directive.\n\n\r\n\x05\x04\0\x02\x01\x04\x12\x04V\x02S\
    \x1a\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03V\x02\x08\n\x0c\n\x05\x04\0\
    \x02\x01\x01\x12\x03V\t\x12\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03V\x15\
    \x16\nN\n\x02\x04\x01\x12\x04Z\0g\x01\x1aB\x20A\x20set\x20of\x20properti\
    es\x20that\x20uniquely\x20identify\x20a\x20given\x20Docker\x20image.\n\n\
    \n\n\x03\x04\x01\x01\x12\x03Z\x08\x13\nb\n\x04\x04\x01\x02\0\x12\x03]\
    \x02\x15\x1aU\x20Required.\x20The\x20layer\x20ID\x20of\x20the\x20final\
    \x20layer\x20in\x20the\x20Docker\x20image's\x20v1\n\x20representation.\n\
    \n\r\n\x05\x04\x01\x02\0\x04\x12\x04]\x02Z\x15\n\x0c\n\x05\x04\x01\x02\0\
    \x05\x12\x03]\x02\x08\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03]\t\x10\n\x0c\
    \n\x05\x04\x01\x02\0\x03\x12\x03]\x13\x14\nS\n\x04\x04\x01\x02\x01\x12\
    \x03`\x02\x1e\x1aF\x20Required.\x20The\x20ordered\x20list\x20of\x20v2\
    \x20blobs\x20that\x20represent\x20a\x20given\x20image.\n\n\x0c\n\x05\x04\
    \x01\x02\x01\x04\x12\x03`\x02\n\n\x0c\n\x05\x04\x01\x02\x01\x05\x12\x03`\
    \x0b\x11\n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x03`\x12\x19\n\x0c\n\x05\
    \x04\x01\x02\x01\x03\x12\x03`\x1c\x1d\n\xc6\x01\n\x04\x04\x01\x02\x02\
    \x12\x03f\x02\x15\x1a\xb8\x01\x20Output\x20only.\x20The\x20name\x20of\
    \x20the\x20image's\x20v2\x20blobs\x20computed\x20via:\n\x20\x20\x20[bott\
    om]\x20:=\x20v2_blob[bottom]\n\x20\x20\x20[N]\x20:=\x20sha256(v2_blob[N]\
    \x20+\x20\"\x20\"\x20+\x20v2_name[N+1])\n\x20Only\x20the\x20name\x20of\
    \x20the\x20final\x20blob\x20is\x20kept.\n\n\r\n\x05\x04\x01\x02\x02\x04\
    \x12\x04f\x02`\x1e\n\x0c\n\x05\x04\x01\x02\x02\x05\x12\x03f\x02\x08\n\
    \x0c\n\x05\x04\x01\x02\x02\x01\x12\x03f\t\x10\n\x0c\n\x05\x04\x01\x02\
    \x02\x03\x12\x03f\x13\x14\n\xfe\x01\n\x02\x04\x02\x12\x04n\0u\x01\x1a\
    \xf1\x01\x20Basis\x20describes\x20the\x20base\x20image\x20portion\x20(No\
    te)\x20of\x20the\x20DockerImage\n\x20relationship.\x20Linked\x20occurren\
    ces\x20are\x20derived\x20from\x20this\x20or\x20an\n\x20equivalent\x20ima\
    ge\x20via:\n\x20\x20\x20FROM\x20<Basis.resource_url>\n\x20Or\x20an\x20eq\
    uivalent\x20reference,\x20e.g.\x20a\x20tag\x20of\x20the\x20resource_url.\
    \n\n\n\n\x03\x04\x02\x01\x12\x03n\x08\r\n~\n\x04\x04\x02\x02\0\x12\x03q\
    \x02\x1a\x1aq\x20Required.\x20Immutable.\x20The\x20resource_url\x20for\
    \x20the\x20resource\x20representing\x20the\n\x20basis\x20of\x20associate\
    d\x20occurrence\x20images.\n\n\r\n\x05\x04\x02\x02\0\x04\x12\x04q\x02n\
    \x0f\n\x0c\n\x05\x04\x02\x02\0\x05\x12\x03q\x02\x08\n\x0c\n\x05\x04\x02\
    \x02\0\x01\x12\x03q\t\x15\n\x0c\n\x05\x04\x02\x02\0\x03\x12\x03q\x18\x19\
    \nF\n\x04\x04\x02\x02\x01\x12\x03t\x02\x1e\x1a9\x20Required.\x20Immutabl\
    e.\x20The\x20fingerprint\x20of\x20the\x20base\x20image.\n\n\r\n\x05\x04\
    \x02\x02\x01\x04\x12\x04t\x02q\x1a\n\x0c\n\x05\x04\x02\x02\x01\x06\x12\
    \x03t\x02\r\n\x0c\n\x05\x04\x02\x02\x01\x01\x12\x03t\x0e\x19\n\x0c\n\x05\
    \x04\x02\x02\x01\x03\x12\x03t\x1c\x1d\n-\n\x02\x04\x03\x12\x04x\0{\x01\
    \x1a!\x20Details\x20of\x20an\x20image\x20occurrence.\n\n\n\n\x03\x04\x03\
    \x01\x12\x03x\x08\x0f\nP\n\x04\x04\x03\x02\0\x12\x03z\x02\x1c\x1aC\x20Re\
    quired.\x20Immutable.\x20The\x20child\x20image\x20derived\x20from\x20the\
    \x20base\x20image.\n\n\r\n\x05\x04\x03\x02\0\x04\x12\x04z\x02x\x11\n\x0c\
    \n\x05\x04\x03\x02\0\x06\x12\x03z\x02\t\n\x0c\n\x05\x04\x03\x02\0\x01\
    \x12\x03z\n\x17\n\x0c\n\x05\x04\x03\x02\0\x03\x12\x03z\x1a\x1b\n\xcb\x01\
    \n\x02\x04\x04\x12\x06\x80\x01\0\x90\x01\x01\x1a\xbc\x01\x20Derived\x20d\
    escribes\x20the\x20derived\x20image\x20portion\x20(Occurrence)\x20of\x20\
    the\x20DockerImage\n\x20relationship.\x20This\x20image\x20would\x20be\
    \x20produced\x20from\x20a\x20Dockerfile\x20with\x20FROM\n\x20<DockerImag\
    e.Basis\x20in\x20attached\x20Note>.\n\n\x0b\n\x03\x04\x04\x01\x12\x04\
    \x80\x01\x08\x0f\n?\n\x04\x04\x04\x02\0\x12\x04\x82\x01\x02\x1e\x1a1\x20\
    Required.\x20The\x20fingerprint\x20of\x20the\x20derived\x20image.\n\n\
    \x0f\n\x05\x04\x04\x02\0\x04\x12\x06\x82\x01\x02\x80\x01\x11\n\r\n\x05\
    \x04\x04\x02\0\x06\x12\x04\x82\x01\x02\r\n\r\n\x05\x04\x04\x02\0\x01\x12\
    \x04\x82\x01\x0e\x19\n\r\n\x05\x04\x04\x02\0\x03\x12\x04\x82\x01\x1c\x1d\
    \no\n\x04\x04\x04\x02\x01\x12\x04\x86\x01\x02\x15\x1aa\x20Output\x20only\
    .\x20The\x20number\x20of\x20layers\x20by\x20which\x20this\x20image\x20di\
    ffers\x20from\x20the\n\x20associated\x20image\x20basis.\n\n\x0f\n\x05\
    \x04\x04\x02\x01\x04\x12\x06\x86\x01\x02\x82\x01\x1e\n\r\n\x05\x04\x04\
    \x02\x01\x05\x12\x04\x86\x01\x02\x07\n\r\n\x05\x04\x04\x02\x01\x01\x12\
    \x04\x86\x01\x08\x10\n\r\n\x05\x04\x04\x02\x01\x03\x12\x04\x86\x01\x13\
    \x14\n\xd2\x01\n\x04\x04\x04\x02\x02\x12\x04\x8b\x01\x02\x20\x1a\xc3\x01\
    \x20This\x20contains\x20layer-specific\x20metadata,\x20if\x20populated\
    \x20it\x20has\x20length\n\x20\"distance\"\x20and\x20is\x20ordered\x20wit\
    h\x20[distance]\x20being\x20the\x20layer\x20immediately\n\x20following\
    \x20the\x20base\x20image\x20and\x20[1]\x20being\x20the\x20final\x20layer\
    .\n\n\r\n\x05\x04\x04\x02\x02\x04\x12\x04\x8b\x01\x02\n\n\r\n\x05\x04\
    \x04\x02\x02\x06\x12\x04\x8b\x01\x0b\x10\n\r\n\x05\x04\x04\x02\x02\x01\
    \x12\x04\x8b\x01\x11\x1b\n\r\n\x05\x04\x04\x02\x02\x03\x12\x04\x8b\x01\
    \x1e\x1f\n`\n\x04\x04\x04\x02\x03\x12\x04\x8f\x01\x02\x1f\x1aR\x20Output\
    \x20only.\x20This\x20contains\x20the\x20base\x20image\x20URL\x20for\x20t\
    he\x20derived\x20image\n\x20occurrence.\n\n\x0f\n\x05\x04\x04\x02\x03\
    \x04\x12\x06\x8f\x01\x02\x8b\x01\x20\n\r\n\x05\x04\x04\x02\x03\x05\x12\
    \x04\x8f\x01\x02\x08\n\r\n\x05\x04\x04\x02\x03\x01\x12\x04\x8f\x01\t\x1a\
    \n\r\n\x05\x04\x04\x02\x03\x03\x12\x04\x8f\x01\x1d\x1eb\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
