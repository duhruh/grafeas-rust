// This file is generated by rust-protobuf 2.6.0. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq,Clone,Default)]
pub struct Distribution {
    // message fields
    pub cpe_uri: ::std::string::String,
    pub architecture: Architecture,
    pub latest_version: ::protobuf::SingularPtrField<Version>,
    pub maintainer: ::std::string::String,
    pub url: ::std::string::String,
    pub description: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Distribution {
    fn default() -> &'a Distribution {
        <Distribution as ::protobuf::Message>::default_instance()
    }
}

impl Distribution {
    pub fn new() -> Distribution {
        ::std::default::Default::default()
    }

    // string cpe_uri = 1;


    pub fn get_cpe_uri(&self) -> &str {
        &self.cpe_uri
    }
    pub fn clear_cpe_uri(&mut self) {
        self.cpe_uri.clear();
    }

    // Param is passed by value, moved
    pub fn set_cpe_uri(&mut self, v: ::std::string::String) {
        self.cpe_uri = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cpe_uri(&mut self) -> &mut ::std::string::String {
        &mut self.cpe_uri
    }

    // Take field
    pub fn take_cpe_uri(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cpe_uri, ::std::string::String::new())
    }

    // .grafeas.v1beta1.package.Architecture architecture = 2;


    pub fn get_architecture(&self) -> Architecture {
        self.architecture
    }
    pub fn clear_architecture(&mut self) {
        self.architecture = Architecture::ARCHITECTURE_UNSPECIFIED;
    }

    // Param is passed by value, moved
    pub fn set_architecture(&mut self, v: Architecture) {
        self.architecture = v;
    }

    // .grafeas.v1beta1.package.Version latest_version = 3;


    pub fn get_latest_version(&self) -> &Version {
        self.latest_version.as_ref().unwrap_or_else(|| Version::default_instance())
    }
    pub fn clear_latest_version(&mut self) {
        self.latest_version.clear();
    }

    pub fn has_latest_version(&self) -> bool {
        self.latest_version.is_some()
    }

    // Param is passed by value, moved
    pub fn set_latest_version(&mut self, v: Version) {
        self.latest_version = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_latest_version(&mut self) -> &mut Version {
        if self.latest_version.is_none() {
            self.latest_version.set_default();
        }
        self.latest_version.as_mut().unwrap()
    }

    // Take field
    pub fn take_latest_version(&mut self) -> Version {
        self.latest_version.take().unwrap_or_else(|| Version::new())
    }

    // string maintainer = 4;


    pub fn get_maintainer(&self) -> &str {
        &self.maintainer
    }
    pub fn clear_maintainer(&mut self) {
        self.maintainer.clear();
    }

    // Param is passed by value, moved
    pub fn set_maintainer(&mut self, v: ::std::string::String) {
        self.maintainer = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_maintainer(&mut self) -> &mut ::std::string::String {
        &mut self.maintainer
    }

    // Take field
    pub fn take_maintainer(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.maintainer, ::std::string::String::new())
    }

    // string url = 5;


    pub fn get_url(&self) -> &str {
        &self.url
    }
    pub fn clear_url(&mut self) {
        self.url.clear();
    }

    // Param is passed by value, moved
    pub fn set_url(&mut self, v: ::std::string::String) {
        self.url = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_url(&mut self) -> &mut ::std::string::String {
        &mut self.url
    }

    // Take field
    pub fn take_url(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.url, ::std::string::String::new())
    }

    // string description = 6;


    pub fn get_description(&self) -> &str {
        &self.description
    }
    pub fn clear_description(&mut self) {
        self.description.clear();
    }

    // Param is passed by value, moved
    pub fn set_description(&mut self, v: ::std::string::String) {
        self.description = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_description(&mut self) -> &mut ::std::string::String {
        &mut self.description
    }

    // Take field
    pub fn take_description(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.description, ::std::string::String::new())
    }
}

impl ::protobuf::Message for Distribution {
    fn is_initialized(&self) -> bool {
        for v in &self.latest_version {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.cpe_uri)?;
                },
                2 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.architecture, 2, &mut self.unknown_fields)?
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.latest_version)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.maintainer)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.url)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.description)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.cpe_uri.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.cpe_uri);
        }
        if self.architecture != Architecture::ARCHITECTURE_UNSPECIFIED {
            my_size += ::protobuf::rt::enum_size(2, self.architecture);
        }
        if let Some(ref v) = self.latest_version.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.maintainer.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.maintainer);
        }
        if !self.url.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.url);
        }
        if !self.description.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.description);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.cpe_uri.is_empty() {
            os.write_string(1, &self.cpe_uri)?;
        }
        if self.architecture != Architecture::ARCHITECTURE_UNSPECIFIED {
            os.write_enum(2, self.architecture.value())?;
        }
        if let Some(ref v) = self.latest_version.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.maintainer.is_empty() {
            os.write_string(4, &self.maintainer)?;
        }
        if !self.url.is_empty() {
            os.write_string(5, &self.url)?;
        }
        if !self.description.is_empty() {
            os.write_string(6, &self.description)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Distribution {
        Distribution::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "cpe_uri",
                    |m: &Distribution| { &m.cpe_uri },
                    |m: &mut Distribution| { &mut m.cpe_uri },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<Architecture>>(
                    "architecture",
                    |m: &Distribution| { &m.architecture },
                    |m: &mut Distribution| { &mut m.architecture },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Version>>(
                    "latest_version",
                    |m: &Distribution| { &m.latest_version },
                    |m: &mut Distribution| { &mut m.latest_version },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "maintainer",
                    |m: &Distribution| { &m.maintainer },
                    |m: &mut Distribution| { &mut m.maintainer },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "url",
                    |m: &Distribution| { &m.url },
                    |m: &mut Distribution| { &mut m.url },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "description",
                    |m: &Distribution| { &m.description },
                    |m: &mut Distribution| { &mut m.description },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Distribution>(
                    "Distribution",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Distribution {
        static mut instance: ::protobuf::lazy::Lazy<Distribution> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Distribution,
        };
        unsafe {
            instance.get(Distribution::new)
        }
    }
}

impl ::protobuf::Clear for Distribution {
    fn clear(&mut self) {
        self.cpe_uri.clear();
        self.architecture = Architecture::ARCHITECTURE_UNSPECIFIED;
        self.latest_version.clear();
        self.maintainer.clear();
        self.url.clear();
        self.description.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Distribution {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Distribution {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Location {
    // message fields
    pub cpe_uri: ::std::string::String,
    pub version: ::protobuf::SingularPtrField<Version>,
    pub path: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Location {
    fn default() -> &'a Location {
        <Location as ::protobuf::Message>::default_instance()
    }
}

impl Location {
    pub fn new() -> Location {
        ::std::default::Default::default()
    }

    // string cpe_uri = 1;


    pub fn get_cpe_uri(&self) -> &str {
        &self.cpe_uri
    }
    pub fn clear_cpe_uri(&mut self) {
        self.cpe_uri.clear();
    }

    // Param is passed by value, moved
    pub fn set_cpe_uri(&mut self, v: ::std::string::String) {
        self.cpe_uri = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cpe_uri(&mut self) -> &mut ::std::string::String {
        &mut self.cpe_uri
    }

    // Take field
    pub fn take_cpe_uri(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cpe_uri, ::std::string::String::new())
    }

    // .grafeas.v1beta1.package.Version version = 2;


    pub fn get_version(&self) -> &Version {
        self.version.as_ref().unwrap_or_else(|| Version::default_instance())
    }
    pub fn clear_version(&mut self) {
        self.version.clear();
    }

    pub fn has_version(&self) -> bool {
        self.version.is_some()
    }

    // Param is passed by value, moved
    pub fn set_version(&mut self, v: Version) {
        self.version = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_version(&mut self) -> &mut Version {
        if self.version.is_none() {
            self.version.set_default();
        }
        self.version.as_mut().unwrap()
    }

    // Take field
    pub fn take_version(&mut self) -> Version {
        self.version.take().unwrap_or_else(|| Version::new())
    }

    // string path = 3;


    pub fn get_path(&self) -> &str {
        &self.path
    }
    pub fn clear_path(&mut self) {
        self.path.clear();
    }

    // Param is passed by value, moved
    pub fn set_path(&mut self, v: ::std::string::String) {
        self.path = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_path(&mut self) -> &mut ::std::string::String {
        &mut self.path
    }

    // Take field
    pub fn take_path(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.path, ::std::string::String::new())
    }
}

impl ::protobuf::Message for Location {
    fn is_initialized(&self) -> bool {
        for v in &self.version {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.cpe_uri)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.version)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.path)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.cpe_uri.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.cpe_uri);
        }
        if let Some(ref v) = self.version.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.path.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.path);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.cpe_uri.is_empty() {
            os.write_string(1, &self.cpe_uri)?;
        }
        if let Some(ref v) = self.version.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.path.is_empty() {
            os.write_string(3, &self.path)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Location {
        Location::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "cpe_uri",
                    |m: &Location| { &m.cpe_uri },
                    |m: &mut Location| { &mut m.cpe_uri },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Version>>(
                    "version",
                    |m: &Location| { &m.version },
                    |m: &mut Location| { &mut m.version },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "path",
                    |m: &Location| { &m.path },
                    |m: &mut Location| { &mut m.path },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Location>(
                    "Location",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Location {
        static mut instance: ::protobuf::lazy::Lazy<Location> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Location,
        };
        unsafe {
            instance.get(Location::new)
        }
    }
}

impl ::protobuf::Clear for Location {
    fn clear(&mut self) {
        self.cpe_uri.clear();
        self.version.clear();
        self.path.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Location {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Location {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Package {
    // message fields
    pub name: ::std::string::String,
    pub distribution: ::protobuf::RepeatedField<Distribution>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Package {
    fn default() -> &'a Package {
        <Package as ::protobuf::Message>::default_instance()
    }
}

impl Package {
    pub fn new() -> Package {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // repeated .grafeas.v1beta1.package.Distribution distribution = 10;


    pub fn get_distribution(&self) -> &[Distribution] {
        &self.distribution
    }
    pub fn clear_distribution(&mut self) {
        self.distribution.clear();
    }

    // Param is passed by value, moved
    pub fn set_distribution(&mut self, v: ::protobuf::RepeatedField<Distribution>) {
        self.distribution = v;
    }

    // Mutable pointer to the field.
    pub fn mut_distribution(&mut self) -> &mut ::protobuf::RepeatedField<Distribution> {
        &mut self.distribution
    }

    // Take field
    pub fn take_distribution(&mut self) -> ::protobuf::RepeatedField<Distribution> {
        ::std::mem::replace(&mut self.distribution, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for Package {
    fn is_initialized(&self) -> bool {
        for v in &self.distribution {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                10 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.distribution)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        for value in &self.distribution {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        for v in &self.distribution {
            os.write_tag(10, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Package {
        Package::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "name",
                    |m: &Package| { &m.name },
                    |m: &mut Package| { &mut m.name },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Distribution>>(
                    "distribution",
                    |m: &Package| { &m.distribution },
                    |m: &mut Package| { &mut m.distribution },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Package>(
                    "Package",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Package {
        static mut instance: ::protobuf::lazy::Lazy<Package> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Package,
        };
        unsafe {
            instance.get(Package::new)
        }
    }
}

impl ::protobuf::Clear for Package {
    fn clear(&mut self) {
        self.name.clear();
        self.distribution.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Package {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Package {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Details {
    // message fields
    pub installation: ::protobuf::SingularPtrField<Installation>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Details {
    fn default() -> &'a Details {
        <Details as ::protobuf::Message>::default_instance()
    }
}

impl Details {
    pub fn new() -> Details {
        ::std::default::Default::default()
    }

    // .grafeas.v1beta1.package.Installation installation = 1;


    pub fn get_installation(&self) -> &Installation {
        self.installation.as_ref().unwrap_or_else(|| Installation::default_instance())
    }
    pub fn clear_installation(&mut self) {
        self.installation.clear();
    }

    pub fn has_installation(&self) -> bool {
        self.installation.is_some()
    }

    // Param is passed by value, moved
    pub fn set_installation(&mut self, v: Installation) {
        self.installation = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_installation(&mut self) -> &mut Installation {
        if self.installation.is_none() {
            self.installation.set_default();
        }
        self.installation.as_mut().unwrap()
    }

    // Take field
    pub fn take_installation(&mut self) -> Installation {
        self.installation.take().unwrap_or_else(|| Installation::new())
    }
}

impl ::protobuf::Message for Details {
    fn is_initialized(&self) -> bool {
        for v in &self.installation {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.installation)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.installation.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.installation.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Details {
        Details::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Installation>>(
                    "installation",
                    |m: &Details| { &m.installation },
                    |m: &mut Details| { &mut m.installation },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Details>(
                    "Details",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Details {
        static mut instance: ::protobuf::lazy::Lazy<Details> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Details,
        };
        unsafe {
            instance.get(Details::new)
        }
    }
}

impl ::protobuf::Clear for Details {
    fn clear(&mut self) {
        self.installation.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Details {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Details {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Installation {
    // message fields
    pub name: ::std::string::String,
    pub location: ::protobuf::RepeatedField<Location>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Installation {
    fn default() -> &'a Installation {
        <Installation as ::protobuf::Message>::default_instance()
    }
}

impl Installation {
    pub fn new() -> Installation {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // repeated .grafeas.v1beta1.package.Location location = 2;


    pub fn get_location(&self) -> &[Location] {
        &self.location
    }
    pub fn clear_location(&mut self) {
        self.location.clear();
    }

    // Param is passed by value, moved
    pub fn set_location(&mut self, v: ::protobuf::RepeatedField<Location>) {
        self.location = v;
    }

    // Mutable pointer to the field.
    pub fn mut_location(&mut self) -> &mut ::protobuf::RepeatedField<Location> {
        &mut self.location
    }

    // Take field
    pub fn take_location(&mut self) -> ::protobuf::RepeatedField<Location> {
        ::std::mem::replace(&mut self.location, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for Installation {
    fn is_initialized(&self) -> bool {
        for v in &self.location {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.location)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        for value in &self.location {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        for v in &self.location {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Installation {
        Installation::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "name",
                    |m: &Installation| { &m.name },
                    |m: &mut Installation| { &mut m.name },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Location>>(
                    "location",
                    |m: &Installation| { &m.location },
                    |m: &mut Installation| { &mut m.location },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Installation>(
                    "Installation",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Installation {
        static mut instance: ::protobuf::lazy::Lazy<Installation> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Installation,
        };
        unsafe {
            instance.get(Installation::new)
        }
    }
}

impl ::protobuf::Clear for Installation {
    fn clear(&mut self) {
        self.name.clear();
        self.location.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Installation {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Installation {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Version {
    // message fields
    pub epoch: i32,
    pub name: ::std::string::String,
    pub revision: ::std::string::String,
    pub kind: Version_VersionKind,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Version {
    fn default() -> &'a Version {
        <Version as ::protobuf::Message>::default_instance()
    }
}

impl Version {
    pub fn new() -> Version {
        ::std::default::Default::default()
    }

    // int32 epoch = 1;


    pub fn get_epoch(&self) -> i32 {
        self.epoch
    }
    pub fn clear_epoch(&mut self) {
        self.epoch = 0;
    }

    // Param is passed by value, moved
    pub fn set_epoch(&mut self, v: i32) {
        self.epoch = v;
    }

    // string name = 2;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // string revision = 3;


    pub fn get_revision(&self) -> &str {
        &self.revision
    }
    pub fn clear_revision(&mut self) {
        self.revision.clear();
    }

    // Param is passed by value, moved
    pub fn set_revision(&mut self, v: ::std::string::String) {
        self.revision = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_revision(&mut self) -> &mut ::std::string::String {
        &mut self.revision
    }

    // Take field
    pub fn take_revision(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.revision, ::std::string::String::new())
    }

    // .grafeas.v1beta1.package.Version.VersionKind kind = 4;


    pub fn get_kind(&self) -> Version_VersionKind {
        self.kind
    }
    pub fn clear_kind(&mut self) {
        self.kind = Version_VersionKind::VERSION_KIND_UNSPECIFIED;
    }

    // Param is passed by value, moved
    pub fn set_kind(&mut self, v: Version_VersionKind) {
        self.kind = v;
    }
}

impl ::protobuf::Message for Version {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.epoch = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.revision)?;
                },
                4 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.kind, 4, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.epoch != 0 {
            my_size += ::protobuf::rt::value_size(1, self.epoch, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.name);
        }
        if !self.revision.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.revision);
        }
        if self.kind != Version_VersionKind::VERSION_KIND_UNSPECIFIED {
            my_size += ::protobuf::rt::enum_size(4, self.kind);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.epoch != 0 {
            os.write_int32(1, self.epoch)?;
        }
        if !self.name.is_empty() {
            os.write_string(2, &self.name)?;
        }
        if !self.revision.is_empty() {
            os.write_string(3, &self.revision)?;
        }
        if self.kind != Version_VersionKind::VERSION_KIND_UNSPECIFIED {
            os.write_enum(4, self.kind.value())?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Version {
        Version::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "epoch",
                    |m: &Version| { &m.epoch },
                    |m: &mut Version| { &mut m.epoch },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "name",
                    |m: &Version| { &m.name },
                    |m: &mut Version| { &mut m.name },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "revision",
                    |m: &Version| { &m.revision },
                    |m: &mut Version| { &mut m.revision },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<Version_VersionKind>>(
                    "kind",
                    |m: &Version| { &m.kind },
                    |m: &mut Version| { &mut m.kind },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Version>(
                    "Version",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Version {
        static mut instance: ::protobuf::lazy::Lazy<Version> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Version,
        };
        unsafe {
            instance.get(Version::new)
        }
    }
}

impl ::protobuf::Clear for Version {
    fn clear(&mut self) {
        self.epoch = 0;
        self.name.clear();
        self.revision.clear();
        self.kind = Version_VersionKind::VERSION_KIND_UNSPECIFIED;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Version {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Version {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum Version_VersionKind {
    VERSION_KIND_UNSPECIFIED = 0,
    NORMAL = 1,
    MINIMUM = 2,
    MAXIMUM = 3,
}

impl ::protobuf::ProtobufEnum for Version_VersionKind {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<Version_VersionKind> {
        match value {
            0 => ::std::option::Option::Some(Version_VersionKind::VERSION_KIND_UNSPECIFIED),
            1 => ::std::option::Option::Some(Version_VersionKind::NORMAL),
            2 => ::std::option::Option::Some(Version_VersionKind::MINIMUM),
            3 => ::std::option::Option::Some(Version_VersionKind::MAXIMUM),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [Version_VersionKind] = &[
            Version_VersionKind::VERSION_KIND_UNSPECIFIED,
            Version_VersionKind::NORMAL,
            Version_VersionKind::MINIMUM,
            Version_VersionKind::MAXIMUM,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("Version_VersionKind", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for Version_VersionKind {
}

impl ::std::default::Default for Version_VersionKind {
    fn default() -> Self {
        Version_VersionKind::VERSION_KIND_UNSPECIFIED
    }
}

impl ::protobuf::reflect::ProtobufValue for Version_VersionKind {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum Architecture {
    ARCHITECTURE_UNSPECIFIED = 0,
    X86 = 1,
    X64 = 2,
}

impl ::protobuf::ProtobufEnum for Architecture {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<Architecture> {
        match value {
            0 => ::std::option::Option::Some(Architecture::ARCHITECTURE_UNSPECIFIED),
            1 => ::std::option::Option::Some(Architecture::X86),
            2 => ::std::option::Option::Some(Architecture::X64),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [Architecture] = &[
            Architecture::ARCHITECTURE_UNSPECIFIED,
            Architecture::X86,
            Architecture::X64,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("Architecture", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for Architecture {
}

impl ::std::default::Default for Architecture {
    fn default() -> Self {
        Architecture::ARCHITECTURE_UNSPECIFIED
    }
}

impl ::protobuf::reflect::ProtobufValue for Architecture {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1bproto/v1beta1/package.proto\x12\x17grafeas.v1beta1.package\"\x8f\
    \x02\n\x0cDistribution\x12\x17\n\x07cpe_uri\x18\x01\x20\x01(\tR\x06cpeUr\
    i\x12I\n\x0carchitecture\x18\x02\x20\x01(\x0e2%.grafeas.v1beta1.package.\
    ArchitectureR\x0carchitecture\x12G\n\x0elatest_version\x18\x03\x20\x01(\
    \x0b2\x20.grafeas.v1beta1.package.VersionR\rlatestVersion\x12\x1e\n\nmai\
    ntainer\x18\x04\x20\x01(\tR\nmaintainer\x12\x10\n\x03url\x18\x05\x20\x01\
    (\tR\x03url\x12\x20\n\x0bdescription\x18\x06\x20\x01(\tR\x0bdescription\
    \"s\n\x08Location\x12\x17\n\x07cpe_uri\x18\x01\x20\x01(\tR\x06cpeUri\x12\
    :\n\x07version\x18\x02\x20\x01(\x0b2\x20.grafeas.v1beta1.package.Version\
    R\x07version\x12\x12\n\x04path\x18\x03\x20\x01(\tR\x04path\"h\n\x07Packa\
    ge\x12\x12\n\x04name\x18\x01\x20\x01(\tR\x04name\x12I\n\x0cdistribution\
    \x18\n\x20\x03(\x0b2%.grafeas.v1beta1.package.DistributionR\x0cdistribut\
    ion\"T\n\x07Details\x12I\n\x0cinstallation\x18\x01\x20\x01(\x0b2%.grafea\
    s.v1beta1.package.InstallationR\x0cinstallation\"a\n\x0cInstallation\x12\
    \x12\n\x04name\x18\x01\x20\x01(\tR\x04name\x12=\n\x08location\x18\x02\
    \x20\x03(\x0b2!.grafeas.v1beta1.package.LocationR\x08location\"\xe4\x01\
    \n\x07Version\x12\x14\n\x05epoch\x18\x01\x20\x01(\x05R\x05epoch\x12\x12\
    \n\x04name\x18\x02\x20\x01(\tR\x04name\x12\x1a\n\x08revision\x18\x03\x20\
    \x01(\tR\x08revision\x12@\n\x04kind\x18\x04\x20\x01(\x0e2,.grafeas.v1bet\
    a1.package.Version.VersionKindR\x04kind\"Q\n\x0bVersionKind\x12\x1c\n\
    \x18VERSION_KIND_UNSPECIFIED\x10\0\x12\n\n\x06NORMAL\x10\x01\x12\x0b\n\
    \x07MINIMUM\x10\x02\x12\x0b\n\x07MAXIMUM\x10\x03*>\n\x0cArchitecture\x12\
    \x1c\n\x18ARCHITECTURE_UNSPECIFIED\x10\0\x12\x07\n\x03X86\x10\x01\x12\
    \x07\n\x03X64\x10\x02B[\n\x16io.grafeas.v1beta1.pkgP\x01Z9github.com/gra\
    feas/grafeas/proto/v1beta1/package_go_proto\xa2\x02\x03GRAJ\xc3%\n\x06\
    \x12\x04\x0e\0~\x01\n\xda\x04\n\x01\x0c\x12\x03\x0e\0\x122\xcf\x04\x20Co\
    pyright\x202018\x20The\x20Grafeas\x20Authors.\x20All\x20rights\x20reserv\
    ed.\n\n\x20Licensed\x20under\x20the\x20Apache\x20License,\x20Version\x20\
    2.0\x20(the\x20\"License\");\n\x20you\x20may\x20not\x20use\x20this\x20fi\
    le\x20except\x20in\x20compliance\x20with\x20the\x20License.\n\x20You\x20\
    may\x20obtain\x20a\x20copy\x20of\x20the\x20License\x20at\n\n\x20\x20\x20\
    \x20http://www.apache.org/licenses/LICENSE-2.0\n\n\x20Unless\x20required\
    \x20by\x20applicable\x20law\x20or\x20agreed\x20to\x20in\x20writing,\x20s\
    oftware\n\x20distributed\x20under\x20the\x20License\x20is\x20distributed\
    \x20on\x20an\x20\"AS\x20IS\"\x20BASIS,\n\x20WITHOUT\x20WARRANTIES\x20OR\
    \x20CONDITIONS\x20OF\x20ANY\x20KIND,\x20either\x20express\x20or\x20impli\
    ed.\n\x20See\x20the\x20License\x20for\x20the\x20specific\x20language\x20\
    governing\x20permissions\x20and\n\x20limitations\x20under\x20the\x20Lice\
    nse.\n\n\x08\n\x01\x02\x12\x03\x10\0\x20\n\x08\n\x01\x08\x12\x03\x12\0P\
    \n\t\n\x02\x08\x0b\x12\x03\x12\0P\n\x08\n\x01\x08\x12\x03\x13\0\"\n\t\n\
    \x02\x08\n\x12\x03\x13\0\"\n\x08\n\x01\x08\x12\x03\x14\0/\n\t\n\x02\x08\
    \x01\x12\x03\x14\0/\n\x08\n\x01\x08\x12\x03\x15\0!\n\t\n\x02\x08$\x12\
    \x03\x15\0!\nR\n\x02\x05\0\x12\x04\x18\0\x1f\x01\x1aF\x20Instruction\x20\
    set\x20architectures\x20supported\x20by\x20various\x20package\x20manager\
    s.\n\n\n\n\x03\x05\0\x01\x12\x03\x18\x05\x11\n$\n\x04\x05\0\x02\0\x12\
    \x03\x1a\x02\x1f\x1a\x17\x20Unknown\x20architecture.\n\n\x0c\n\x05\x05\0\
    \x02\0\x01\x12\x03\x1a\x02\x1a\n\x0c\n\x05\x05\0\x02\0\x02\x12\x03\x1a\
    \x1d\x1e\n\x20\n\x04\x05\0\x02\x01\x12\x03\x1c\x02\n\x1a\x13\x20X86\x20a\
    rchitecture.\n\n\x0c\n\x05\x05\0\x02\x01\x01\x12\x03\x1c\x02\x05\n\x0c\n\
    \x05\x05\0\x02\x01\x02\x12\x03\x1c\x08\t\n\x20\n\x04\x05\0\x02\x02\x12\
    \x03\x1e\x02\n\x1a\x13\x20X64\x20architecture.\n\n\x0c\n\x05\x05\0\x02\
    \x02\x01\x12\x03\x1e\x02\x05\n\x0c\n\x05\x05\0\x02\x02\x02\x12\x03\x1e\
    \x08\t\n\x85\x01\n\x02\x04\0\x12\x04#\07\x01\x1ay\x20This\x20represents\
    \x20a\x20particular\x20channel\x20of\x20distribution\x20for\x20a\x20give\
    n\x20package.\n\x20E.g.,\x20Debian's\x20jessie-backports\x20dpkg\x20mirr\
    or.\n\n\n\n\x03\x04\0\x01\x12\x03#\x08\x14\n\x99\x01\n\x04\x04\0\x02\0\
    \x12\x03&\x02\x15\x1a\x8b\x01\x20Required.\x20The\x20cpe_uri\x20in\x20[C\
    PE\x20format](https://cpe.mitre.org/specification/)\n\x20denoting\x20the\
    \x20package\x20manager\x20version\x20distributing\x20a\x20package.\n\n\r\
    \n\x05\x04\0\x02\0\x04\x12\x04&\x02#\x16\n\x0c\n\x05\x04\0\x02\0\x05\x12\
    \x03&\x02\x08\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03&\t\x10\n\x0c\n\x05\x04\
    \0\x02\0\x03\x12\x03&\x13\x14\n`\n\x04\x04\0\x02\x01\x12\x03*\x02\x20\
    \x1aS\x20The\x20CPU\x20architecture\x20for\x20which\x20packages\x20in\
    \x20this\x20distribution\x20channel\x20were\n\x20built.\n\n\r\n\x05\x04\
    \0\x02\x01\x04\x12\x04*\x02&\x15\n\x0c\n\x05\x04\0\x02\x01\x06\x12\x03*\
    \x02\x0e\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03*\x0f\x1b\n\x0c\n\x05\x04\
    \0\x02\x01\x03\x12\x03*\x1e\x1f\nY\n\x04\x04\0\x02\x02\x12\x03-\x02\x1d\
    \x1aL\x20The\x20latest\x20available\x20version\x20of\x20this\x20package\
    \x20in\x20this\x20distribution\x20channel.\n\n\r\n\x05\x04\0\x02\x02\x04\
    \x12\x04-\x02*\x20\n\x0c\n\x05\x04\0\x02\x02\x06\x12\x03-\x02\t\n\x0c\n\
    \x05\x04\0\x02\x02\x01\x12\x03-\n\x18\n\x0c\n\x05\x04\0\x02\x02\x03\x12\
    \x03-\x1b\x1c\nI\n\x04\x04\0\x02\x03\x12\x030\x02\x18\x1a<\x20A\x20freef\
    orm\x20string\x20denoting\x20the\x20maintainer\x20of\x20this\x20package.\
    \n\n\r\n\x05\x04\0\x02\x03\x04\x12\x040\x02-\x1d\n\x0c\n\x05\x04\0\x02\
    \x03\x05\x12\x030\x02\x08\n\x0c\n\x05\x04\0\x02\x03\x01\x12\x030\t\x13\n\
    \x0c\n\x05\x04\0\x02\x03\x03\x12\x030\x16\x17\nK\n\x04\x04\0\x02\x04\x12\
    \x033\x02\x11\x1a>\x20The\x20distribution\x20channel-specific\x20homepag\
    e\x20for\x20this\x20package.\n\n\r\n\x05\x04\0\x02\x04\x04\x12\x043\x020\
    \x18\n\x0c\n\x05\x04\0\x02\x04\x05\x12\x033\x02\x08\n\x0c\n\x05\x04\0\
    \x02\x04\x01\x12\x033\t\x0c\n\x0c\n\x05\x04\0\x02\x04\x03\x12\x033\x0f\
    \x10\nM\n\x04\x04\0\x02\x05\x12\x036\x02\x19\x1a@\x20The\x20distribution\
    \x20channel-specific\x20description\x20of\x20this\x20package.\n\n\r\n\
    \x05\x04\0\x02\x05\x04\x12\x046\x023\x11\n\x0c\n\x05\x04\0\x02\x05\x05\
    \x12\x036\x02\x08\n\x0c\n\x05\x04\0\x02\x05\x01\x12\x036\t\x14\n\x0c\n\
    \x05\x04\0\x02\x05\x03\x12\x036\x17\x18\n\x97\x01\n\x02\x04\x01\x12\x04;\
    \0E\x01\x1a\x8a\x01\x20An\x20occurrence\x20of\x20a\x20particular\x20pack\
    age\x20installation\x20found\x20within\x20a\x20system's\n\x20filesystem.\
    \x20E.g.,\x20glibc\x20was\x20found\x20in\x20`/var/lib/dpkg/status`.\n\n\
    \n\n\x03\x04\x01\x01\x12\x03;\x08\x10\n\x99\x01\n\x04\x04\x01\x02\0\x12\
    \x03>\x02\x15\x1a\x8b\x01\x20Required.\x20The\x20CPE\x20URI\x20in\x20[CP\
    E\x20format](https://cpe.mitre.org/specification/)\n\x20denoting\x20the\
    \x20package\x20manager\x20version\x20distributing\x20a\x20package.\n\n\r\
    \n\x05\x04\x01\x02\0\x04\x12\x04>\x02;\x12\n\x0c\n\x05\x04\x01\x02\0\x05\
    \x12\x03>\x02\x08\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03>\t\x10\n\x0c\n\
    \x05\x04\x01\x02\0\x03\x12\x03>\x13\x14\n6\n\x04\x04\x01\x02\x01\x12\x03\
    A\x02\x16\x1a)\x20The\x20version\x20installed\x20at\x20this\x20location.\
    \n\n\r\n\x05\x04\x01\x02\x01\x04\x12\x04A\x02>\x15\n\x0c\n\x05\x04\x01\
    \x02\x01\x06\x12\x03A\x02\t\n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x03A\n\
    \x11\n\x0c\n\x05\x04\x01\x02\x01\x03\x12\x03A\x14\x15\nV\n\x04\x04\x01\
    \x02\x02\x12\x03D\x02\x12\x1aI\x20The\x20path\x20from\x20which\x20we\x20\
    gathered\x20that\x20this\x20package/version\x20is\x20installed.\n\n\r\n\
    \x05\x04\x01\x02\x02\x04\x12\x04D\x02A\x16\n\x0c\n\x05\x04\x01\x02\x02\
    \x05\x12\x03D\x02\x08\n\x0c\n\x05\x04\x01\x02\x02\x01\x12\x03D\t\r\n\x0c\
    \n\x05\x04\x01\x02\x02\x03\x12\x03D\x10\x11\n\xa5\x01\n\x02\x04\x02\x12\
    \x04J\0P\x01\x1a\x98\x01\x20This\x20represents\x20a\x20particular\x20pac\
    kage\x20that\x20is\x20distributed\x20over\x20various\n\x20channels.\x20E\
    .g.,\x20glibc\x20(aka\x20libc6)\x20is\x20distributed\x20by\x20many,\x20a\
    t\x20various\n\x20versions.\n\n\n\n\x03\x04\x02\x01\x12\x03J\x08\x0f\n<\
    \n\x04\x04\x02\x02\0\x12\x03L\x02\x12\x1a/\x20Required.\x20Immutable.\
    \x20The\x20name\x20of\x20the\x20package.\n\n\r\n\x05\x04\x02\x02\0\x04\
    \x12\x04L\x02J\x11\n\x0c\n\x05\x04\x02\x02\0\x05\x12\x03L\x02\x08\n\x0c\
    \n\x05\x04\x02\x02\0\x01\x12\x03L\t\r\n\x0c\n\x05\x04\x02\x02\0\x03\x12\
    \x03L\x10\x11\nF\n\x04\x04\x02\x02\x01\x12\x03O\x02*\x1a9\x20The\x20vari\
    ous\x20channels\x20by\x20which\x20a\x20package\x20is\x20distributed.\n\n\
    \x0c\n\x05\x04\x02\x02\x01\x04\x12\x03O\x02\n\n\x0c\n\x05\x04\x02\x02\
    \x01\x06\x12\x03O\x0b\x17\n\x0c\n\x05\x04\x02\x02\x01\x01\x12\x03O\x18$\
    \n\x0c\n\x05\x04\x02\x02\x01\x03\x12\x03O')\n.\n\x02\x04\x03\x12\x04S\0V\
    \x01\x1a\"\x20Details\x20of\x20a\x20package\x20occurrence.\n\n\n\n\x03\
    \x04\x03\x01\x12\x03S\x08\x0f\n9\n\x04\x04\x03\x02\0\x12\x03U\x02\x20\
    \x1a,\x20Required.\x20Where\x20the\x20package\x20was\x20installed.\n\n\r\
    \n\x05\x04\x03\x02\0\x04\x12\x04U\x02S\x11\n\x0c\n\x05\x04\x03\x02\0\x06\
    \x12\x03U\x02\x0e\n\x0c\n\x05\x04\x03\x02\0\x01\x12\x03U\x0f\x1b\n\x0c\n\
    \x05\x04\x03\x02\0\x03\x12\x03U\x1e\x1f\n^\n\x02\x04\x04\x12\x04Z\0a\x01\
    \x1aR\x20This\x20represents\x20how\x20a\x20particular\x20software\x20pac\
    kage\x20may\x20be\x20installed\x20on\x20a\n\x20system.\n\n\n\n\x03\x04\
    \x04\x01\x12\x03Z\x08\x14\n>\n\x04\x04\x04\x02\0\x12\x03\\\x02\x12\x1a1\
    \x20Output\x20only.\x20The\x20name\x20of\x20the\x20installed\x20package.\
    \n\n\r\n\x05\x04\x04\x02\0\x04\x12\x04\\\x02Z\x16\n\x0c\n\x05\x04\x04\
    \x02\0\x05\x12\x03\\\x02\x08\n\x0c\n\x05\x04\x04\x02\0\x01\x12\x03\\\t\r\
    \n\x0c\n\x05\x04\x04\x02\0\x03\x12\x03\\\x10\x11\nk\n\x04\x04\x04\x02\
    \x01\x12\x03`\x02!\x1a^\x20Required.\x20All\x20of\x20the\x20places\x20wi\
    thin\x20the\x20filesystem\x20versions\x20of\x20this\x20package\n\x20have\
    \x20been\x20found.\n\n\x0c\n\x05\x04\x04\x02\x01\x04\x12\x03`\x02\n\n\
    \x0c\n\x05\x04\x04\x02\x01\x06\x12\x03`\x0b\x13\n\x0c\n\x05\x04\x04\x02\
    \x01\x01\x12\x03`\x14\x1c\n\x0c\n\x05\x04\x04\x02\x01\x03\x12\x03`\x1f\
    \x20\nU\n\x02\x04\x05\x12\x04d\0~\x01\x1aI\x20Version\x20contains\x20str\
    uctured\x20information\x20about\x20the\x20version\x20of\x20a\x20package.\
    \n\n\n\n\x03\x04\x05\x01\x12\x03d\x08\x0f\nH\n\x04\x04\x05\x02\0\x12\x03\
    f\x02\x12\x1a;\x20Used\x20to\x20correct\x20mistakes\x20in\x20the\x20vers\
    ion\x20numbering\x20scheme.\n\n\r\n\x05\x04\x05\x02\0\x04\x12\x04f\x02d\
    \x11\n\x0c\n\x05\x04\x05\x02\0\x05\x12\x03f\x02\x07\n\x0c\n\x05\x04\x05\
    \x02\0\x01\x12\x03f\x08\r\n\x0c\n\x05\x04\x05\x02\0\x03\x12\x03f\x10\x11\
    \n]\n\x04\x04\x05\x02\x01\x12\x03j\x02\x12\x1aP\x20Required\x20only\x20w\
    hen\x20version\x20kind\x20is\x20NORMAL.\x20The\x20main\x20part\x20of\x20\
    the\x20version\n\x20name.\n\n\r\n\x05\x04\x05\x02\x01\x04\x12\x04j\x02f\
    \x12\n\x0c\n\x05\x04\x05\x02\x01\x05\x12\x03j\x02\x08\n\x0c\n\x05\x04\
    \x05\x02\x01\x01\x12\x03j\t\r\n\x0c\n\x05\x04\x05\x02\x01\x03\x12\x03j\
    \x10\x11\nI\n\x04\x04\x05\x02\x02\x12\x03m\x02\x16\x1a<\x20The\x20iterat\
    ion\x20of\x20the\x20package\x20build\x20from\x20the\x20above\x20version.\
    \n\n\r\n\x05\x04\x05\x02\x02\x04\x12\x04m\x02j\x12\n\x0c\n\x05\x04\x05\
    \x02\x02\x05\x12\x03m\x02\x08\n\x0c\n\x05\x04\x05\x02\x02\x01\x12\x03m\t\
    \x11\n\x0c\n\x05\x04\x05\x02\x02\x03\x12\x03m\x14\x15\nZ\n\x04\x04\x05\
    \x04\0\x12\x04p\x02y\x03\x1aL\x20Whether\x20this\x20is\x20an\x20ordinary\
    \x20package\x20version\x20or\x20a\x20sentinel\x20MIN/MAX\x20version.\n\n\
    \x0c\n\x05\x04\x05\x04\0\x01\x12\x03p\x07\x12\n\x19\n\x06\x04\x05\x04\0\
    \x02\0\x12\x03r\x04!\x1a\n\x20Unknown.\n\n\x0e\n\x07\x04\x05\x04\0\x02\0\
    \x01\x12\x03r\x04\x1c\n\x0e\n\x07\x04\x05\x04\0\x02\0\x02\x12\x03r\x1f\
    \x20\n,\n\x06\x04\x05\x04\0\x02\x01\x12\x03t\x04\x0f\x1a\x1d\x20A\x20sta\
    ndard\x20package\x20version.\n\n\x0e\n\x07\x04\x05\x04\0\x02\x01\x01\x12\
    \x03t\x04\n\n\x0e\n\x07\x04\x05\x04\0\x02\x01\x02\x12\x03t\r\x0e\nB\n\
    \x06\x04\x05\x04\0\x02\x02\x12\x03v\x04\x10\x1a3\x20A\x20special\x20vers\
    ion\x20representing\x20negative\x20infinity.\n\n\x0e\n\x07\x04\x05\x04\0\
    \x02\x02\x01\x12\x03v\x04\x0b\n\x0e\n\x07\x04\x05\x04\0\x02\x02\x02\x12\
    \x03v\x0e\x0f\nB\n\x06\x04\x05\x04\0\x02\x03\x12\x03x\x04\x10\x1a3\x20A\
    \x20special\x20version\x20representing\x20positive\x20infinity.\n\n\x0e\
    \n\x07\x04\x05\x04\0\x02\x03\x01\x12\x03x\x04\x0b\n\x0e\n\x07\x04\x05\
    \x04\0\x02\x03\x02\x12\x03x\x0e\x0f\n^\n\x04\x04\x05\x02\x03\x12\x03}\
    \x02\x17\x1aQ\x20Required.\x20Distinguishes\x20between\x20sentinel\x20MI\
    N/MAX\x20versions\x20and\x20normal\n\x20versions.\n\n\r\n\x05\x04\x05\
    \x02\x03\x04\x12\x04}\x02y\x04\n\x0c\n\x05\x04\x05\x02\x03\x06\x12\x03}\
    \x02\r\n\x0c\n\x05\x04\x05\x02\x03\x01\x12\x03}\x0e\x12\n\x0c\n\x05\x04\
    \x05\x02\x03\x03\x12\x03}\x15\x16b\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
