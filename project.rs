// This file is generated by rust-protobuf 2.6.0. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq,Clone,Default)]
pub struct CreateProjectRequest {
    // message fields
    pub project: ::protobuf::SingularPtrField<Project>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CreateProjectRequest {
    fn default() -> &'a CreateProjectRequest {
        <CreateProjectRequest as ::protobuf::Message>::default_instance()
    }
}

impl CreateProjectRequest {
    pub fn new() -> CreateProjectRequest {
        ::std::default::Default::default()
    }

    // .grafeas.v1beta1.project.Project project = 1;


    pub fn get_project(&self) -> &Project {
        self.project.as_ref().unwrap_or_else(|| Project::default_instance())
    }
    pub fn clear_project(&mut self) {
        self.project.clear();
    }

    pub fn has_project(&self) -> bool {
        self.project.is_some()
    }

    // Param is passed by value, moved
    pub fn set_project(&mut self, v: Project) {
        self.project = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_project(&mut self) -> &mut Project {
        if self.project.is_none() {
            self.project.set_default();
        }
        self.project.as_mut().unwrap()
    }

    // Take field
    pub fn take_project(&mut self) -> Project {
        self.project.take().unwrap_or_else(|| Project::new())
    }
}

impl ::protobuf::Message for CreateProjectRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.project {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.project)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.project.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.project.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CreateProjectRequest {
        CreateProjectRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Project>>(
                    "project",
                    |m: &CreateProjectRequest| { &m.project },
                    |m: &mut CreateProjectRequest| { &mut m.project },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<CreateProjectRequest>(
                    "CreateProjectRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CreateProjectRequest {
        static mut instance: ::protobuf::lazy::Lazy<CreateProjectRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CreateProjectRequest,
        };
        unsafe {
            instance.get(CreateProjectRequest::new)
        }
    }
}

impl ::protobuf::Clear for CreateProjectRequest {
    fn clear(&mut self) {
        self.project.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CreateProjectRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CreateProjectRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetProjectRequest {
    // message fields
    pub name: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetProjectRequest {
    fn default() -> &'a GetProjectRequest {
        <GetProjectRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetProjectRequest {
    pub fn new() -> GetProjectRequest {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }
}

impl ::protobuf::Message for GetProjectRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetProjectRequest {
        GetProjectRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "name",
                    |m: &GetProjectRequest| { &m.name },
                    |m: &mut GetProjectRequest| { &mut m.name },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<GetProjectRequest>(
                    "GetProjectRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static GetProjectRequest {
        static mut instance: ::protobuf::lazy::Lazy<GetProjectRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const GetProjectRequest,
        };
        unsafe {
            instance.get(GetProjectRequest::new)
        }
    }
}

impl ::protobuf::Clear for GetProjectRequest {
    fn clear(&mut self) {
        self.name.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetProjectRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetProjectRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ListProjectsRequest {
    // message fields
    pub filter: ::std::string::String,
    pub page_size: i32,
    pub page_token: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ListProjectsRequest {
    fn default() -> &'a ListProjectsRequest {
        <ListProjectsRequest as ::protobuf::Message>::default_instance()
    }
}

impl ListProjectsRequest {
    pub fn new() -> ListProjectsRequest {
        ::std::default::Default::default()
    }

    // string filter = 1;


    pub fn get_filter(&self) -> &str {
        &self.filter
    }
    pub fn clear_filter(&mut self) {
        self.filter.clear();
    }

    // Param is passed by value, moved
    pub fn set_filter(&mut self, v: ::std::string::String) {
        self.filter = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_filter(&mut self) -> &mut ::std::string::String {
        &mut self.filter
    }

    // Take field
    pub fn take_filter(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.filter, ::std::string::String::new())
    }

    // int32 page_size = 2;


    pub fn get_page_size(&self) -> i32 {
        self.page_size
    }
    pub fn clear_page_size(&mut self) {
        self.page_size = 0;
    }

    // Param is passed by value, moved
    pub fn set_page_size(&mut self, v: i32) {
        self.page_size = v;
    }

    // string page_token = 3;


    pub fn get_page_token(&self) -> &str {
        &self.page_token
    }
    pub fn clear_page_token(&mut self) {
        self.page_token.clear();
    }

    // Param is passed by value, moved
    pub fn set_page_token(&mut self, v: ::std::string::String) {
        self.page_token = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_page_token(&mut self) -> &mut ::std::string::String {
        &mut self.page_token
    }

    // Take field
    pub fn take_page_token(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.page_token, ::std::string::String::new())
    }
}

impl ::protobuf::Message for ListProjectsRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.filter)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.page_size = tmp;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.page_token)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.filter.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.filter);
        }
        if self.page_size != 0 {
            my_size += ::protobuf::rt::value_size(2, self.page_size, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.page_token.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.page_token);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.filter.is_empty() {
            os.write_string(1, &self.filter)?;
        }
        if self.page_size != 0 {
            os.write_int32(2, self.page_size)?;
        }
        if !self.page_token.is_empty() {
            os.write_string(3, &self.page_token)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ListProjectsRequest {
        ListProjectsRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "filter",
                    |m: &ListProjectsRequest| { &m.filter },
                    |m: &mut ListProjectsRequest| { &mut m.filter },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "page_size",
                    |m: &ListProjectsRequest| { &m.page_size },
                    |m: &mut ListProjectsRequest| { &mut m.page_size },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "page_token",
                    |m: &ListProjectsRequest| { &m.page_token },
                    |m: &mut ListProjectsRequest| { &mut m.page_token },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ListProjectsRequest>(
                    "ListProjectsRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ListProjectsRequest {
        static mut instance: ::protobuf::lazy::Lazy<ListProjectsRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ListProjectsRequest,
        };
        unsafe {
            instance.get(ListProjectsRequest::new)
        }
    }
}

impl ::protobuf::Clear for ListProjectsRequest {
    fn clear(&mut self) {
        self.filter.clear();
        self.page_size = 0;
        self.page_token.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ListProjectsRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ListProjectsRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DeleteProjectRequest {
    // message fields
    pub name: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DeleteProjectRequest {
    fn default() -> &'a DeleteProjectRequest {
        <DeleteProjectRequest as ::protobuf::Message>::default_instance()
    }
}

impl DeleteProjectRequest {
    pub fn new() -> DeleteProjectRequest {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }
}

impl ::protobuf::Message for DeleteProjectRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DeleteProjectRequest {
        DeleteProjectRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "name",
                    |m: &DeleteProjectRequest| { &m.name },
                    |m: &mut DeleteProjectRequest| { &mut m.name },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<DeleteProjectRequest>(
                    "DeleteProjectRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static DeleteProjectRequest {
        static mut instance: ::protobuf::lazy::Lazy<DeleteProjectRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const DeleteProjectRequest,
        };
        unsafe {
            instance.get(DeleteProjectRequest::new)
        }
    }
}

impl ::protobuf::Clear for DeleteProjectRequest {
    fn clear(&mut self) {
        self.name.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DeleteProjectRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DeleteProjectRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ListProjectsResponse {
    // message fields
    pub projects: ::protobuf::RepeatedField<Project>,
    pub next_page_token: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ListProjectsResponse {
    fn default() -> &'a ListProjectsResponse {
        <ListProjectsResponse as ::protobuf::Message>::default_instance()
    }
}

impl ListProjectsResponse {
    pub fn new() -> ListProjectsResponse {
        ::std::default::Default::default()
    }

    // repeated .grafeas.v1beta1.project.Project projects = 1;


    pub fn get_projects(&self) -> &[Project] {
        &self.projects
    }
    pub fn clear_projects(&mut self) {
        self.projects.clear();
    }

    // Param is passed by value, moved
    pub fn set_projects(&mut self, v: ::protobuf::RepeatedField<Project>) {
        self.projects = v;
    }

    // Mutable pointer to the field.
    pub fn mut_projects(&mut self) -> &mut ::protobuf::RepeatedField<Project> {
        &mut self.projects
    }

    // Take field
    pub fn take_projects(&mut self) -> ::protobuf::RepeatedField<Project> {
        ::std::mem::replace(&mut self.projects, ::protobuf::RepeatedField::new())
    }

    // string next_page_token = 2;


    pub fn get_next_page_token(&self) -> &str {
        &self.next_page_token
    }
    pub fn clear_next_page_token(&mut self) {
        self.next_page_token.clear();
    }

    // Param is passed by value, moved
    pub fn set_next_page_token(&mut self, v: ::std::string::String) {
        self.next_page_token = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_next_page_token(&mut self) -> &mut ::std::string::String {
        &mut self.next_page_token
    }

    // Take field
    pub fn take_next_page_token(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.next_page_token, ::std::string::String::new())
    }
}

impl ::protobuf::Message for ListProjectsResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.projects {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.projects)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.next_page_token)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.projects {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if !self.next_page_token.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.next_page_token);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        for v in &self.projects {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if !self.next_page_token.is_empty() {
            os.write_string(2, &self.next_page_token)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ListProjectsResponse {
        ListProjectsResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Project>>(
                    "projects",
                    |m: &ListProjectsResponse| { &m.projects },
                    |m: &mut ListProjectsResponse| { &mut m.projects },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "next_page_token",
                    |m: &ListProjectsResponse| { &m.next_page_token },
                    |m: &mut ListProjectsResponse| { &mut m.next_page_token },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ListProjectsResponse>(
                    "ListProjectsResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ListProjectsResponse {
        static mut instance: ::protobuf::lazy::Lazy<ListProjectsResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ListProjectsResponse,
        };
        unsafe {
            instance.get(ListProjectsResponse::new)
        }
    }
}

impl ::protobuf::Clear for ListProjectsResponse {
    fn clear(&mut self) {
        self.projects.clear();
        self.next_page_token.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ListProjectsResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ListProjectsResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Project {
    // message fields
    pub name: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Project {
    fn default() -> &'a Project {
        <Project as ::protobuf::Message>::default_instance()
    }
}

impl Project {
    pub fn new() -> Project {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }
}

impl ::protobuf::Message for Project {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Project {
        Project::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "name",
                    |m: &Project| { &m.name },
                    |m: &mut Project| { &mut m.name },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Project>(
                    "Project",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Project {
        static mut instance: ::protobuf::lazy::Lazy<Project> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Project,
        };
        unsafe {
            instance.get(Project::new)
        }
    }
}

impl ::protobuf::Clear for Project {
    fn clear(&mut self) {
        self.name.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Project {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Project {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1bproto/v1beta1/project.proto\x12\x17grafeas.v1beta1.project\x1a\x1c\
    google/api/annotations.proto\x1a\x1bgoogle/protobuf/empty.proto\"R\n\x14\
    CreateProjectRequest\x12:\n\x07project\x18\x01\x20\x01(\x0b2\x20.grafeas\
    .v1beta1.project.ProjectR\x07project\"'\n\x11GetProjectRequest\x12\x12\n\
    \x04name\x18\x01\x20\x01(\tR\x04name\"i\n\x13ListProjectsRequest\x12\x16\
    \n\x06filter\x18\x01\x20\x01(\tR\x06filter\x12\x1b\n\tpage_size\x18\x02\
    \x20\x01(\x05R\x08pageSize\x12\x1d\n\npage_token\x18\x03\x20\x01(\tR\tpa\
    geToken\"*\n\x14DeleteProjectRequest\x12\x12\n\x04name\x18\x01\x20\x01(\
    \tR\x04name\"|\n\x14ListProjectsResponse\x12<\n\x08projects\x18\x01\x20\
    \x03(\x0b2\x20.grafeas.v1beta1.project.ProjectR\x08projects\x12&\n\x0fne\
    xt_page_token\x18\x02\x20\x01(\tR\rnextPageToken\"\x1d\n\x07Project\x12\
    \x12\n\x04name\x18\x01\x20\x01(\tR\x04name2\x96\x04\n\x08Projects\x12\
    \x84\x01\n\rCreateProject\x12-.grafeas.v1beta1.project.CreateProjectRequ\
    est\x1a\x20.grafeas.v1beta1.project.Project\"\"\x82\xd3\xe4\x93\x02\x1c\
    \"\x11/v1beta1/projects:\x07project\x12~\n\nGetProject\x12*.grafeas.v1be\
    ta1.project.GetProjectRequest\x1a\x20.grafeas.v1beta1.project.Project\"\
    \"\x82\xd3\xe4\x93\x02\x1c\x12\x1a/v1beta1/{name=projects/*}\x12\x86\x01\
    \n\x0cListProjects\x12,.grafeas.v1beta1.project.ListProjectsRequest\x1a-\
    .grafeas.v1beta1.project.ListProjectsResponse\"\x19\x82\xd3\xe4\x93\x02\
    \x13\x12\x11/v1beta1/projects\x12z\n\rDeleteProject\x12-.grafeas.v1beta1\
    .project.DeleteProjectRequest\x1a\x16.google.protobuf.Empty\"\"\x82\xd3\
    \xe4\x93\x02\x1c*\x1a/v1beta1/{name=projects/*}B_\n\x1aio.grafeas.v1beta\
    1.projectP\x01Z9github.com/grafeas/grafeas/proto/v1beta1/project_go_prot\
    o\xa2\x02\x03GRAJ\xbc\x16\n\x06\x12\x04\x0e\0j\x01\n\xda\x04\n\x01\x0c\
    \x12\x03\x0e\0\x122\xcf\x04\x20Copyright\x202018\x20The\x20Grafeas\x20Au\
    thors.\x20All\x20rights\x20reserved.\n\n\x20Licensed\x20under\x20the\x20\
    Apache\x20License,\x20Version\x202.0\x20(the\x20\"License\");\n\x20you\
    \x20may\x20not\x20use\x20this\x20file\x20except\x20in\x20compliance\x20w\
    ith\x20the\x20License.\n\x20You\x20may\x20obtain\x20a\x20copy\x20of\x20t\
    he\x20License\x20at\n\n\x20\x20\x20\x20http://www.apache.org/licenses/LI\
    CENSE-2.0\n\n\x20Unless\x20required\x20by\x20applicable\x20law\x20or\x20\
    agreed\x20to\x20in\x20writing,\x20software\n\x20distributed\x20under\x20\
    the\x20License\x20is\x20distributed\x20on\x20an\x20\"AS\x20IS\"\x20BASIS\
    ,\n\x20WITHOUT\x20WARRANTIES\x20OR\x20CONDITIONS\x20OF\x20ANY\x20KIND,\
    \x20either\x20express\x20or\x20implied.\n\x20See\x20the\x20License\x20fo\
    r\x20the\x20specific\x20language\x20governing\x20permissions\x20and\n\
    \x20limitations\x20under\x20the\x20License.\n\n\x08\n\x01\x02\x12\x03\
    \x10\0\x20\n\x08\n\x01\x08\x12\x03\x12\0P\n\t\n\x02\x08\x0b\x12\x03\x12\
    \0P\n\x08\n\x01\x08\x12\x03\x13\0\"\n\t\n\x02\x08\n\x12\x03\x13\0\"\n\
    \x08\n\x01\x08\x12\x03\x14\03\n\t\n\x02\x08\x01\x12\x03\x14\03\n\x08\n\
    \x01\x08\x12\x03\x15\0!\n\t\n\x02\x08$\x12\x03\x15\0!\n\t\n\x02\x03\0\
    \x12\x03\x17\0&\n\t\n\x02\x03\x01\x12\x03\x18\0%\n\x9c\x01\n\x02\x06\0\
    \x12\x04\x1e\0;\x01\x1a\x8f\x01\x20[Projects](grafeas.io)\x20API.\n\n\
    \x20Manages\x20Grafeas\x20`Projects`.\x20Projects\x20contain\x20sets\x20\
    of\x20other\x20Grafeas\x20entities\n\x20such\x20as\x20`Notes`\x20and\x20\
    `Occurrences`.\n\n\n\n\x03\x06\0\x01\x12\x03\x1e\x08\x10\n&\n\x04\x06\0\
    \x02\0\x12\x04\x20\x02%\x03\x1a\x18\x20Creates\x20a\x20new\x20project.\n\
    \n\x0c\n\x05\x06\0\x02\0\x01\x12\x03\x20\x06\x13\n\x0c\n\x05\x06\0\x02\0\
    \x02\x12\x03\x20\x14(\n\x0c\n\x05\x06\0\x02\0\x03\x12\x03\x203:\n\r\n\
    \x05\x06\0\x02\0\x04\x12\x04!\x04$\x06\n\x11\n\t\x06\0\x02\0\x04\xb0\xca\
    \xbc\"\x12\x04!\x04$\x06\n+\n\x04\x06\0\x02\x01\x12\x04(\x02,\x03\x1a\
    \x1d\x20Gets\x20the\x20specified\x20project.\n\n\x0c\n\x05\x06\0\x02\x01\
    \x01\x12\x03(\x06\x10\n\x0c\n\x05\x06\0\x02\x01\x02\x12\x03(\x11\"\n\x0c\
    \n\x05\x06\0\x02\x01\x03\x12\x03(-4\n\r\n\x05\x06\0\x02\x01\x04\x12\x04)\
    \x04+\x06\n\x11\n\t\x06\0\x02\x01\x04\xb0\xca\xbc\"\x12\x04)\x04+\x06\n\
    \x1f\n\x04\x06\0\x02\x02\x12\x04/\x023\x03\x1a\x11\x20Lists\x20projects.\
    \n\n\x0c\n\x05\x06\0\x02\x02\x01\x12\x03/\x06\x12\n\x0c\n\x05\x06\0\x02\
    \x02\x02\x12\x03/\x13&\n\x0c\n\x05\x06\0\x02\x02\x03\x12\x03/1E\n\r\n\
    \x05\x06\0\x02\x02\x04\x12\x040\x042\x06\n\x11\n\t\x06\0\x02\x02\x04\xb0\
    \xca\xbc\"\x12\x040\x042\x06\n.\n\x04\x06\0\x02\x03\x12\x046\x02:\x03\
    \x1a\x20\x20Deletes\x20the\x20specified\x20project.\n\n\x0c\n\x05\x06\0\
    \x02\x03\x01\x12\x036\x06\x13\n\x0c\n\x05\x06\0\x02\x03\x02\x12\x036\x14\
    (\n\x0c\n\x05\x06\0\x02\x03\x03\x12\x0363H\n\r\n\x05\x06\0\x02\x03\x04\
    \x12\x047\x049\x06\n\x11\n\t\x06\0\x02\x03\x04\xb0\xca\xbc\"\x12\x047\
    \x049\x06\n.\n\x02\x04\0\x12\x04>\0A\x01\x1a\"\x20Request\x20to\x20creat\
    e\x20a\x20new\x20project.\n\n\n\n\x03\x04\0\x01\x12\x03>\x08\x1c\n%\n\
    \x04\x04\0\x02\0\x12\x03@\x02\x16\x1a\x18\x20The\x20project\x20to\x20cre\
    ate.\n\n\r\n\x05\x04\0\x02\0\x04\x12\x04@\x02>\x1e\n\x0c\n\x05\x04\0\x02\
    \0\x06\x12\x03@\x02\t\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03@\n\x11\n\x0c\n\
    \x05\x04\0\x02\0\x03\x12\x03@\x14\x15\n'\n\x02\x04\x01\x12\x04D\0G\x01\
    \x1a\x1b\x20Request\x20to\x20get\x20a\x20project.\n\n\n\n\x03\x04\x01\
    \x01\x12\x03D\x08\x19\nN\n\x04\x04\x01\x02\0\x12\x03F\x02\x12\x1aA\x20Th\
    e\x20name\x20of\x20the\x20project\x20in\x20the\x20form\x20of\x20`project\
    s/{PROJECT_ID}`.\n\n\r\n\x05\x04\x01\x02\0\x04\x12\x04F\x02D\x1b\n\x0c\n\
    \x05\x04\x01\x02\0\x05\x12\x03F\x02\x08\n\x0c\n\x05\x04\x01\x02\0\x01\
    \x12\x03F\t\r\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03F\x10\x11\n'\n\x02\
    \x04\x02\x12\x04J\0S\x01\x1a\x1b\x20Request\x20to\x20list\x20projects.\n\
    \n\n\n\x03\x04\x02\x01\x12\x03J\x08\x1b\n%\n\x04\x04\x02\x02\0\x12\x03L\
    \x02\x14\x1a\x18\x20The\x20filter\x20expression.\n\n\r\n\x05\x04\x02\x02\
    \0\x04\x12\x04L\x02J\x1d\n\x0c\n\x05\x04\x02\x02\0\x05\x12\x03L\x02\x08\
    \n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03L\t\x0f\n\x0c\n\x05\x04\x02\x02\0\
    \x03\x12\x03L\x12\x13\n8\n\x04\x04\x02\x02\x01\x12\x03O\x02\x16\x1a+\x20\
    Number\x20of\x20projects\x20to\x20return\x20in\x20the\x20list.\n\n\r\n\
    \x05\x04\x02\x02\x01\x04\x12\x04O\x02L\x14\n\x0c\n\x05\x04\x02\x02\x01\
    \x05\x12\x03O\x02\x07\n\x0c\n\x05\x04\x02\x02\x01\x01\x12\x03O\x08\x11\n\
    \x0c\n\x05\x04\x02\x02\x01\x03\x12\x03O\x14\x15\nI\n\x04\x04\x02\x02\x02\
    \x12\x03R\x02\x18\x1a<\x20Token\x20to\x20provide\x20to\x20skip\x20to\x20\
    a\x20particular\x20spot\x20in\x20the\x20list.\n\n\r\n\x05\x04\x02\x02\
    \x02\x04\x12\x04R\x02O\x16\n\x0c\n\x05\x04\x02\x02\x02\x05\x12\x03R\x02\
    \x08\n\x0c\n\x05\x04\x02\x02\x02\x01\x12\x03R\t\x13\n\x0c\n\x05\x04\x02\
    \x02\x02\x03\x12\x03R\x16\x17\n*\n\x02\x04\x03\x12\x04V\0Y\x01\x1a\x1e\
    \x20Request\x20to\x20delete\x20a\x20project.\n\n\n\n\x03\x04\x03\x01\x12\
    \x03V\x08\x1c\nN\n\x04\x04\x03\x02\0\x12\x03X\x02\x12\x1aA\x20The\x20nam\
    e\x20of\x20the\x20project\x20in\x20the\x20form\x20of\x20`projects/{PROJE\
    CT_ID}`.\n\n\r\n\x05\x04\x03\x02\0\x04\x12\x04X\x02V\x1e\n\x0c\n\x05\x04\
    \x03\x02\0\x05\x12\x03X\x02\x08\n\x0c\n\x05\x04\x03\x02\0\x01\x12\x03X\t\
    \r\n\x0c\n\x05\x04\x03\x02\0\x03\x12\x03X\x10\x11\n,\n\x02\x04\x04\x12\
    \x04\\\0d\x01\x1a\x20\x20Response\x20for\x20listing\x20projects.\n\n\n\n\
    \x03\x04\x04\x01\x12\x03\\\x08\x1c\n&\n\x04\x04\x04\x02\0\x12\x03^\x02\
    \x20\x1a\x19\x20The\x20projects\x20requested.\n\n\x0c\n\x05\x04\x04\x02\
    \0\x04\x12\x03^\x02\n\n\x0c\n\x05\x04\x04\x02\0\x06\x12\x03^\x0b\x12\n\
    \x0c\n\x05\x04\x04\x02\0\x01\x12\x03^\x13\x1b\n\x0c\n\x05\x04\x04\x02\0\
    \x03\x12\x03^\x1e\x1f\n\xa4\x01\n\x04\x04\x04\x02\x01\x12\x03c\x02\x1d\
    \x1a\x96\x01\x20The\x20next\x20pagination\x20token\x20in\x20the\x20list\
    \x20response.\x20It\x20should\x20be\x20used\x20as\n\x20`page_token`\x20f\
    or\x20the\x20following\x20request.\x20An\x20empty\x20value\x20means\x20n\
    o\x20more\n\x20results.\n\n\r\n\x05\x04\x04\x02\x01\x04\x12\x04c\x02^\
    \x20\n\x0c\n\x05\x04\x04\x02\x01\x05\x12\x03c\x02\x08\n\x0c\n\x05\x04\
    \x04\x02\x01\x01\x12\x03c\t\x18\n\x0c\n\x05\x04\x04\x02\x01\x03\x12\x03c\
    \x1b\x1c\n*\n\x02\x04\x05\x12\x04g\0j\x01\x1a\x1e\x20Describes\x20a\x20G\
    rafeas\x20project.\n\n\n\n\x03\x04\x05\x01\x12\x03g\x08\x0f\nN\n\x04\x04\
    \x05\x02\0\x12\x03i\x02\x12\x1aA\x20The\x20name\x20of\x20the\x20project\
    \x20in\x20the\x20form\x20of\x20`projects/{PROJECT_ID}`.\n\n\r\n\x05\x04\
    \x05\x02\0\x04\x12\x04i\x02g\x11\n\x0c\n\x05\x04\x05\x02\0\x05\x12\x03i\
    \x02\x08\n\x0c\n\x05\x04\x05\x02\0\x01\x12\x03i\t\r\n\x0c\n\x05\x04\x05\
    \x02\0\x03\x12\x03i\x10\x11b\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
