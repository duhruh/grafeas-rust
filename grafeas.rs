// This file is generated by rust-protobuf 2.6.0. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq,Clone,Default)]
pub struct Occurrence {
    // message fields
    pub name: ::std::string::String,
    pub resource: ::protobuf::SingularPtrField<Resource>,
    pub note_name: ::std::string::String,
    pub kind: super::common::NoteKind,
    pub remediation: ::std::string::String,
    pub create_time: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    pub update_time: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    // message oneof groups
    pub details: ::std::option::Option<Occurrence_oneof_details>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Occurrence {
    fn default() -> &'a Occurrence {
        <Occurrence as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum Occurrence_oneof_details {
    vulnerability(super::vulnerability::Details),
    build(super::build::Details),
    derived_image(super::image::Details),
    installation(super::package::Details),
    deployment(super::deployment::Details),
    discovered(super::discovery::Details),
    attestation(super::attestation::Details),
}

impl Occurrence {
    pub fn new() -> Occurrence {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // .grafeas.v1beta1.Resource resource = 2;


    pub fn get_resource(&self) -> &Resource {
        self.resource.as_ref().unwrap_or_else(|| Resource::default_instance())
    }
    pub fn clear_resource(&mut self) {
        self.resource.clear();
    }

    pub fn has_resource(&self) -> bool {
        self.resource.is_some()
    }

    // Param is passed by value, moved
    pub fn set_resource(&mut self, v: Resource) {
        self.resource = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_resource(&mut self) -> &mut Resource {
        if self.resource.is_none() {
            self.resource.set_default();
        }
        self.resource.as_mut().unwrap()
    }

    // Take field
    pub fn take_resource(&mut self) -> Resource {
        self.resource.take().unwrap_or_else(|| Resource::new())
    }

    // string note_name = 3;


    pub fn get_note_name(&self) -> &str {
        &self.note_name
    }
    pub fn clear_note_name(&mut self) {
        self.note_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_note_name(&mut self, v: ::std::string::String) {
        self.note_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_note_name(&mut self) -> &mut ::std::string::String {
        &mut self.note_name
    }

    // Take field
    pub fn take_note_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.note_name, ::std::string::String::new())
    }

    // .grafeas.v1beta1.NoteKind kind = 4;


    pub fn get_kind(&self) -> super::common::NoteKind {
        self.kind
    }
    pub fn clear_kind(&mut self) {
        self.kind = super::common::NoteKind::NOTE_KIND_UNSPECIFIED;
    }

    // Param is passed by value, moved
    pub fn set_kind(&mut self, v: super::common::NoteKind) {
        self.kind = v;
    }

    // string remediation = 5;


    pub fn get_remediation(&self) -> &str {
        &self.remediation
    }
    pub fn clear_remediation(&mut self) {
        self.remediation.clear();
    }

    // Param is passed by value, moved
    pub fn set_remediation(&mut self, v: ::std::string::String) {
        self.remediation = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_remediation(&mut self) -> &mut ::std::string::String {
        &mut self.remediation
    }

    // Take field
    pub fn take_remediation(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.remediation, ::std::string::String::new())
    }

    // .google.protobuf.Timestamp create_time = 6;


    pub fn get_create_time(&self) -> &::protobuf::well_known_types::Timestamp {
        self.create_time.as_ref().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::default_instance())
    }
    pub fn clear_create_time(&mut self) {
        self.create_time.clear();
    }

    pub fn has_create_time(&self) -> bool {
        self.create_time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_create_time(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.create_time = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_create_time(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.create_time.is_none() {
            self.create_time.set_default();
        }
        self.create_time.as_mut().unwrap()
    }

    // Take field
    pub fn take_create_time(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.create_time.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }

    // .google.protobuf.Timestamp update_time = 7;


    pub fn get_update_time(&self) -> &::protobuf::well_known_types::Timestamp {
        self.update_time.as_ref().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::default_instance())
    }
    pub fn clear_update_time(&mut self) {
        self.update_time.clear();
    }

    pub fn has_update_time(&self) -> bool {
        self.update_time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_update_time(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.update_time = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_update_time(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.update_time.is_none() {
            self.update_time.set_default();
        }
        self.update_time.as_mut().unwrap()
    }

    // Take field
    pub fn take_update_time(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.update_time.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }

    // .grafeas.v1beta1.vulnerability.Details vulnerability = 8;


    pub fn get_vulnerability(&self) -> &super::vulnerability::Details {
        match self.details {
            ::std::option::Option::Some(Occurrence_oneof_details::vulnerability(ref v)) => v,
            _ => super::vulnerability::Details::default_instance(),
        }
    }
    pub fn clear_vulnerability(&mut self) {
        self.details = ::std::option::Option::None;
    }

    pub fn has_vulnerability(&self) -> bool {
        match self.details {
            ::std::option::Option::Some(Occurrence_oneof_details::vulnerability(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_vulnerability(&mut self, v: super::vulnerability::Details) {
        self.details = ::std::option::Option::Some(Occurrence_oneof_details::vulnerability(v))
    }

    // Mutable pointer to the field.
    pub fn mut_vulnerability(&mut self) -> &mut super::vulnerability::Details {
        if let ::std::option::Option::Some(Occurrence_oneof_details::vulnerability(_)) = self.details {
        } else {
            self.details = ::std::option::Option::Some(Occurrence_oneof_details::vulnerability(super::vulnerability::Details::new()));
        }
        match self.details {
            ::std::option::Option::Some(Occurrence_oneof_details::vulnerability(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_vulnerability(&mut self) -> super::vulnerability::Details {
        if self.has_vulnerability() {
            match self.details.take() {
                ::std::option::Option::Some(Occurrence_oneof_details::vulnerability(v)) => v,
                _ => panic!(),
            }
        } else {
            super::vulnerability::Details::new()
        }
    }

    // .grafeas.v1beta1.build.Details build = 9;


    pub fn get_build(&self) -> &super::build::Details {
        match self.details {
            ::std::option::Option::Some(Occurrence_oneof_details::build(ref v)) => v,
            _ => super::build::Details::default_instance(),
        }
    }
    pub fn clear_build(&mut self) {
        self.details = ::std::option::Option::None;
    }

    pub fn has_build(&self) -> bool {
        match self.details {
            ::std::option::Option::Some(Occurrence_oneof_details::build(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_build(&mut self, v: super::build::Details) {
        self.details = ::std::option::Option::Some(Occurrence_oneof_details::build(v))
    }

    // Mutable pointer to the field.
    pub fn mut_build(&mut self) -> &mut super::build::Details {
        if let ::std::option::Option::Some(Occurrence_oneof_details::build(_)) = self.details {
        } else {
            self.details = ::std::option::Option::Some(Occurrence_oneof_details::build(super::build::Details::new()));
        }
        match self.details {
            ::std::option::Option::Some(Occurrence_oneof_details::build(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_build(&mut self) -> super::build::Details {
        if self.has_build() {
            match self.details.take() {
                ::std::option::Option::Some(Occurrence_oneof_details::build(v)) => v,
                _ => panic!(),
            }
        } else {
            super::build::Details::new()
        }
    }

    // .grafeas.v1beta1.image.Details derived_image = 10;


    pub fn get_derived_image(&self) -> &super::image::Details {
        match self.details {
            ::std::option::Option::Some(Occurrence_oneof_details::derived_image(ref v)) => v,
            _ => super::image::Details::default_instance(),
        }
    }
    pub fn clear_derived_image(&mut self) {
        self.details = ::std::option::Option::None;
    }

    pub fn has_derived_image(&self) -> bool {
        match self.details {
            ::std::option::Option::Some(Occurrence_oneof_details::derived_image(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_derived_image(&mut self, v: super::image::Details) {
        self.details = ::std::option::Option::Some(Occurrence_oneof_details::derived_image(v))
    }

    // Mutable pointer to the field.
    pub fn mut_derived_image(&mut self) -> &mut super::image::Details {
        if let ::std::option::Option::Some(Occurrence_oneof_details::derived_image(_)) = self.details {
        } else {
            self.details = ::std::option::Option::Some(Occurrence_oneof_details::derived_image(super::image::Details::new()));
        }
        match self.details {
            ::std::option::Option::Some(Occurrence_oneof_details::derived_image(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_derived_image(&mut self) -> super::image::Details {
        if self.has_derived_image() {
            match self.details.take() {
                ::std::option::Option::Some(Occurrence_oneof_details::derived_image(v)) => v,
                _ => panic!(),
            }
        } else {
            super::image::Details::new()
        }
    }

    // .grafeas.v1beta1.package.Details installation = 11;


    pub fn get_installation(&self) -> &super::package::Details {
        match self.details {
            ::std::option::Option::Some(Occurrence_oneof_details::installation(ref v)) => v,
            _ => super::package::Details::default_instance(),
        }
    }
    pub fn clear_installation(&mut self) {
        self.details = ::std::option::Option::None;
    }

    pub fn has_installation(&self) -> bool {
        match self.details {
            ::std::option::Option::Some(Occurrence_oneof_details::installation(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_installation(&mut self, v: super::package::Details) {
        self.details = ::std::option::Option::Some(Occurrence_oneof_details::installation(v))
    }

    // Mutable pointer to the field.
    pub fn mut_installation(&mut self) -> &mut super::package::Details {
        if let ::std::option::Option::Some(Occurrence_oneof_details::installation(_)) = self.details {
        } else {
            self.details = ::std::option::Option::Some(Occurrence_oneof_details::installation(super::package::Details::new()));
        }
        match self.details {
            ::std::option::Option::Some(Occurrence_oneof_details::installation(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_installation(&mut self) -> super::package::Details {
        if self.has_installation() {
            match self.details.take() {
                ::std::option::Option::Some(Occurrence_oneof_details::installation(v)) => v,
                _ => panic!(),
            }
        } else {
            super::package::Details::new()
        }
    }

    // .grafeas.v1beta1.deployment.Details deployment = 12;


    pub fn get_deployment(&self) -> &super::deployment::Details {
        match self.details {
            ::std::option::Option::Some(Occurrence_oneof_details::deployment(ref v)) => v,
            _ => super::deployment::Details::default_instance(),
        }
    }
    pub fn clear_deployment(&mut self) {
        self.details = ::std::option::Option::None;
    }

    pub fn has_deployment(&self) -> bool {
        match self.details {
            ::std::option::Option::Some(Occurrence_oneof_details::deployment(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_deployment(&mut self, v: super::deployment::Details) {
        self.details = ::std::option::Option::Some(Occurrence_oneof_details::deployment(v))
    }

    // Mutable pointer to the field.
    pub fn mut_deployment(&mut self) -> &mut super::deployment::Details {
        if let ::std::option::Option::Some(Occurrence_oneof_details::deployment(_)) = self.details {
        } else {
            self.details = ::std::option::Option::Some(Occurrence_oneof_details::deployment(super::deployment::Details::new()));
        }
        match self.details {
            ::std::option::Option::Some(Occurrence_oneof_details::deployment(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_deployment(&mut self) -> super::deployment::Details {
        if self.has_deployment() {
            match self.details.take() {
                ::std::option::Option::Some(Occurrence_oneof_details::deployment(v)) => v,
                _ => panic!(),
            }
        } else {
            super::deployment::Details::new()
        }
    }

    // .grafeas.v1beta1.discovery.Details discovered = 13;


    pub fn get_discovered(&self) -> &super::discovery::Details {
        match self.details {
            ::std::option::Option::Some(Occurrence_oneof_details::discovered(ref v)) => v,
            _ => super::discovery::Details::default_instance(),
        }
    }
    pub fn clear_discovered(&mut self) {
        self.details = ::std::option::Option::None;
    }

    pub fn has_discovered(&self) -> bool {
        match self.details {
            ::std::option::Option::Some(Occurrence_oneof_details::discovered(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_discovered(&mut self, v: super::discovery::Details) {
        self.details = ::std::option::Option::Some(Occurrence_oneof_details::discovered(v))
    }

    // Mutable pointer to the field.
    pub fn mut_discovered(&mut self) -> &mut super::discovery::Details {
        if let ::std::option::Option::Some(Occurrence_oneof_details::discovered(_)) = self.details {
        } else {
            self.details = ::std::option::Option::Some(Occurrence_oneof_details::discovered(super::discovery::Details::new()));
        }
        match self.details {
            ::std::option::Option::Some(Occurrence_oneof_details::discovered(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_discovered(&mut self) -> super::discovery::Details {
        if self.has_discovered() {
            match self.details.take() {
                ::std::option::Option::Some(Occurrence_oneof_details::discovered(v)) => v,
                _ => panic!(),
            }
        } else {
            super::discovery::Details::new()
        }
    }

    // .grafeas.v1beta1.attestation.Details attestation = 14;


    pub fn get_attestation(&self) -> &super::attestation::Details {
        match self.details {
            ::std::option::Option::Some(Occurrence_oneof_details::attestation(ref v)) => v,
            _ => super::attestation::Details::default_instance(),
        }
    }
    pub fn clear_attestation(&mut self) {
        self.details = ::std::option::Option::None;
    }

    pub fn has_attestation(&self) -> bool {
        match self.details {
            ::std::option::Option::Some(Occurrence_oneof_details::attestation(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_attestation(&mut self, v: super::attestation::Details) {
        self.details = ::std::option::Option::Some(Occurrence_oneof_details::attestation(v))
    }

    // Mutable pointer to the field.
    pub fn mut_attestation(&mut self) -> &mut super::attestation::Details {
        if let ::std::option::Option::Some(Occurrence_oneof_details::attestation(_)) = self.details {
        } else {
            self.details = ::std::option::Option::Some(Occurrence_oneof_details::attestation(super::attestation::Details::new()));
        }
        match self.details {
            ::std::option::Option::Some(Occurrence_oneof_details::attestation(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_attestation(&mut self) -> super::attestation::Details {
        if self.has_attestation() {
            match self.details.take() {
                ::std::option::Option::Some(Occurrence_oneof_details::attestation(v)) => v,
                _ => panic!(),
            }
        } else {
            super::attestation::Details::new()
        }
    }
}

impl ::protobuf::Message for Occurrence {
    fn is_initialized(&self) -> bool {
        for v in &self.resource {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.create_time {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.update_time {
            if !v.is_initialized() {
                return false;
            }
        };
        if let Some(Occurrence_oneof_details::vulnerability(ref v)) = self.details {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(Occurrence_oneof_details::build(ref v)) = self.details {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(Occurrence_oneof_details::derived_image(ref v)) = self.details {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(Occurrence_oneof_details::installation(ref v)) = self.details {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(Occurrence_oneof_details::deployment(ref v)) = self.details {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(Occurrence_oneof_details::discovered(ref v)) = self.details {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(Occurrence_oneof_details::attestation(ref v)) = self.details {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.resource)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.note_name)?;
                },
                4 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.kind, 4, &mut self.unknown_fields)?
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.remediation)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.create_time)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.update_time)?;
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.details = ::std::option::Option::Some(Occurrence_oneof_details::vulnerability(is.read_message()?));
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.details = ::std::option::Option::Some(Occurrence_oneof_details::build(is.read_message()?));
                },
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.details = ::std::option::Option::Some(Occurrence_oneof_details::derived_image(is.read_message()?));
                },
                11 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.details = ::std::option::Option::Some(Occurrence_oneof_details::installation(is.read_message()?));
                },
                12 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.details = ::std::option::Option::Some(Occurrence_oneof_details::deployment(is.read_message()?));
                },
                13 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.details = ::std::option::Option::Some(Occurrence_oneof_details::discovered(is.read_message()?));
                },
                14 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.details = ::std::option::Option::Some(Occurrence_oneof_details::attestation(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if let Some(ref v) = self.resource.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.note_name.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.note_name);
        }
        if self.kind != super::common::NoteKind::NOTE_KIND_UNSPECIFIED {
            my_size += ::protobuf::rt::enum_size(4, self.kind);
        }
        if !self.remediation.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.remediation);
        }
        if let Some(ref v) = self.create_time.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.update_time.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let ::std::option::Option::Some(ref v) = self.details {
            match v {
                &Occurrence_oneof_details::vulnerability(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &Occurrence_oneof_details::build(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &Occurrence_oneof_details::derived_image(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &Occurrence_oneof_details::installation(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &Occurrence_oneof_details::deployment(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &Occurrence_oneof_details::discovered(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &Occurrence_oneof_details::attestation(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if let Some(ref v) = self.resource.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.note_name.is_empty() {
            os.write_string(3, &self.note_name)?;
        }
        if self.kind != super::common::NoteKind::NOTE_KIND_UNSPECIFIED {
            os.write_enum(4, self.kind.value())?;
        }
        if !self.remediation.is_empty() {
            os.write_string(5, &self.remediation)?;
        }
        if let Some(ref v) = self.create_time.as_ref() {
            os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.update_time.as_ref() {
            os.write_tag(7, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let ::std::option::Option::Some(ref v) = self.details {
            match v {
                &Occurrence_oneof_details::vulnerability(ref v) => {
                    os.write_tag(8, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &Occurrence_oneof_details::build(ref v) => {
                    os.write_tag(9, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &Occurrence_oneof_details::derived_image(ref v) => {
                    os.write_tag(10, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &Occurrence_oneof_details::installation(ref v) => {
                    os.write_tag(11, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &Occurrence_oneof_details::deployment(ref v) => {
                    os.write_tag(12, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &Occurrence_oneof_details::discovered(ref v) => {
                    os.write_tag(13, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &Occurrence_oneof_details::attestation(ref v) => {
                    os.write_tag(14, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Occurrence {
        Occurrence::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "name",
                    |m: &Occurrence| { &m.name },
                    |m: &mut Occurrence| { &mut m.name },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Resource>>(
                    "resource",
                    |m: &Occurrence| { &m.resource },
                    |m: &mut Occurrence| { &mut m.resource },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "note_name",
                    |m: &Occurrence| { &m.note_name },
                    |m: &mut Occurrence| { &mut m.note_name },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<super::common::NoteKind>>(
                    "kind",
                    |m: &Occurrence| { &m.kind },
                    |m: &mut Occurrence| { &mut m.kind },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "remediation",
                    |m: &Occurrence| { &m.remediation },
                    |m: &mut Occurrence| { &mut m.remediation },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                    "create_time",
                    |m: &Occurrence| { &m.create_time },
                    |m: &mut Occurrence| { &mut m.create_time },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                    "update_time",
                    |m: &Occurrence| { &m.update_time },
                    |m: &mut Occurrence| { &mut m.update_time },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::vulnerability::Details>(
                    "vulnerability",
                    Occurrence::has_vulnerability,
                    Occurrence::get_vulnerability,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::build::Details>(
                    "build",
                    Occurrence::has_build,
                    Occurrence::get_build,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::image::Details>(
                    "derived_image",
                    Occurrence::has_derived_image,
                    Occurrence::get_derived_image,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::package::Details>(
                    "installation",
                    Occurrence::has_installation,
                    Occurrence::get_installation,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::deployment::Details>(
                    "deployment",
                    Occurrence::has_deployment,
                    Occurrence::get_deployment,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::discovery::Details>(
                    "discovered",
                    Occurrence::has_discovered,
                    Occurrence::get_discovered,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::attestation::Details>(
                    "attestation",
                    Occurrence::has_attestation,
                    Occurrence::get_attestation,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Occurrence>(
                    "Occurrence",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Occurrence {
        static mut instance: ::protobuf::lazy::Lazy<Occurrence> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Occurrence,
        };
        unsafe {
            instance.get(Occurrence::new)
        }
    }
}

impl ::protobuf::Clear for Occurrence {
    fn clear(&mut self) {
        self.name.clear();
        self.resource.clear();
        self.note_name.clear();
        self.kind = super::common::NoteKind::NOTE_KIND_UNSPECIFIED;
        self.remediation.clear();
        self.create_time.clear();
        self.update_time.clear();
        self.details = ::std::option::Option::None;
        self.details = ::std::option::Option::None;
        self.details = ::std::option::Option::None;
        self.details = ::std::option::Option::None;
        self.details = ::std::option::Option::None;
        self.details = ::std::option::Option::None;
        self.details = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Occurrence {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Occurrence {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Resource {
    // message fields
    pub name: ::std::string::String,
    pub uri: ::std::string::String,
    pub content_hash: ::protobuf::SingularPtrField<super::provenance::Hash>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Resource {
    fn default() -> &'a Resource {
        <Resource as ::protobuf::Message>::default_instance()
    }
}

impl Resource {
    pub fn new() -> Resource {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // string uri = 2;


    pub fn get_uri(&self) -> &str {
        &self.uri
    }
    pub fn clear_uri(&mut self) {
        self.uri.clear();
    }

    // Param is passed by value, moved
    pub fn set_uri(&mut self, v: ::std::string::String) {
        self.uri = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_uri(&mut self) -> &mut ::std::string::String {
        &mut self.uri
    }

    // Take field
    pub fn take_uri(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.uri, ::std::string::String::new())
    }

    // .grafeas.v1beta1.provenance.Hash content_hash = 3;


    pub fn get_content_hash(&self) -> &super::provenance::Hash {
        self.content_hash.as_ref().unwrap_or_else(|| super::provenance::Hash::default_instance())
    }
    pub fn clear_content_hash(&mut self) {
        self.content_hash.clear();
    }

    pub fn has_content_hash(&self) -> bool {
        self.content_hash.is_some()
    }

    // Param is passed by value, moved
    pub fn set_content_hash(&mut self, v: super::provenance::Hash) {
        self.content_hash = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_content_hash(&mut self) -> &mut super::provenance::Hash {
        if self.content_hash.is_none() {
            self.content_hash.set_default();
        }
        self.content_hash.as_mut().unwrap()
    }

    // Take field
    pub fn take_content_hash(&mut self) -> super::provenance::Hash {
        self.content_hash.take().unwrap_or_else(|| super::provenance::Hash::new())
    }
}

impl ::protobuf::Message for Resource {
    fn is_initialized(&self) -> bool {
        for v in &self.content_hash {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.uri)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.content_hash)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if !self.uri.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.uri);
        }
        if let Some(ref v) = self.content_hash.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if !self.uri.is_empty() {
            os.write_string(2, &self.uri)?;
        }
        if let Some(ref v) = self.content_hash.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Resource {
        Resource::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "name",
                    |m: &Resource| { &m.name },
                    |m: &mut Resource| { &mut m.name },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "uri",
                    |m: &Resource| { &m.uri },
                    |m: &mut Resource| { &mut m.uri },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::provenance::Hash>>(
                    "content_hash",
                    |m: &Resource| { &m.content_hash },
                    |m: &mut Resource| { &mut m.content_hash },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Resource>(
                    "Resource",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Resource {
        static mut instance: ::protobuf::lazy::Lazy<Resource> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Resource,
        };
        unsafe {
            instance.get(Resource::new)
        }
    }
}

impl ::protobuf::Clear for Resource {
    fn clear(&mut self) {
        self.name.clear();
        self.uri.clear();
        self.content_hash.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Resource {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Resource {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Note {
    // message fields
    pub name: ::std::string::String,
    pub short_description: ::std::string::String,
    pub long_description: ::std::string::String,
    pub kind: super::common::NoteKind,
    pub related_url: ::protobuf::RepeatedField<super::common::RelatedUrl>,
    pub expiration_time: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    pub create_time: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    pub update_time: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    pub related_note_names: ::protobuf::RepeatedField<::std::string::String>,
    // message oneof groups
    pub field_type: ::std::option::Option<Note_oneof_type>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Note {
    fn default() -> &'a Note {
        <Note as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum Note_oneof_type {
    vulnerability(super::vulnerability::Vulnerability),
    build(super::build::Build),
    base_image(super::image::Basis),
    package(super::package::Package),
    deployable(super::deployment::Deployable),
    discovery(super::discovery::Discovery),
    attestation_authority(super::attestation::Authority),
}

impl Note {
    pub fn new() -> Note {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // string short_description = 2;


    pub fn get_short_description(&self) -> &str {
        &self.short_description
    }
    pub fn clear_short_description(&mut self) {
        self.short_description.clear();
    }

    // Param is passed by value, moved
    pub fn set_short_description(&mut self, v: ::std::string::String) {
        self.short_description = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_short_description(&mut self) -> &mut ::std::string::String {
        &mut self.short_description
    }

    // Take field
    pub fn take_short_description(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.short_description, ::std::string::String::new())
    }

    // string long_description = 3;


    pub fn get_long_description(&self) -> &str {
        &self.long_description
    }
    pub fn clear_long_description(&mut self) {
        self.long_description.clear();
    }

    // Param is passed by value, moved
    pub fn set_long_description(&mut self, v: ::std::string::String) {
        self.long_description = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_long_description(&mut self) -> &mut ::std::string::String {
        &mut self.long_description
    }

    // Take field
    pub fn take_long_description(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.long_description, ::std::string::String::new())
    }

    // .grafeas.v1beta1.NoteKind kind = 4;


    pub fn get_kind(&self) -> super::common::NoteKind {
        self.kind
    }
    pub fn clear_kind(&mut self) {
        self.kind = super::common::NoteKind::NOTE_KIND_UNSPECIFIED;
    }

    // Param is passed by value, moved
    pub fn set_kind(&mut self, v: super::common::NoteKind) {
        self.kind = v;
    }

    // repeated .grafeas.v1beta1.RelatedUrl related_url = 5;


    pub fn get_related_url(&self) -> &[super::common::RelatedUrl] {
        &self.related_url
    }
    pub fn clear_related_url(&mut self) {
        self.related_url.clear();
    }

    // Param is passed by value, moved
    pub fn set_related_url(&mut self, v: ::protobuf::RepeatedField<super::common::RelatedUrl>) {
        self.related_url = v;
    }

    // Mutable pointer to the field.
    pub fn mut_related_url(&mut self) -> &mut ::protobuf::RepeatedField<super::common::RelatedUrl> {
        &mut self.related_url
    }

    // Take field
    pub fn take_related_url(&mut self) -> ::protobuf::RepeatedField<super::common::RelatedUrl> {
        ::std::mem::replace(&mut self.related_url, ::protobuf::RepeatedField::new())
    }

    // .google.protobuf.Timestamp expiration_time = 6;


    pub fn get_expiration_time(&self) -> &::protobuf::well_known_types::Timestamp {
        self.expiration_time.as_ref().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::default_instance())
    }
    pub fn clear_expiration_time(&mut self) {
        self.expiration_time.clear();
    }

    pub fn has_expiration_time(&self) -> bool {
        self.expiration_time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_expiration_time(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.expiration_time = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_expiration_time(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.expiration_time.is_none() {
            self.expiration_time.set_default();
        }
        self.expiration_time.as_mut().unwrap()
    }

    // Take field
    pub fn take_expiration_time(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.expiration_time.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }

    // .google.protobuf.Timestamp create_time = 7;


    pub fn get_create_time(&self) -> &::protobuf::well_known_types::Timestamp {
        self.create_time.as_ref().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::default_instance())
    }
    pub fn clear_create_time(&mut self) {
        self.create_time.clear();
    }

    pub fn has_create_time(&self) -> bool {
        self.create_time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_create_time(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.create_time = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_create_time(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.create_time.is_none() {
            self.create_time.set_default();
        }
        self.create_time.as_mut().unwrap()
    }

    // Take field
    pub fn take_create_time(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.create_time.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }

    // .google.protobuf.Timestamp update_time = 8;


    pub fn get_update_time(&self) -> &::protobuf::well_known_types::Timestamp {
        self.update_time.as_ref().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::default_instance())
    }
    pub fn clear_update_time(&mut self) {
        self.update_time.clear();
    }

    pub fn has_update_time(&self) -> bool {
        self.update_time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_update_time(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.update_time = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_update_time(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.update_time.is_none() {
            self.update_time.set_default();
        }
        self.update_time.as_mut().unwrap()
    }

    // Take field
    pub fn take_update_time(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.update_time.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }

    // repeated string related_note_names = 9;


    pub fn get_related_note_names(&self) -> &[::std::string::String] {
        &self.related_note_names
    }
    pub fn clear_related_note_names(&mut self) {
        self.related_note_names.clear();
    }

    // Param is passed by value, moved
    pub fn set_related_note_names(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.related_note_names = v;
    }

    // Mutable pointer to the field.
    pub fn mut_related_note_names(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.related_note_names
    }

    // Take field
    pub fn take_related_note_names(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.related_note_names, ::protobuf::RepeatedField::new())
    }

    // .grafeas.v1beta1.vulnerability.Vulnerability vulnerability = 10;


    pub fn get_vulnerability(&self) -> &super::vulnerability::Vulnerability {
        match self.field_type {
            ::std::option::Option::Some(Note_oneof_type::vulnerability(ref v)) => v,
            _ => super::vulnerability::Vulnerability::default_instance(),
        }
    }
    pub fn clear_vulnerability(&mut self) {
        self.field_type = ::std::option::Option::None;
    }

    pub fn has_vulnerability(&self) -> bool {
        match self.field_type {
            ::std::option::Option::Some(Note_oneof_type::vulnerability(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_vulnerability(&mut self, v: super::vulnerability::Vulnerability) {
        self.field_type = ::std::option::Option::Some(Note_oneof_type::vulnerability(v))
    }

    // Mutable pointer to the field.
    pub fn mut_vulnerability(&mut self) -> &mut super::vulnerability::Vulnerability {
        if let ::std::option::Option::Some(Note_oneof_type::vulnerability(_)) = self.field_type {
        } else {
            self.field_type = ::std::option::Option::Some(Note_oneof_type::vulnerability(super::vulnerability::Vulnerability::new()));
        }
        match self.field_type {
            ::std::option::Option::Some(Note_oneof_type::vulnerability(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_vulnerability(&mut self) -> super::vulnerability::Vulnerability {
        if self.has_vulnerability() {
            match self.field_type.take() {
                ::std::option::Option::Some(Note_oneof_type::vulnerability(v)) => v,
                _ => panic!(),
            }
        } else {
            super::vulnerability::Vulnerability::new()
        }
    }

    // .grafeas.v1beta1.build.Build build = 11;


    pub fn get_build(&self) -> &super::build::Build {
        match self.field_type {
            ::std::option::Option::Some(Note_oneof_type::build(ref v)) => v,
            _ => super::build::Build::default_instance(),
        }
    }
    pub fn clear_build(&mut self) {
        self.field_type = ::std::option::Option::None;
    }

    pub fn has_build(&self) -> bool {
        match self.field_type {
            ::std::option::Option::Some(Note_oneof_type::build(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_build(&mut self, v: super::build::Build) {
        self.field_type = ::std::option::Option::Some(Note_oneof_type::build(v))
    }

    // Mutable pointer to the field.
    pub fn mut_build(&mut self) -> &mut super::build::Build {
        if let ::std::option::Option::Some(Note_oneof_type::build(_)) = self.field_type {
        } else {
            self.field_type = ::std::option::Option::Some(Note_oneof_type::build(super::build::Build::new()));
        }
        match self.field_type {
            ::std::option::Option::Some(Note_oneof_type::build(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_build(&mut self) -> super::build::Build {
        if self.has_build() {
            match self.field_type.take() {
                ::std::option::Option::Some(Note_oneof_type::build(v)) => v,
                _ => panic!(),
            }
        } else {
            super::build::Build::new()
        }
    }

    // .grafeas.v1beta1.image.Basis base_image = 12;


    pub fn get_base_image(&self) -> &super::image::Basis {
        match self.field_type {
            ::std::option::Option::Some(Note_oneof_type::base_image(ref v)) => v,
            _ => super::image::Basis::default_instance(),
        }
    }
    pub fn clear_base_image(&mut self) {
        self.field_type = ::std::option::Option::None;
    }

    pub fn has_base_image(&self) -> bool {
        match self.field_type {
            ::std::option::Option::Some(Note_oneof_type::base_image(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_base_image(&mut self, v: super::image::Basis) {
        self.field_type = ::std::option::Option::Some(Note_oneof_type::base_image(v))
    }

    // Mutable pointer to the field.
    pub fn mut_base_image(&mut self) -> &mut super::image::Basis {
        if let ::std::option::Option::Some(Note_oneof_type::base_image(_)) = self.field_type {
        } else {
            self.field_type = ::std::option::Option::Some(Note_oneof_type::base_image(super::image::Basis::new()));
        }
        match self.field_type {
            ::std::option::Option::Some(Note_oneof_type::base_image(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_base_image(&mut self) -> super::image::Basis {
        if self.has_base_image() {
            match self.field_type.take() {
                ::std::option::Option::Some(Note_oneof_type::base_image(v)) => v,
                _ => panic!(),
            }
        } else {
            super::image::Basis::new()
        }
    }

    // .grafeas.v1beta1.package.Package package = 13;


    pub fn get_package(&self) -> &super::package::Package {
        match self.field_type {
            ::std::option::Option::Some(Note_oneof_type::package(ref v)) => v,
            _ => super::package::Package::default_instance(),
        }
    }
    pub fn clear_package(&mut self) {
        self.field_type = ::std::option::Option::None;
    }

    pub fn has_package(&self) -> bool {
        match self.field_type {
            ::std::option::Option::Some(Note_oneof_type::package(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_package(&mut self, v: super::package::Package) {
        self.field_type = ::std::option::Option::Some(Note_oneof_type::package(v))
    }

    // Mutable pointer to the field.
    pub fn mut_package(&mut self) -> &mut super::package::Package {
        if let ::std::option::Option::Some(Note_oneof_type::package(_)) = self.field_type {
        } else {
            self.field_type = ::std::option::Option::Some(Note_oneof_type::package(super::package::Package::new()));
        }
        match self.field_type {
            ::std::option::Option::Some(Note_oneof_type::package(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_package(&mut self) -> super::package::Package {
        if self.has_package() {
            match self.field_type.take() {
                ::std::option::Option::Some(Note_oneof_type::package(v)) => v,
                _ => panic!(),
            }
        } else {
            super::package::Package::new()
        }
    }

    // .grafeas.v1beta1.deployment.Deployable deployable = 14;


    pub fn get_deployable(&self) -> &super::deployment::Deployable {
        match self.field_type {
            ::std::option::Option::Some(Note_oneof_type::deployable(ref v)) => v,
            _ => super::deployment::Deployable::default_instance(),
        }
    }
    pub fn clear_deployable(&mut self) {
        self.field_type = ::std::option::Option::None;
    }

    pub fn has_deployable(&self) -> bool {
        match self.field_type {
            ::std::option::Option::Some(Note_oneof_type::deployable(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_deployable(&mut self, v: super::deployment::Deployable) {
        self.field_type = ::std::option::Option::Some(Note_oneof_type::deployable(v))
    }

    // Mutable pointer to the field.
    pub fn mut_deployable(&mut self) -> &mut super::deployment::Deployable {
        if let ::std::option::Option::Some(Note_oneof_type::deployable(_)) = self.field_type {
        } else {
            self.field_type = ::std::option::Option::Some(Note_oneof_type::deployable(super::deployment::Deployable::new()));
        }
        match self.field_type {
            ::std::option::Option::Some(Note_oneof_type::deployable(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_deployable(&mut self) -> super::deployment::Deployable {
        if self.has_deployable() {
            match self.field_type.take() {
                ::std::option::Option::Some(Note_oneof_type::deployable(v)) => v,
                _ => panic!(),
            }
        } else {
            super::deployment::Deployable::new()
        }
    }

    // .grafeas.v1beta1.discovery.Discovery discovery = 15;


    pub fn get_discovery(&self) -> &super::discovery::Discovery {
        match self.field_type {
            ::std::option::Option::Some(Note_oneof_type::discovery(ref v)) => v,
            _ => super::discovery::Discovery::default_instance(),
        }
    }
    pub fn clear_discovery(&mut self) {
        self.field_type = ::std::option::Option::None;
    }

    pub fn has_discovery(&self) -> bool {
        match self.field_type {
            ::std::option::Option::Some(Note_oneof_type::discovery(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_discovery(&mut self, v: super::discovery::Discovery) {
        self.field_type = ::std::option::Option::Some(Note_oneof_type::discovery(v))
    }

    // Mutable pointer to the field.
    pub fn mut_discovery(&mut self) -> &mut super::discovery::Discovery {
        if let ::std::option::Option::Some(Note_oneof_type::discovery(_)) = self.field_type {
        } else {
            self.field_type = ::std::option::Option::Some(Note_oneof_type::discovery(super::discovery::Discovery::new()));
        }
        match self.field_type {
            ::std::option::Option::Some(Note_oneof_type::discovery(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_discovery(&mut self) -> super::discovery::Discovery {
        if self.has_discovery() {
            match self.field_type.take() {
                ::std::option::Option::Some(Note_oneof_type::discovery(v)) => v,
                _ => panic!(),
            }
        } else {
            super::discovery::Discovery::new()
        }
    }

    // .grafeas.v1beta1.attestation.Authority attestation_authority = 16;


    pub fn get_attestation_authority(&self) -> &super::attestation::Authority {
        match self.field_type {
            ::std::option::Option::Some(Note_oneof_type::attestation_authority(ref v)) => v,
            _ => super::attestation::Authority::default_instance(),
        }
    }
    pub fn clear_attestation_authority(&mut self) {
        self.field_type = ::std::option::Option::None;
    }

    pub fn has_attestation_authority(&self) -> bool {
        match self.field_type {
            ::std::option::Option::Some(Note_oneof_type::attestation_authority(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_attestation_authority(&mut self, v: super::attestation::Authority) {
        self.field_type = ::std::option::Option::Some(Note_oneof_type::attestation_authority(v))
    }

    // Mutable pointer to the field.
    pub fn mut_attestation_authority(&mut self) -> &mut super::attestation::Authority {
        if let ::std::option::Option::Some(Note_oneof_type::attestation_authority(_)) = self.field_type {
        } else {
            self.field_type = ::std::option::Option::Some(Note_oneof_type::attestation_authority(super::attestation::Authority::new()));
        }
        match self.field_type {
            ::std::option::Option::Some(Note_oneof_type::attestation_authority(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_attestation_authority(&mut self) -> super::attestation::Authority {
        if self.has_attestation_authority() {
            match self.field_type.take() {
                ::std::option::Option::Some(Note_oneof_type::attestation_authority(v)) => v,
                _ => panic!(),
            }
        } else {
            super::attestation::Authority::new()
        }
    }
}

impl ::protobuf::Message for Note {
    fn is_initialized(&self) -> bool {
        for v in &self.related_url {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.expiration_time {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.create_time {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.update_time {
            if !v.is_initialized() {
                return false;
            }
        };
        if let Some(Note_oneof_type::vulnerability(ref v)) = self.field_type {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(Note_oneof_type::build(ref v)) = self.field_type {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(Note_oneof_type::base_image(ref v)) = self.field_type {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(Note_oneof_type::package(ref v)) = self.field_type {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(Note_oneof_type::deployable(ref v)) = self.field_type {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(Note_oneof_type::discovery(ref v)) = self.field_type {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(Note_oneof_type::attestation_authority(ref v)) = self.field_type {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.short_description)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.long_description)?;
                },
                4 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.kind, 4, &mut self.unknown_fields)?
                },
                5 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.related_url)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.expiration_time)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.create_time)?;
                },
                8 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.update_time)?;
                },
                9 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.related_note_names)?;
                },
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.field_type = ::std::option::Option::Some(Note_oneof_type::vulnerability(is.read_message()?));
                },
                11 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.field_type = ::std::option::Option::Some(Note_oneof_type::build(is.read_message()?));
                },
                12 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.field_type = ::std::option::Option::Some(Note_oneof_type::base_image(is.read_message()?));
                },
                13 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.field_type = ::std::option::Option::Some(Note_oneof_type::package(is.read_message()?));
                },
                14 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.field_type = ::std::option::Option::Some(Note_oneof_type::deployable(is.read_message()?));
                },
                15 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.field_type = ::std::option::Option::Some(Note_oneof_type::discovery(is.read_message()?));
                },
                16 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.field_type = ::std::option::Option::Some(Note_oneof_type::attestation_authority(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if !self.short_description.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.short_description);
        }
        if !self.long_description.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.long_description);
        }
        if self.kind != super::common::NoteKind::NOTE_KIND_UNSPECIFIED {
            my_size += ::protobuf::rt::enum_size(4, self.kind);
        }
        for value in &self.related_url {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(ref v) = self.expiration_time.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.create_time.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.update_time.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.related_note_names {
            my_size += ::protobuf::rt::string_size(9, &value);
        };
        if let ::std::option::Option::Some(ref v) = self.field_type {
            match v {
                &Note_oneof_type::vulnerability(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &Note_oneof_type::build(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &Note_oneof_type::base_image(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &Note_oneof_type::package(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &Note_oneof_type::deployable(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &Note_oneof_type::discovery(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &Note_oneof_type::attestation_authority(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if !self.short_description.is_empty() {
            os.write_string(2, &self.short_description)?;
        }
        if !self.long_description.is_empty() {
            os.write_string(3, &self.long_description)?;
        }
        if self.kind != super::common::NoteKind::NOTE_KIND_UNSPECIFIED {
            os.write_enum(4, self.kind.value())?;
        }
        for v in &self.related_url {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(ref v) = self.expiration_time.as_ref() {
            os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.create_time.as_ref() {
            os.write_tag(7, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.update_time.as_ref() {
            os.write_tag(8, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.related_note_names {
            os.write_string(9, &v)?;
        };
        if let ::std::option::Option::Some(ref v) = self.field_type {
            match v {
                &Note_oneof_type::vulnerability(ref v) => {
                    os.write_tag(10, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &Note_oneof_type::build(ref v) => {
                    os.write_tag(11, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &Note_oneof_type::base_image(ref v) => {
                    os.write_tag(12, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &Note_oneof_type::package(ref v) => {
                    os.write_tag(13, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &Note_oneof_type::deployable(ref v) => {
                    os.write_tag(14, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &Note_oneof_type::discovery(ref v) => {
                    os.write_tag(15, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &Note_oneof_type::attestation_authority(ref v) => {
                    os.write_tag(16, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Note {
        Note::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "name",
                    |m: &Note| { &m.name },
                    |m: &mut Note| { &mut m.name },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "short_description",
                    |m: &Note| { &m.short_description },
                    |m: &mut Note| { &mut m.short_description },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "long_description",
                    |m: &Note| { &m.long_description },
                    |m: &mut Note| { &mut m.long_description },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<super::common::NoteKind>>(
                    "kind",
                    |m: &Note| { &m.kind },
                    |m: &mut Note| { &mut m.kind },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::common::RelatedUrl>>(
                    "related_url",
                    |m: &Note| { &m.related_url },
                    |m: &mut Note| { &mut m.related_url },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                    "expiration_time",
                    |m: &Note| { &m.expiration_time },
                    |m: &mut Note| { &mut m.expiration_time },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                    "create_time",
                    |m: &Note| { &m.create_time },
                    |m: &mut Note| { &mut m.create_time },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                    "update_time",
                    |m: &Note| { &m.update_time },
                    |m: &mut Note| { &mut m.update_time },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "related_note_names",
                    |m: &Note| { &m.related_note_names },
                    |m: &mut Note| { &mut m.related_note_names },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::vulnerability::Vulnerability>(
                    "vulnerability",
                    Note::has_vulnerability,
                    Note::get_vulnerability,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::build::Build>(
                    "build",
                    Note::has_build,
                    Note::get_build,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::image::Basis>(
                    "base_image",
                    Note::has_base_image,
                    Note::get_base_image,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::package::Package>(
                    "package",
                    Note::has_package,
                    Note::get_package,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::deployment::Deployable>(
                    "deployable",
                    Note::has_deployable,
                    Note::get_deployable,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::discovery::Discovery>(
                    "discovery",
                    Note::has_discovery,
                    Note::get_discovery,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::attestation::Authority>(
                    "attestation_authority",
                    Note::has_attestation_authority,
                    Note::get_attestation_authority,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Note>(
                    "Note",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Note {
        static mut instance: ::protobuf::lazy::Lazy<Note> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Note,
        };
        unsafe {
            instance.get(Note::new)
        }
    }
}

impl ::protobuf::Clear for Note {
    fn clear(&mut self) {
        self.name.clear();
        self.short_description.clear();
        self.long_description.clear();
        self.kind = super::common::NoteKind::NOTE_KIND_UNSPECIFIED;
        self.related_url.clear();
        self.expiration_time.clear();
        self.create_time.clear();
        self.update_time.clear();
        self.related_note_names.clear();
        self.field_type = ::std::option::Option::None;
        self.field_type = ::std::option::Option::None;
        self.field_type = ::std::option::Option::None;
        self.field_type = ::std::option::Option::None;
        self.field_type = ::std::option::Option::None;
        self.field_type = ::std::option::Option::None;
        self.field_type = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Note {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Note {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetOccurrenceRequest {
    // message fields
    pub name: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetOccurrenceRequest {
    fn default() -> &'a GetOccurrenceRequest {
        <GetOccurrenceRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetOccurrenceRequest {
    pub fn new() -> GetOccurrenceRequest {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }
}

impl ::protobuf::Message for GetOccurrenceRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetOccurrenceRequest {
        GetOccurrenceRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "name",
                    |m: &GetOccurrenceRequest| { &m.name },
                    |m: &mut GetOccurrenceRequest| { &mut m.name },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<GetOccurrenceRequest>(
                    "GetOccurrenceRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static GetOccurrenceRequest {
        static mut instance: ::protobuf::lazy::Lazy<GetOccurrenceRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const GetOccurrenceRequest,
        };
        unsafe {
            instance.get(GetOccurrenceRequest::new)
        }
    }
}

impl ::protobuf::Clear for GetOccurrenceRequest {
    fn clear(&mut self) {
        self.name.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetOccurrenceRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetOccurrenceRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ListOccurrencesRequest {
    // message fields
    pub parent: ::std::string::String,
    pub filter: ::std::string::String,
    pub page_size: i32,
    pub page_token: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ListOccurrencesRequest {
    fn default() -> &'a ListOccurrencesRequest {
        <ListOccurrencesRequest as ::protobuf::Message>::default_instance()
    }
}

impl ListOccurrencesRequest {
    pub fn new() -> ListOccurrencesRequest {
        ::std::default::Default::default()
    }

    // string parent = 1;


    pub fn get_parent(&self) -> &str {
        &self.parent
    }
    pub fn clear_parent(&mut self) {
        self.parent.clear();
    }

    // Param is passed by value, moved
    pub fn set_parent(&mut self, v: ::std::string::String) {
        self.parent = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_parent(&mut self) -> &mut ::std::string::String {
        &mut self.parent
    }

    // Take field
    pub fn take_parent(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.parent, ::std::string::String::new())
    }

    // string filter = 2;


    pub fn get_filter(&self) -> &str {
        &self.filter
    }
    pub fn clear_filter(&mut self) {
        self.filter.clear();
    }

    // Param is passed by value, moved
    pub fn set_filter(&mut self, v: ::std::string::String) {
        self.filter = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_filter(&mut self) -> &mut ::std::string::String {
        &mut self.filter
    }

    // Take field
    pub fn take_filter(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.filter, ::std::string::String::new())
    }

    // int32 page_size = 3;


    pub fn get_page_size(&self) -> i32 {
        self.page_size
    }
    pub fn clear_page_size(&mut self) {
        self.page_size = 0;
    }

    // Param is passed by value, moved
    pub fn set_page_size(&mut self, v: i32) {
        self.page_size = v;
    }

    // string page_token = 4;


    pub fn get_page_token(&self) -> &str {
        &self.page_token
    }
    pub fn clear_page_token(&mut self) {
        self.page_token.clear();
    }

    // Param is passed by value, moved
    pub fn set_page_token(&mut self, v: ::std::string::String) {
        self.page_token = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_page_token(&mut self) -> &mut ::std::string::String {
        &mut self.page_token
    }

    // Take field
    pub fn take_page_token(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.page_token, ::std::string::String::new())
    }
}

impl ::protobuf::Message for ListOccurrencesRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.parent)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.filter)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.page_size = tmp;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.page_token)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.parent.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.parent);
        }
        if !self.filter.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.filter);
        }
        if self.page_size != 0 {
            my_size += ::protobuf::rt::value_size(3, self.page_size, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.page_token.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.page_token);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.parent.is_empty() {
            os.write_string(1, &self.parent)?;
        }
        if !self.filter.is_empty() {
            os.write_string(2, &self.filter)?;
        }
        if self.page_size != 0 {
            os.write_int32(3, self.page_size)?;
        }
        if !self.page_token.is_empty() {
            os.write_string(4, &self.page_token)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ListOccurrencesRequest {
        ListOccurrencesRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "parent",
                    |m: &ListOccurrencesRequest| { &m.parent },
                    |m: &mut ListOccurrencesRequest| { &mut m.parent },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "filter",
                    |m: &ListOccurrencesRequest| { &m.filter },
                    |m: &mut ListOccurrencesRequest| { &mut m.filter },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "page_size",
                    |m: &ListOccurrencesRequest| { &m.page_size },
                    |m: &mut ListOccurrencesRequest| { &mut m.page_size },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "page_token",
                    |m: &ListOccurrencesRequest| { &m.page_token },
                    |m: &mut ListOccurrencesRequest| { &mut m.page_token },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ListOccurrencesRequest>(
                    "ListOccurrencesRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ListOccurrencesRequest {
        static mut instance: ::protobuf::lazy::Lazy<ListOccurrencesRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ListOccurrencesRequest,
        };
        unsafe {
            instance.get(ListOccurrencesRequest::new)
        }
    }
}

impl ::protobuf::Clear for ListOccurrencesRequest {
    fn clear(&mut self) {
        self.parent.clear();
        self.filter.clear();
        self.page_size = 0;
        self.page_token.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ListOccurrencesRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ListOccurrencesRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ListOccurrencesResponse {
    // message fields
    pub occurrences: ::protobuf::RepeatedField<Occurrence>,
    pub next_page_token: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ListOccurrencesResponse {
    fn default() -> &'a ListOccurrencesResponse {
        <ListOccurrencesResponse as ::protobuf::Message>::default_instance()
    }
}

impl ListOccurrencesResponse {
    pub fn new() -> ListOccurrencesResponse {
        ::std::default::Default::default()
    }

    // repeated .grafeas.v1beta1.Occurrence occurrences = 1;


    pub fn get_occurrences(&self) -> &[Occurrence] {
        &self.occurrences
    }
    pub fn clear_occurrences(&mut self) {
        self.occurrences.clear();
    }

    // Param is passed by value, moved
    pub fn set_occurrences(&mut self, v: ::protobuf::RepeatedField<Occurrence>) {
        self.occurrences = v;
    }

    // Mutable pointer to the field.
    pub fn mut_occurrences(&mut self) -> &mut ::protobuf::RepeatedField<Occurrence> {
        &mut self.occurrences
    }

    // Take field
    pub fn take_occurrences(&mut self) -> ::protobuf::RepeatedField<Occurrence> {
        ::std::mem::replace(&mut self.occurrences, ::protobuf::RepeatedField::new())
    }

    // string next_page_token = 2;


    pub fn get_next_page_token(&self) -> &str {
        &self.next_page_token
    }
    pub fn clear_next_page_token(&mut self) {
        self.next_page_token.clear();
    }

    // Param is passed by value, moved
    pub fn set_next_page_token(&mut self, v: ::std::string::String) {
        self.next_page_token = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_next_page_token(&mut self) -> &mut ::std::string::String {
        &mut self.next_page_token
    }

    // Take field
    pub fn take_next_page_token(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.next_page_token, ::std::string::String::new())
    }
}

impl ::protobuf::Message for ListOccurrencesResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.occurrences {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.occurrences)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.next_page_token)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.occurrences {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if !self.next_page_token.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.next_page_token);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        for v in &self.occurrences {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if !self.next_page_token.is_empty() {
            os.write_string(2, &self.next_page_token)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ListOccurrencesResponse {
        ListOccurrencesResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Occurrence>>(
                    "occurrences",
                    |m: &ListOccurrencesResponse| { &m.occurrences },
                    |m: &mut ListOccurrencesResponse| { &mut m.occurrences },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "next_page_token",
                    |m: &ListOccurrencesResponse| { &m.next_page_token },
                    |m: &mut ListOccurrencesResponse| { &mut m.next_page_token },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ListOccurrencesResponse>(
                    "ListOccurrencesResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ListOccurrencesResponse {
        static mut instance: ::protobuf::lazy::Lazy<ListOccurrencesResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ListOccurrencesResponse,
        };
        unsafe {
            instance.get(ListOccurrencesResponse::new)
        }
    }
}

impl ::protobuf::Clear for ListOccurrencesResponse {
    fn clear(&mut self) {
        self.occurrences.clear();
        self.next_page_token.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ListOccurrencesResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ListOccurrencesResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DeleteOccurrenceRequest {
    // message fields
    pub name: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DeleteOccurrenceRequest {
    fn default() -> &'a DeleteOccurrenceRequest {
        <DeleteOccurrenceRequest as ::protobuf::Message>::default_instance()
    }
}

impl DeleteOccurrenceRequest {
    pub fn new() -> DeleteOccurrenceRequest {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }
}

impl ::protobuf::Message for DeleteOccurrenceRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DeleteOccurrenceRequest {
        DeleteOccurrenceRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "name",
                    |m: &DeleteOccurrenceRequest| { &m.name },
                    |m: &mut DeleteOccurrenceRequest| { &mut m.name },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<DeleteOccurrenceRequest>(
                    "DeleteOccurrenceRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static DeleteOccurrenceRequest {
        static mut instance: ::protobuf::lazy::Lazy<DeleteOccurrenceRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const DeleteOccurrenceRequest,
        };
        unsafe {
            instance.get(DeleteOccurrenceRequest::new)
        }
    }
}

impl ::protobuf::Clear for DeleteOccurrenceRequest {
    fn clear(&mut self) {
        self.name.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DeleteOccurrenceRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DeleteOccurrenceRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CreateOccurrenceRequest {
    // message fields
    pub parent: ::std::string::String,
    pub occurrence: ::protobuf::SingularPtrField<Occurrence>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CreateOccurrenceRequest {
    fn default() -> &'a CreateOccurrenceRequest {
        <CreateOccurrenceRequest as ::protobuf::Message>::default_instance()
    }
}

impl CreateOccurrenceRequest {
    pub fn new() -> CreateOccurrenceRequest {
        ::std::default::Default::default()
    }

    // string parent = 1;


    pub fn get_parent(&self) -> &str {
        &self.parent
    }
    pub fn clear_parent(&mut self) {
        self.parent.clear();
    }

    // Param is passed by value, moved
    pub fn set_parent(&mut self, v: ::std::string::String) {
        self.parent = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_parent(&mut self) -> &mut ::std::string::String {
        &mut self.parent
    }

    // Take field
    pub fn take_parent(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.parent, ::std::string::String::new())
    }

    // .grafeas.v1beta1.Occurrence occurrence = 2;


    pub fn get_occurrence(&self) -> &Occurrence {
        self.occurrence.as_ref().unwrap_or_else(|| Occurrence::default_instance())
    }
    pub fn clear_occurrence(&mut self) {
        self.occurrence.clear();
    }

    pub fn has_occurrence(&self) -> bool {
        self.occurrence.is_some()
    }

    // Param is passed by value, moved
    pub fn set_occurrence(&mut self, v: Occurrence) {
        self.occurrence = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_occurrence(&mut self) -> &mut Occurrence {
        if self.occurrence.is_none() {
            self.occurrence.set_default();
        }
        self.occurrence.as_mut().unwrap()
    }

    // Take field
    pub fn take_occurrence(&mut self) -> Occurrence {
        self.occurrence.take().unwrap_or_else(|| Occurrence::new())
    }
}

impl ::protobuf::Message for CreateOccurrenceRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.occurrence {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.parent)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.occurrence)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.parent.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.parent);
        }
        if let Some(ref v) = self.occurrence.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.parent.is_empty() {
            os.write_string(1, &self.parent)?;
        }
        if let Some(ref v) = self.occurrence.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CreateOccurrenceRequest {
        CreateOccurrenceRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "parent",
                    |m: &CreateOccurrenceRequest| { &m.parent },
                    |m: &mut CreateOccurrenceRequest| { &mut m.parent },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Occurrence>>(
                    "occurrence",
                    |m: &CreateOccurrenceRequest| { &m.occurrence },
                    |m: &mut CreateOccurrenceRequest| { &mut m.occurrence },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<CreateOccurrenceRequest>(
                    "CreateOccurrenceRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CreateOccurrenceRequest {
        static mut instance: ::protobuf::lazy::Lazy<CreateOccurrenceRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CreateOccurrenceRequest,
        };
        unsafe {
            instance.get(CreateOccurrenceRequest::new)
        }
    }
}

impl ::protobuf::Clear for CreateOccurrenceRequest {
    fn clear(&mut self) {
        self.parent.clear();
        self.occurrence.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CreateOccurrenceRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CreateOccurrenceRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct UpdateOccurrenceRequest {
    // message fields
    pub name: ::std::string::String,
    pub occurrence: ::protobuf::SingularPtrField<Occurrence>,
    pub update_mask: ::protobuf::SingularPtrField<::protobuf::well_known_types::FieldMask>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a UpdateOccurrenceRequest {
    fn default() -> &'a UpdateOccurrenceRequest {
        <UpdateOccurrenceRequest as ::protobuf::Message>::default_instance()
    }
}

impl UpdateOccurrenceRequest {
    pub fn new() -> UpdateOccurrenceRequest {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // .grafeas.v1beta1.Occurrence occurrence = 2;


    pub fn get_occurrence(&self) -> &Occurrence {
        self.occurrence.as_ref().unwrap_or_else(|| Occurrence::default_instance())
    }
    pub fn clear_occurrence(&mut self) {
        self.occurrence.clear();
    }

    pub fn has_occurrence(&self) -> bool {
        self.occurrence.is_some()
    }

    // Param is passed by value, moved
    pub fn set_occurrence(&mut self, v: Occurrence) {
        self.occurrence = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_occurrence(&mut self) -> &mut Occurrence {
        if self.occurrence.is_none() {
            self.occurrence.set_default();
        }
        self.occurrence.as_mut().unwrap()
    }

    // Take field
    pub fn take_occurrence(&mut self) -> Occurrence {
        self.occurrence.take().unwrap_or_else(|| Occurrence::new())
    }

    // .google.protobuf.FieldMask update_mask = 3;


    pub fn get_update_mask(&self) -> &::protobuf::well_known_types::FieldMask {
        self.update_mask.as_ref().unwrap_or_else(|| ::protobuf::well_known_types::FieldMask::default_instance())
    }
    pub fn clear_update_mask(&mut self) {
        self.update_mask.clear();
    }

    pub fn has_update_mask(&self) -> bool {
        self.update_mask.is_some()
    }

    // Param is passed by value, moved
    pub fn set_update_mask(&mut self, v: ::protobuf::well_known_types::FieldMask) {
        self.update_mask = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_update_mask(&mut self) -> &mut ::protobuf::well_known_types::FieldMask {
        if self.update_mask.is_none() {
            self.update_mask.set_default();
        }
        self.update_mask.as_mut().unwrap()
    }

    // Take field
    pub fn take_update_mask(&mut self) -> ::protobuf::well_known_types::FieldMask {
        self.update_mask.take().unwrap_or_else(|| ::protobuf::well_known_types::FieldMask::new())
    }
}

impl ::protobuf::Message for UpdateOccurrenceRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.occurrence {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.update_mask {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.occurrence)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.update_mask)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if let Some(ref v) = self.occurrence.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.update_mask.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if let Some(ref v) = self.occurrence.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.update_mask.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> UpdateOccurrenceRequest {
        UpdateOccurrenceRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "name",
                    |m: &UpdateOccurrenceRequest| { &m.name },
                    |m: &mut UpdateOccurrenceRequest| { &mut m.name },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Occurrence>>(
                    "occurrence",
                    |m: &UpdateOccurrenceRequest| { &m.occurrence },
                    |m: &mut UpdateOccurrenceRequest| { &mut m.occurrence },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::FieldMask>>(
                    "update_mask",
                    |m: &UpdateOccurrenceRequest| { &m.update_mask },
                    |m: &mut UpdateOccurrenceRequest| { &mut m.update_mask },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<UpdateOccurrenceRequest>(
                    "UpdateOccurrenceRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static UpdateOccurrenceRequest {
        static mut instance: ::protobuf::lazy::Lazy<UpdateOccurrenceRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const UpdateOccurrenceRequest,
        };
        unsafe {
            instance.get(UpdateOccurrenceRequest::new)
        }
    }
}

impl ::protobuf::Clear for UpdateOccurrenceRequest {
    fn clear(&mut self) {
        self.name.clear();
        self.occurrence.clear();
        self.update_mask.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for UpdateOccurrenceRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UpdateOccurrenceRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetNoteRequest {
    // message fields
    pub name: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetNoteRequest {
    fn default() -> &'a GetNoteRequest {
        <GetNoteRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetNoteRequest {
    pub fn new() -> GetNoteRequest {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }
}

impl ::protobuf::Message for GetNoteRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetNoteRequest {
        GetNoteRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "name",
                    |m: &GetNoteRequest| { &m.name },
                    |m: &mut GetNoteRequest| { &mut m.name },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<GetNoteRequest>(
                    "GetNoteRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static GetNoteRequest {
        static mut instance: ::protobuf::lazy::Lazy<GetNoteRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const GetNoteRequest,
        };
        unsafe {
            instance.get(GetNoteRequest::new)
        }
    }
}

impl ::protobuf::Clear for GetNoteRequest {
    fn clear(&mut self) {
        self.name.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetNoteRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetNoteRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetOccurrenceNoteRequest {
    // message fields
    pub name: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetOccurrenceNoteRequest {
    fn default() -> &'a GetOccurrenceNoteRequest {
        <GetOccurrenceNoteRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetOccurrenceNoteRequest {
    pub fn new() -> GetOccurrenceNoteRequest {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }
}

impl ::protobuf::Message for GetOccurrenceNoteRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetOccurrenceNoteRequest {
        GetOccurrenceNoteRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "name",
                    |m: &GetOccurrenceNoteRequest| { &m.name },
                    |m: &mut GetOccurrenceNoteRequest| { &mut m.name },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<GetOccurrenceNoteRequest>(
                    "GetOccurrenceNoteRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static GetOccurrenceNoteRequest {
        static mut instance: ::protobuf::lazy::Lazy<GetOccurrenceNoteRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const GetOccurrenceNoteRequest,
        };
        unsafe {
            instance.get(GetOccurrenceNoteRequest::new)
        }
    }
}

impl ::protobuf::Clear for GetOccurrenceNoteRequest {
    fn clear(&mut self) {
        self.name.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetOccurrenceNoteRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetOccurrenceNoteRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ListNotesRequest {
    // message fields
    pub parent: ::std::string::String,
    pub filter: ::std::string::String,
    pub page_size: i32,
    pub page_token: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ListNotesRequest {
    fn default() -> &'a ListNotesRequest {
        <ListNotesRequest as ::protobuf::Message>::default_instance()
    }
}

impl ListNotesRequest {
    pub fn new() -> ListNotesRequest {
        ::std::default::Default::default()
    }

    // string parent = 1;


    pub fn get_parent(&self) -> &str {
        &self.parent
    }
    pub fn clear_parent(&mut self) {
        self.parent.clear();
    }

    // Param is passed by value, moved
    pub fn set_parent(&mut self, v: ::std::string::String) {
        self.parent = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_parent(&mut self) -> &mut ::std::string::String {
        &mut self.parent
    }

    // Take field
    pub fn take_parent(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.parent, ::std::string::String::new())
    }

    // string filter = 2;


    pub fn get_filter(&self) -> &str {
        &self.filter
    }
    pub fn clear_filter(&mut self) {
        self.filter.clear();
    }

    // Param is passed by value, moved
    pub fn set_filter(&mut self, v: ::std::string::String) {
        self.filter = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_filter(&mut self) -> &mut ::std::string::String {
        &mut self.filter
    }

    // Take field
    pub fn take_filter(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.filter, ::std::string::String::new())
    }

    // int32 page_size = 3;


    pub fn get_page_size(&self) -> i32 {
        self.page_size
    }
    pub fn clear_page_size(&mut self) {
        self.page_size = 0;
    }

    // Param is passed by value, moved
    pub fn set_page_size(&mut self, v: i32) {
        self.page_size = v;
    }

    // string page_token = 4;


    pub fn get_page_token(&self) -> &str {
        &self.page_token
    }
    pub fn clear_page_token(&mut self) {
        self.page_token.clear();
    }

    // Param is passed by value, moved
    pub fn set_page_token(&mut self, v: ::std::string::String) {
        self.page_token = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_page_token(&mut self) -> &mut ::std::string::String {
        &mut self.page_token
    }

    // Take field
    pub fn take_page_token(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.page_token, ::std::string::String::new())
    }
}

impl ::protobuf::Message for ListNotesRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.parent)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.filter)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.page_size = tmp;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.page_token)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.parent.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.parent);
        }
        if !self.filter.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.filter);
        }
        if self.page_size != 0 {
            my_size += ::protobuf::rt::value_size(3, self.page_size, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.page_token.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.page_token);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.parent.is_empty() {
            os.write_string(1, &self.parent)?;
        }
        if !self.filter.is_empty() {
            os.write_string(2, &self.filter)?;
        }
        if self.page_size != 0 {
            os.write_int32(3, self.page_size)?;
        }
        if !self.page_token.is_empty() {
            os.write_string(4, &self.page_token)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ListNotesRequest {
        ListNotesRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "parent",
                    |m: &ListNotesRequest| { &m.parent },
                    |m: &mut ListNotesRequest| { &mut m.parent },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "filter",
                    |m: &ListNotesRequest| { &m.filter },
                    |m: &mut ListNotesRequest| { &mut m.filter },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "page_size",
                    |m: &ListNotesRequest| { &m.page_size },
                    |m: &mut ListNotesRequest| { &mut m.page_size },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "page_token",
                    |m: &ListNotesRequest| { &m.page_token },
                    |m: &mut ListNotesRequest| { &mut m.page_token },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ListNotesRequest>(
                    "ListNotesRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ListNotesRequest {
        static mut instance: ::protobuf::lazy::Lazy<ListNotesRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ListNotesRequest,
        };
        unsafe {
            instance.get(ListNotesRequest::new)
        }
    }
}

impl ::protobuf::Clear for ListNotesRequest {
    fn clear(&mut self) {
        self.parent.clear();
        self.filter.clear();
        self.page_size = 0;
        self.page_token.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ListNotesRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ListNotesRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ListNotesResponse {
    // message fields
    pub notes: ::protobuf::RepeatedField<Note>,
    pub next_page_token: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ListNotesResponse {
    fn default() -> &'a ListNotesResponse {
        <ListNotesResponse as ::protobuf::Message>::default_instance()
    }
}

impl ListNotesResponse {
    pub fn new() -> ListNotesResponse {
        ::std::default::Default::default()
    }

    // repeated .grafeas.v1beta1.Note notes = 1;


    pub fn get_notes(&self) -> &[Note] {
        &self.notes
    }
    pub fn clear_notes(&mut self) {
        self.notes.clear();
    }

    // Param is passed by value, moved
    pub fn set_notes(&mut self, v: ::protobuf::RepeatedField<Note>) {
        self.notes = v;
    }

    // Mutable pointer to the field.
    pub fn mut_notes(&mut self) -> &mut ::protobuf::RepeatedField<Note> {
        &mut self.notes
    }

    // Take field
    pub fn take_notes(&mut self) -> ::protobuf::RepeatedField<Note> {
        ::std::mem::replace(&mut self.notes, ::protobuf::RepeatedField::new())
    }

    // string next_page_token = 2;


    pub fn get_next_page_token(&self) -> &str {
        &self.next_page_token
    }
    pub fn clear_next_page_token(&mut self) {
        self.next_page_token.clear();
    }

    // Param is passed by value, moved
    pub fn set_next_page_token(&mut self, v: ::std::string::String) {
        self.next_page_token = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_next_page_token(&mut self) -> &mut ::std::string::String {
        &mut self.next_page_token
    }

    // Take field
    pub fn take_next_page_token(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.next_page_token, ::std::string::String::new())
    }
}

impl ::protobuf::Message for ListNotesResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.notes {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.notes)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.next_page_token)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.notes {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if !self.next_page_token.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.next_page_token);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        for v in &self.notes {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if !self.next_page_token.is_empty() {
            os.write_string(2, &self.next_page_token)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ListNotesResponse {
        ListNotesResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Note>>(
                    "notes",
                    |m: &ListNotesResponse| { &m.notes },
                    |m: &mut ListNotesResponse| { &mut m.notes },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "next_page_token",
                    |m: &ListNotesResponse| { &m.next_page_token },
                    |m: &mut ListNotesResponse| { &mut m.next_page_token },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ListNotesResponse>(
                    "ListNotesResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ListNotesResponse {
        static mut instance: ::protobuf::lazy::Lazy<ListNotesResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ListNotesResponse,
        };
        unsafe {
            instance.get(ListNotesResponse::new)
        }
    }
}

impl ::protobuf::Clear for ListNotesResponse {
    fn clear(&mut self) {
        self.notes.clear();
        self.next_page_token.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ListNotesResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ListNotesResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DeleteNoteRequest {
    // message fields
    pub name: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DeleteNoteRequest {
    fn default() -> &'a DeleteNoteRequest {
        <DeleteNoteRequest as ::protobuf::Message>::default_instance()
    }
}

impl DeleteNoteRequest {
    pub fn new() -> DeleteNoteRequest {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }
}

impl ::protobuf::Message for DeleteNoteRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DeleteNoteRequest {
        DeleteNoteRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "name",
                    |m: &DeleteNoteRequest| { &m.name },
                    |m: &mut DeleteNoteRequest| { &mut m.name },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<DeleteNoteRequest>(
                    "DeleteNoteRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static DeleteNoteRequest {
        static mut instance: ::protobuf::lazy::Lazy<DeleteNoteRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const DeleteNoteRequest,
        };
        unsafe {
            instance.get(DeleteNoteRequest::new)
        }
    }
}

impl ::protobuf::Clear for DeleteNoteRequest {
    fn clear(&mut self) {
        self.name.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DeleteNoteRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DeleteNoteRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CreateNoteRequest {
    // message fields
    pub parent: ::std::string::String,
    pub note_id: ::std::string::String,
    pub note: ::protobuf::SingularPtrField<Note>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CreateNoteRequest {
    fn default() -> &'a CreateNoteRequest {
        <CreateNoteRequest as ::protobuf::Message>::default_instance()
    }
}

impl CreateNoteRequest {
    pub fn new() -> CreateNoteRequest {
        ::std::default::Default::default()
    }

    // string parent = 1;


    pub fn get_parent(&self) -> &str {
        &self.parent
    }
    pub fn clear_parent(&mut self) {
        self.parent.clear();
    }

    // Param is passed by value, moved
    pub fn set_parent(&mut self, v: ::std::string::String) {
        self.parent = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_parent(&mut self) -> &mut ::std::string::String {
        &mut self.parent
    }

    // Take field
    pub fn take_parent(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.parent, ::std::string::String::new())
    }

    // string note_id = 2;


    pub fn get_note_id(&self) -> &str {
        &self.note_id
    }
    pub fn clear_note_id(&mut self) {
        self.note_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_note_id(&mut self, v: ::std::string::String) {
        self.note_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_note_id(&mut self) -> &mut ::std::string::String {
        &mut self.note_id
    }

    // Take field
    pub fn take_note_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.note_id, ::std::string::String::new())
    }

    // .grafeas.v1beta1.Note note = 3;


    pub fn get_note(&self) -> &Note {
        self.note.as_ref().unwrap_or_else(|| Note::default_instance())
    }
    pub fn clear_note(&mut self) {
        self.note.clear();
    }

    pub fn has_note(&self) -> bool {
        self.note.is_some()
    }

    // Param is passed by value, moved
    pub fn set_note(&mut self, v: Note) {
        self.note = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_note(&mut self) -> &mut Note {
        if self.note.is_none() {
            self.note.set_default();
        }
        self.note.as_mut().unwrap()
    }

    // Take field
    pub fn take_note(&mut self) -> Note {
        self.note.take().unwrap_or_else(|| Note::new())
    }
}

impl ::protobuf::Message for CreateNoteRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.note {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.parent)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.note_id)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.note)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.parent.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.parent);
        }
        if !self.note_id.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.note_id);
        }
        if let Some(ref v) = self.note.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.parent.is_empty() {
            os.write_string(1, &self.parent)?;
        }
        if !self.note_id.is_empty() {
            os.write_string(2, &self.note_id)?;
        }
        if let Some(ref v) = self.note.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CreateNoteRequest {
        CreateNoteRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "parent",
                    |m: &CreateNoteRequest| { &m.parent },
                    |m: &mut CreateNoteRequest| { &mut m.parent },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "note_id",
                    |m: &CreateNoteRequest| { &m.note_id },
                    |m: &mut CreateNoteRequest| { &mut m.note_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Note>>(
                    "note",
                    |m: &CreateNoteRequest| { &m.note },
                    |m: &mut CreateNoteRequest| { &mut m.note },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<CreateNoteRequest>(
                    "CreateNoteRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CreateNoteRequest {
        static mut instance: ::protobuf::lazy::Lazy<CreateNoteRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CreateNoteRequest,
        };
        unsafe {
            instance.get(CreateNoteRequest::new)
        }
    }
}

impl ::protobuf::Clear for CreateNoteRequest {
    fn clear(&mut self) {
        self.parent.clear();
        self.note_id.clear();
        self.note.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CreateNoteRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CreateNoteRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct UpdateNoteRequest {
    // message fields
    pub name: ::std::string::String,
    pub note: ::protobuf::SingularPtrField<Note>,
    pub update_mask: ::protobuf::SingularPtrField<::protobuf::well_known_types::FieldMask>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a UpdateNoteRequest {
    fn default() -> &'a UpdateNoteRequest {
        <UpdateNoteRequest as ::protobuf::Message>::default_instance()
    }
}

impl UpdateNoteRequest {
    pub fn new() -> UpdateNoteRequest {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // .grafeas.v1beta1.Note note = 2;


    pub fn get_note(&self) -> &Note {
        self.note.as_ref().unwrap_or_else(|| Note::default_instance())
    }
    pub fn clear_note(&mut self) {
        self.note.clear();
    }

    pub fn has_note(&self) -> bool {
        self.note.is_some()
    }

    // Param is passed by value, moved
    pub fn set_note(&mut self, v: Note) {
        self.note = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_note(&mut self) -> &mut Note {
        if self.note.is_none() {
            self.note.set_default();
        }
        self.note.as_mut().unwrap()
    }

    // Take field
    pub fn take_note(&mut self) -> Note {
        self.note.take().unwrap_or_else(|| Note::new())
    }

    // .google.protobuf.FieldMask update_mask = 3;


    pub fn get_update_mask(&self) -> &::protobuf::well_known_types::FieldMask {
        self.update_mask.as_ref().unwrap_or_else(|| ::protobuf::well_known_types::FieldMask::default_instance())
    }
    pub fn clear_update_mask(&mut self) {
        self.update_mask.clear();
    }

    pub fn has_update_mask(&self) -> bool {
        self.update_mask.is_some()
    }

    // Param is passed by value, moved
    pub fn set_update_mask(&mut self, v: ::protobuf::well_known_types::FieldMask) {
        self.update_mask = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_update_mask(&mut self) -> &mut ::protobuf::well_known_types::FieldMask {
        if self.update_mask.is_none() {
            self.update_mask.set_default();
        }
        self.update_mask.as_mut().unwrap()
    }

    // Take field
    pub fn take_update_mask(&mut self) -> ::protobuf::well_known_types::FieldMask {
        self.update_mask.take().unwrap_or_else(|| ::protobuf::well_known_types::FieldMask::new())
    }
}

impl ::protobuf::Message for UpdateNoteRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.note {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.update_mask {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.note)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.update_mask)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if let Some(ref v) = self.note.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.update_mask.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if let Some(ref v) = self.note.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.update_mask.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> UpdateNoteRequest {
        UpdateNoteRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "name",
                    |m: &UpdateNoteRequest| { &m.name },
                    |m: &mut UpdateNoteRequest| { &mut m.name },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Note>>(
                    "note",
                    |m: &UpdateNoteRequest| { &m.note },
                    |m: &mut UpdateNoteRequest| { &mut m.note },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::FieldMask>>(
                    "update_mask",
                    |m: &UpdateNoteRequest| { &m.update_mask },
                    |m: &mut UpdateNoteRequest| { &mut m.update_mask },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<UpdateNoteRequest>(
                    "UpdateNoteRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static UpdateNoteRequest {
        static mut instance: ::protobuf::lazy::Lazy<UpdateNoteRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const UpdateNoteRequest,
        };
        unsafe {
            instance.get(UpdateNoteRequest::new)
        }
    }
}

impl ::protobuf::Clear for UpdateNoteRequest {
    fn clear(&mut self) {
        self.name.clear();
        self.note.clear();
        self.update_mask.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for UpdateNoteRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UpdateNoteRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ListNoteOccurrencesRequest {
    // message fields
    pub name: ::std::string::String,
    pub filter: ::std::string::String,
    pub page_size: i32,
    pub page_token: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ListNoteOccurrencesRequest {
    fn default() -> &'a ListNoteOccurrencesRequest {
        <ListNoteOccurrencesRequest as ::protobuf::Message>::default_instance()
    }
}

impl ListNoteOccurrencesRequest {
    pub fn new() -> ListNoteOccurrencesRequest {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // string filter = 2;


    pub fn get_filter(&self) -> &str {
        &self.filter
    }
    pub fn clear_filter(&mut self) {
        self.filter.clear();
    }

    // Param is passed by value, moved
    pub fn set_filter(&mut self, v: ::std::string::String) {
        self.filter = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_filter(&mut self) -> &mut ::std::string::String {
        &mut self.filter
    }

    // Take field
    pub fn take_filter(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.filter, ::std::string::String::new())
    }

    // int32 page_size = 3;


    pub fn get_page_size(&self) -> i32 {
        self.page_size
    }
    pub fn clear_page_size(&mut self) {
        self.page_size = 0;
    }

    // Param is passed by value, moved
    pub fn set_page_size(&mut self, v: i32) {
        self.page_size = v;
    }

    // string page_token = 4;


    pub fn get_page_token(&self) -> &str {
        &self.page_token
    }
    pub fn clear_page_token(&mut self) {
        self.page_token.clear();
    }

    // Param is passed by value, moved
    pub fn set_page_token(&mut self, v: ::std::string::String) {
        self.page_token = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_page_token(&mut self) -> &mut ::std::string::String {
        &mut self.page_token
    }

    // Take field
    pub fn take_page_token(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.page_token, ::std::string::String::new())
    }
}

impl ::protobuf::Message for ListNoteOccurrencesRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.filter)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.page_size = tmp;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.page_token)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if !self.filter.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.filter);
        }
        if self.page_size != 0 {
            my_size += ::protobuf::rt::value_size(3, self.page_size, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.page_token.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.page_token);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if !self.filter.is_empty() {
            os.write_string(2, &self.filter)?;
        }
        if self.page_size != 0 {
            os.write_int32(3, self.page_size)?;
        }
        if !self.page_token.is_empty() {
            os.write_string(4, &self.page_token)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ListNoteOccurrencesRequest {
        ListNoteOccurrencesRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "name",
                    |m: &ListNoteOccurrencesRequest| { &m.name },
                    |m: &mut ListNoteOccurrencesRequest| { &mut m.name },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "filter",
                    |m: &ListNoteOccurrencesRequest| { &m.filter },
                    |m: &mut ListNoteOccurrencesRequest| { &mut m.filter },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "page_size",
                    |m: &ListNoteOccurrencesRequest| { &m.page_size },
                    |m: &mut ListNoteOccurrencesRequest| { &mut m.page_size },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "page_token",
                    |m: &ListNoteOccurrencesRequest| { &m.page_token },
                    |m: &mut ListNoteOccurrencesRequest| { &mut m.page_token },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ListNoteOccurrencesRequest>(
                    "ListNoteOccurrencesRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ListNoteOccurrencesRequest {
        static mut instance: ::protobuf::lazy::Lazy<ListNoteOccurrencesRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ListNoteOccurrencesRequest,
        };
        unsafe {
            instance.get(ListNoteOccurrencesRequest::new)
        }
    }
}

impl ::protobuf::Clear for ListNoteOccurrencesRequest {
    fn clear(&mut self) {
        self.name.clear();
        self.filter.clear();
        self.page_size = 0;
        self.page_token.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ListNoteOccurrencesRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ListNoteOccurrencesRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ListNoteOccurrencesResponse {
    // message fields
    pub occurrences: ::protobuf::RepeatedField<Occurrence>,
    pub next_page_token: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ListNoteOccurrencesResponse {
    fn default() -> &'a ListNoteOccurrencesResponse {
        <ListNoteOccurrencesResponse as ::protobuf::Message>::default_instance()
    }
}

impl ListNoteOccurrencesResponse {
    pub fn new() -> ListNoteOccurrencesResponse {
        ::std::default::Default::default()
    }

    // repeated .grafeas.v1beta1.Occurrence occurrences = 1;


    pub fn get_occurrences(&self) -> &[Occurrence] {
        &self.occurrences
    }
    pub fn clear_occurrences(&mut self) {
        self.occurrences.clear();
    }

    // Param is passed by value, moved
    pub fn set_occurrences(&mut self, v: ::protobuf::RepeatedField<Occurrence>) {
        self.occurrences = v;
    }

    // Mutable pointer to the field.
    pub fn mut_occurrences(&mut self) -> &mut ::protobuf::RepeatedField<Occurrence> {
        &mut self.occurrences
    }

    // Take field
    pub fn take_occurrences(&mut self) -> ::protobuf::RepeatedField<Occurrence> {
        ::std::mem::replace(&mut self.occurrences, ::protobuf::RepeatedField::new())
    }

    // string next_page_token = 2;


    pub fn get_next_page_token(&self) -> &str {
        &self.next_page_token
    }
    pub fn clear_next_page_token(&mut self) {
        self.next_page_token.clear();
    }

    // Param is passed by value, moved
    pub fn set_next_page_token(&mut self, v: ::std::string::String) {
        self.next_page_token = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_next_page_token(&mut self) -> &mut ::std::string::String {
        &mut self.next_page_token
    }

    // Take field
    pub fn take_next_page_token(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.next_page_token, ::std::string::String::new())
    }
}

impl ::protobuf::Message for ListNoteOccurrencesResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.occurrences {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.occurrences)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.next_page_token)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.occurrences {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if !self.next_page_token.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.next_page_token);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        for v in &self.occurrences {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if !self.next_page_token.is_empty() {
            os.write_string(2, &self.next_page_token)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ListNoteOccurrencesResponse {
        ListNoteOccurrencesResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Occurrence>>(
                    "occurrences",
                    |m: &ListNoteOccurrencesResponse| { &m.occurrences },
                    |m: &mut ListNoteOccurrencesResponse| { &mut m.occurrences },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "next_page_token",
                    |m: &ListNoteOccurrencesResponse| { &m.next_page_token },
                    |m: &mut ListNoteOccurrencesResponse| { &mut m.next_page_token },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ListNoteOccurrencesResponse>(
                    "ListNoteOccurrencesResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ListNoteOccurrencesResponse {
        static mut instance: ::protobuf::lazy::Lazy<ListNoteOccurrencesResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ListNoteOccurrencesResponse,
        };
        unsafe {
            instance.get(ListNoteOccurrencesResponse::new)
        }
    }
}

impl ::protobuf::Clear for ListNoteOccurrencesResponse {
    fn clear(&mut self) {
        self.occurrences.clear();
        self.next_page_token.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ListNoteOccurrencesResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ListNoteOccurrencesResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct BatchCreateNotesRequest {
    // message fields
    pub parent: ::std::string::String,
    pub notes: ::std::collections::HashMap<::std::string::String, Note>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a BatchCreateNotesRequest {
    fn default() -> &'a BatchCreateNotesRequest {
        <BatchCreateNotesRequest as ::protobuf::Message>::default_instance()
    }
}

impl BatchCreateNotesRequest {
    pub fn new() -> BatchCreateNotesRequest {
        ::std::default::Default::default()
    }

    // string parent = 1;


    pub fn get_parent(&self) -> &str {
        &self.parent
    }
    pub fn clear_parent(&mut self) {
        self.parent.clear();
    }

    // Param is passed by value, moved
    pub fn set_parent(&mut self, v: ::std::string::String) {
        self.parent = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_parent(&mut self) -> &mut ::std::string::String {
        &mut self.parent
    }

    // Take field
    pub fn take_parent(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.parent, ::std::string::String::new())
    }

    // repeated .grafeas.v1beta1.BatchCreateNotesRequest.NotesEntry notes = 2;


    pub fn get_notes(&self) -> &::std::collections::HashMap<::std::string::String, Note> {
        &self.notes
    }
    pub fn clear_notes(&mut self) {
        self.notes.clear();
    }

    // Param is passed by value, moved
    pub fn set_notes(&mut self, v: ::std::collections::HashMap<::std::string::String, Note>) {
        self.notes = v;
    }

    // Mutable pointer to the field.
    pub fn mut_notes(&mut self) -> &mut ::std::collections::HashMap<::std::string::String, Note> {
        &mut self.notes
    }

    // Take field
    pub fn take_notes(&mut self) -> ::std::collections::HashMap<::std::string::String, Note> {
        ::std::mem::replace(&mut self.notes, ::std::collections::HashMap::new())
    }
}

impl ::protobuf::Message for BatchCreateNotesRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.parent)?;
                },
                2 => {
                    ::protobuf::rt::read_map_into::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<Note>>(wire_type, is, &mut self.notes)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.parent.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.parent);
        }
        my_size += ::protobuf::rt::compute_map_size::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<Note>>(2, &self.notes);
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.parent.is_empty() {
            os.write_string(1, &self.parent)?;
        }
        ::protobuf::rt::write_map_with_cached_sizes::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<Note>>(2, &self.notes, os)?;
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> BatchCreateNotesRequest {
        BatchCreateNotesRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "parent",
                    |m: &BatchCreateNotesRequest| { &m.parent },
                    |m: &mut BatchCreateNotesRequest| { &mut m.parent },
                ));
                fields.push(::protobuf::reflect::accessor::make_map_accessor::<_, ::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<Note>>(
                    "notes",
                    |m: &BatchCreateNotesRequest| { &m.notes },
                    |m: &mut BatchCreateNotesRequest| { &mut m.notes },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<BatchCreateNotesRequest>(
                    "BatchCreateNotesRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static BatchCreateNotesRequest {
        static mut instance: ::protobuf::lazy::Lazy<BatchCreateNotesRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const BatchCreateNotesRequest,
        };
        unsafe {
            instance.get(BatchCreateNotesRequest::new)
        }
    }
}

impl ::protobuf::Clear for BatchCreateNotesRequest {
    fn clear(&mut self) {
        self.parent.clear();
        self.notes.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for BatchCreateNotesRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BatchCreateNotesRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct BatchCreateNotesResponse {
    // message fields
    pub notes: ::protobuf::RepeatedField<Note>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a BatchCreateNotesResponse {
    fn default() -> &'a BatchCreateNotesResponse {
        <BatchCreateNotesResponse as ::protobuf::Message>::default_instance()
    }
}

impl BatchCreateNotesResponse {
    pub fn new() -> BatchCreateNotesResponse {
        ::std::default::Default::default()
    }

    // repeated .grafeas.v1beta1.Note notes = 1;


    pub fn get_notes(&self) -> &[Note] {
        &self.notes
    }
    pub fn clear_notes(&mut self) {
        self.notes.clear();
    }

    // Param is passed by value, moved
    pub fn set_notes(&mut self, v: ::protobuf::RepeatedField<Note>) {
        self.notes = v;
    }

    // Mutable pointer to the field.
    pub fn mut_notes(&mut self) -> &mut ::protobuf::RepeatedField<Note> {
        &mut self.notes
    }

    // Take field
    pub fn take_notes(&mut self) -> ::protobuf::RepeatedField<Note> {
        ::std::mem::replace(&mut self.notes, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for BatchCreateNotesResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.notes {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.notes)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.notes {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        for v in &self.notes {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> BatchCreateNotesResponse {
        BatchCreateNotesResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Note>>(
                    "notes",
                    |m: &BatchCreateNotesResponse| { &m.notes },
                    |m: &mut BatchCreateNotesResponse| { &mut m.notes },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<BatchCreateNotesResponse>(
                    "BatchCreateNotesResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static BatchCreateNotesResponse {
        static mut instance: ::protobuf::lazy::Lazy<BatchCreateNotesResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const BatchCreateNotesResponse,
        };
        unsafe {
            instance.get(BatchCreateNotesResponse::new)
        }
    }
}

impl ::protobuf::Clear for BatchCreateNotesResponse {
    fn clear(&mut self) {
        self.notes.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for BatchCreateNotesResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BatchCreateNotesResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct BatchCreateOccurrencesRequest {
    // message fields
    pub parent: ::std::string::String,
    pub occurrences: ::protobuf::RepeatedField<Occurrence>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a BatchCreateOccurrencesRequest {
    fn default() -> &'a BatchCreateOccurrencesRequest {
        <BatchCreateOccurrencesRequest as ::protobuf::Message>::default_instance()
    }
}

impl BatchCreateOccurrencesRequest {
    pub fn new() -> BatchCreateOccurrencesRequest {
        ::std::default::Default::default()
    }

    // string parent = 1;


    pub fn get_parent(&self) -> &str {
        &self.parent
    }
    pub fn clear_parent(&mut self) {
        self.parent.clear();
    }

    // Param is passed by value, moved
    pub fn set_parent(&mut self, v: ::std::string::String) {
        self.parent = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_parent(&mut self) -> &mut ::std::string::String {
        &mut self.parent
    }

    // Take field
    pub fn take_parent(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.parent, ::std::string::String::new())
    }

    // repeated .grafeas.v1beta1.Occurrence occurrences = 2;


    pub fn get_occurrences(&self) -> &[Occurrence] {
        &self.occurrences
    }
    pub fn clear_occurrences(&mut self) {
        self.occurrences.clear();
    }

    // Param is passed by value, moved
    pub fn set_occurrences(&mut self, v: ::protobuf::RepeatedField<Occurrence>) {
        self.occurrences = v;
    }

    // Mutable pointer to the field.
    pub fn mut_occurrences(&mut self) -> &mut ::protobuf::RepeatedField<Occurrence> {
        &mut self.occurrences
    }

    // Take field
    pub fn take_occurrences(&mut self) -> ::protobuf::RepeatedField<Occurrence> {
        ::std::mem::replace(&mut self.occurrences, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for BatchCreateOccurrencesRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.occurrences {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.parent)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.occurrences)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.parent.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.parent);
        }
        for value in &self.occurrences {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.parent.is_empty() {
            os.write_string(1, &self.parent)?;
        }
        for v in &self.occurrences {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> BatchCreateOccurrencesRequest {
        BatchCreateOccurrencesRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "parent",
                    |m: &BatchCreateOccurrencesRequest| { &m.parent },
                    |m: &mut BatchCreateOccurrencesRequest| { &mut m.parent },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Occurrence>>(
                    "occurrences",
                    |m: &BatchCreateOccurrencesRequest| { &m.occurrences },
                    |m: &mut BatchCreateOccurrencesRequest| { &mut m.occurrences },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<BatchCreateOccurrencesRequest>(
                    "BatchCreateOccurrencesRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static BatchCreateOccurrencesRequest {
        static mut instance: ::protobuf::lazy::Lazy<BatchCreateOccurrencesRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const BatchCreateOccurrencesRequest,
        };
        unsafe {
            instance.get(BatchCreateOccurrencesRequest::new)
        }
    }
}

impl ::protobuf::Clear for BatchCreateOccurrencesRequest {
    fn clear(&mut self) {
        self.parent.clear();
        self.occurrences.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for BatchCreateOccurrencesRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BatchCreateOccurrencesRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct BatchCreateOccurrencesResponse {
    // message fields
    pub occurrences: ::protobuf::RepeatedField<Occurrence>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a BatchCreateOccurrencesResponse {
    fn default() -> &'a BatchCreateOccurrencesResponse {
        <BatchCreateOccurrencesResponse as ::protobuf::Message>::default_instance()
    }
}

impl BatchCreateOccurrencesResponse {
    pub fn new() -> BatchCreateOccurrencesResponse {
        ::std::default::Default::default()
    }

    // repeated .grafeas.v1beta1.Occurrence occurrences = 1;


    pub fn get_occurrences(&self) -> &[Occurrence] {
        &self.occurrences
    }
    pub fn clear_occurrences(&mut self) {
        self.occurrences.clear();
    }

    // Param is passed by value, moved
    pub fn set_occurrences(&mut self, v: ::protobuf::RepeatedField<Occurrence>) {
        self.occurrences = v;
    }

    // Mutable pointer to the field.
    pub fn mut_occurrences(&mut self) -> &mut ::protobuf::RepeatedField<Occurrence> {
        &mut self.occurrences
    }

    // Take field
    pub fn take_occurrences(&mut self) -> ::protobuf::RepeatedField<Occurrence> {
        ::std::mem::replace(&mut self.occurrences, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for BatchCreateOccurrencesResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.occurrences {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.occurrences)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.occurrences {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        for v in &self.occurrences {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> BatchCreateOccurrencesResponse {
        BatchCreateOccurrencesResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Occurrence>>(
                    "occurrences",
                    |m: &BatchCreateOccurrencesResponse| { &m.occurrences },
                    |m: &mut BatchCreateOccurrencesResponse| { &mut m.occurrences },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<BatchCreateOccurrencesResponse>(
                    "BatchCreateOccurrencesResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static BatchCreateOccurrencesResponse {
        static mut instance: ::protobuf::lazy::Lazy<BatchCreateOccurrencesResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const BatchCreateOccurrencesResponse,
        };
        unsafe {
            instance.get(BatchCreateOccurrencesResponse::new)
        }
    }
}

impl ::protobuf::Clear for BatchCreateOccurrencesResponse {
    fn clear(&mut self) {
        self.occurrences.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for BatchCreateOccurrencesResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BatchCreateOccurrencesResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetVulnerabilityOccurrencesSummaryRequest {
    // message fields
    pub parent: ::std::string::String,
    pub filter: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetVulnerabilityOccurrencesSummaryRequest {
    fn default() -> &'a GetVulnerabilityOccurrencesSummaryRequest {
        <GetVulnerabilityOccurrencesSummaryRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetVulnerabilityOccurrencesSummaryRequest {
    pub fn new() -> GetVulnerabilityOccurrencesSummaryRequest {
        ::std::default::Default::default()
    }

    // string parent = 1;


    pub fn get_parent(&self) -> &str {
        &self.parent
    }
    pub fn clear_parent(&mut self) {
        self.parent.clear();
    }

    // Param is passed by value, moved
    pub fn set_parent(&mut self, v: ::std::string::String) {
        self.parent = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_parent(&mut self) -> &mut ::std::string::String {
        &mut self.parent
    }

    // Take field
    pub fn take_parent(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.parent, ::std::string::String::new())
    }

    // string filter = 2;


    pub fn get_filter(&self) -> &str {
        &self.filter
    }
    pub fn clear_filter(&mut self) {
        self.filter.clear();
    }

    // Param is passed by value, moved
    pub fn set_filter(&mut self, v: ::std::string::String) {
        self.filter = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_filter(&mut self) -> &mut ::std::string::String {
        &mut self.filter
    }

    // Take field
    pub fn take_filter(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.filter, ::std::string::String::new())
    }
}

impl ::protobuf::Message for GetVulnerabilityOccurrencesSummaryRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.parent)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.filter)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.parent.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.parent);
        }
        if !self.filter.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.filter);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.parent.is_empty() {
            os.write_string(1, &self.parent)?;
        }
        if !self.filter.is_empty() {
            os.write_string(2, &self.filter)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetVulnerabilityOccurrencesSummaryRequest {
        GetVulnerabilityOccurrencesSummaryRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "parent",
                    |m: &GetVulnerabilityOccurrencesSummaryRequest| { &m.parent },
                    |m: &mut GetVulnerabilityOccurrencesSummaryRequest| { &mut m.parent },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "filter",
                    |m: &GetVulnerabilityOccurrencesSummaryRequest| { &m.filter },
                    |m: &mut GetVulnerabilityOccurrencesSummaryRequest| { &mut m.filter },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<GetVulnerabilityOccurrencesSummaryRequest>(
                    "GetVulnerabilityOccurrencesSummaryRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static GetVulnerabilityOccurrencesSummaryRequest {
        static mut instance: ::protobuf::lazy::Lazy<GetVulnerabilityOccurrencesSummaryRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const GetVulnerabilityOccurrencesSummaryRequest,
        };
        unsafe {
            instance.get(GetVulnerabilityOccurrencesSummaryRequest::new)
        }
    }
}

impl ::protobuf::Clear for GetVulnerabilityOccurrencesSummaryRequest {
    fn clear(&mut self) {
        self.parent.clear();
        self.filter.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetVulnerabilityOccurrencesSummaryRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetVulnerabilityOccurrencesSummaryRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct VulnerabilityOccurrencesSummary {
    // message fields
    pub counts: ::protobuf::RepeatedField<VulnerabilityOccurrencesSummary_FixableTotalByDigest>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a VulnerabilityOccurrencesSummary {
    fn default() -> &'a VulnerabilityOccurrencesSummary {
        <VulnerabilityOccurrencesSummary as ::protobuf::Message>::default_instance()
    }
}

impl VulnerabilityOccurrencesSummary {
    pub fn new() -> VulnerabilityOccurrencesSummary {
        ::std::default::Default::default()
    }

    // repeated .grafeas.v1beta1.VulnerabilityOccurrencesSummary.FixableTotalByDigest counts = 1;


    pub fn get_counts(&self) -> &[VulnerabilityOccurrencesSummary_FixableTotalByDigest] {
        &self.counts
    }
    pub fn clear_counts(&mut self) {
        self.counts.clear();
    }

    // Param is passed by value, moved
    pub fn set_counts(&mut self, v: ::protobuf::RepeatedField<VulnerabilityOccurrencesSummary_FixableTotalByDigest>) {
        self.counts = v;
    }

    // Mutable pointer to the field.
    pub fn mut_counts(&mut self) -> &mut ::protobuf::RepeatedField<VulnerabilityOccurrencesSummary_FixableTotalByDigest> {
        &mut self.counts
    }

    // Take field
    pub fn take_counts(&mut self) -> ::protobuf::RepeatedField<VulnerabilityOccurrencesSummary_FixableTotalByDigest> {
        ::std::mem::replace(&mut self.counts, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for VulnerabilityOccurrencesSummary {
    fn is_initialized(&self) -> bool {
        for v in &self.counts {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.counts)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.counts {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        for v in &self.counts {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> VulnerabilityOccurrencesSummary {
        VulnerabilityOccurrencesSummary::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<VulnerabilityOccurrencesSummary_FixableTotalByDigest>>(
                    "counts",
                    |m: &VulnerabilityOccurrencesSummary| { &m.counts },
                    |m: &mut VulnerabilityOccurrencesSummary| { &mut m.counts },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<VulnerabilityOccurrencesSummary>(
                    "VulnerabilityOccurrencesSummary",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static VulnerabilityOccurrencesSummary {
        static mut instance: ::protobuf::lazy::Lazy<VulnerabilityOccurrencesSummary> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const VulnerabilityOccurrencesSummary,
        };
        unsafe {
            instance.get(VulnerabilityOccurrencesSummary::new)
        }
    }
}

impl ::protobuf::Clear for VulnerabilityOccurrencesSummary {
    fn clear(&mut self) {
        self.counts.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for VulnerabilityOccurrencesSummary {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for VulnerabilityOccurrencesSummary {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct VulnerabilityOccurrencesSummary_FixableTotalByDigest {
    // message fields
    pub resource: ::protobuf::SingularPtrField<Resource>,
    pub severity: super::vulnerability::Severity,
    pub fixable_count: i64,
    pub total_count: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a VulnerabilityOccurrencesSummary_FixableTotalByDigest {
    fn default() -> &'a VulnerabilityOccurrencesSummary_FixableTotalByDigest {
        <VulnerabilityOccurrencesSummary_FixableTotalByDigest as ::protobuf::Message>::default_instance()
    }
}

impl VulnerabilityOccurrencesSummary_FixableTotalByDigest {
    pub fn new() -> VulnerabilityOccurrencesSummary_FixableTotalByDigest {
        ::std::default::Default::default()
    }

    // .grafeas.v1beta1.Resource resource = 1;


    pub fn get_resource(&self) -> &Resource {
        self.resource.as_ref().unwrap_or_else(|| Resource::default_instance())
    }
    pub fn clear_resource(&mut self) {
        self.resource.clear();
    }

    pub fn has_resource(&self) -> bool {
        self.resource.is_some()
    }

    // Param is passed by value, moved
    pub fn set_resource(&mut self, v: Resource) {
        self.resource = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_resource(&mut self) -> &mut Resource {
        if self.resource.is_none() {
            self.resource.set_default();
        }
        self.resource.as_mut().unwrap()
    }

    // Take field
    pub fn take_resource(&mut self) -> Resource {
        self.resource.take().unwrap_or_else(|| Resource::new())
    }

    // .grafeas.v1beta1.vulnerability.Severity severity = 2;


    pub fn get_severity(&self) -> super::vulnerability::Severity {
        self.severity
    }
    pub fn clear_severity(&mut self) {
        self.severity = super::vulnerability::Severity::SEVERITY_UNSPECIFIED;
    }

    // Param is passed by value, moved
    pub fn set_severity(&mut self, v: super::vulnerability::Severity) {
        self.severity = v;
    }

    // int64 fixable_count = 3;


    pub fn get_fixable_count(&self) -> i64 {
        self.fixable_count
    }
    pub fn clear_fixable_count(&mut self) {
        self.fixable_count = 0;
    }

    // Param is passed by value, moved
    pub fn set_fixable_count(&mut self, v: i64) {
        self.fixable_count = v;
    }

    // int64 total_count = 4;


    pub fn get_total_count(&self) -> i64 {
        self.total_count
    }
    pub fn clear_total_count(&mut self) {
        self.total_count = 0;
    }

    // Param is passed by value, moved
    pub fn set_total_count(&mut self, v: i64) {
        self.total_count = v;
    }
}

impl ::protobuf::Message for VulnerabilityOccurrencesSummary_FixableTotalByDigest {
    fn is_initialized(&self) -> bool {
        for v in &self.resource {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.resource)?;
                },
                2 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.severity, 2, &mut self.unknown_fields)?
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.fixable_count = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.total_count = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.resource.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.severity != super::vulnerability::Severity::SEVERITY_UNSPECIFIED {
            my_size += ::protobuf::rt::enum_size(2, self.severity);
        }
        if self.fixable_count != 0 {
            my_size += ::protobuf::rt::value_size(3, self.fixable_count, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.total_count != 0 {
            my_size += ::protobuf::rt::value_size(4, self.total_count, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.resource.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.severity != super::vulnerability::Severity::SEVERITY_UNSPECIFIED {
            os.write_enum(2, self.severity.value())?;
        }
        if self.fixable_count != 0 {
            os.write_int64(3, self.fixable_count)?;
        }
        if self.total_count != 0 {
            os.write_int64(4, self.total_count)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> VulnerabilityOccurrencesSummary_FixableTotalByDigest {
        VulnerabilityOccurrencesSummary_FixableTotalByDigest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Resource>>(
                    "resource",
                    |m: &VulnerabilityOccurrencesSummary_FixableTotalByDigest| { &m.resource },
                    |m: &mut VulnerabilityOccurrencesSummary_FixableTotalByDigest| { &mut m.resource },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<super::vulnerability::Severity>>(
                    "severity",
                    |m: &VulnerabilityOccurrencesSummary_FixableTotalByDigest| { &m.severity },
                    |m: &mut VulnerabilityOccurrencesSummary_FixableTotalByDigest| { &mut m.severity },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "fixable_count",
                    |m: &VulnerabilityOccurrencesSummary_FixableTotalByDigest| { &m.fixable_count },
                    |m: &mut VulnerabilityOccurrencesSummary_FixableTotalByDigest| { &mut m.fixable_count },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "total_count",
                    |m: &VulnerabilityOccurrencesSummary_FixableTotalByDigest| { &m.total_count },
                    |m: &mut VulnerabilityOccurrencesSummary_FixableTotalByDigest| { &mut m.total_count },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<VulnerabilityOccurrencesSummary_FixableTotalByDigest>(
                    "VulnerabilityOccurrencesSummary_FixableTotalByDigest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static VulnerabilityOccurrencesSummary_FixableTotalByDigest {
        static mut instance: ::protobuf::lazy::Lazy<VulnerabilityOccurrencesSummary_FixableTotalByDigest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const VulnerabilityOccurrencesSummary_FixableTotalByDigest,
        };
        unsafe {
            instance.get(VulnerabilityOccurrencesSummary_FixableTotalByDigest::new)
        }
    }
}

impl ::protobuf::Clear for VulnerabilityOccurrencesSummary_FixableTotalByDigest {
    fn clear(&mut self) {
        self.resource.clear();
        self.severity = super::vulnerability::Severity::SEVERITY_UNSPECIFIED;
        self.fixable_count = 0;
        self.total_count = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for VulnerabilityOccurrencesSummary_FixableTotalByDigest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for VulnerabilityOccurrencesSummary_FixableTotalByDigest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1bproto/v1beta1/grafeas.proto\x12\x0fgrafeas.v1beta1\x1a\x1cgoogle/a\
    pi/annotations.proto\x1a\x1bgoogle/protobuf/empty.proto\x1a\x20google/pr\
    otobuf/field_mask.proto\x1a\x1fgoogle/protobuf/timestamp.proto\x1a\x1fpr\
    oto/v1beta1/attestation.proto\x1a\x19proto/v1beta1/build.proto\x1a\x1apr\
    oto/v1beta1/common.proto\x1a\x1eproto/v1beta1/deployment.proto\x1a\x1dpr\
    oto/v1beta1/discovery.proto\x1a\x19proto/v1beta1/image.proto\x1a\x1bprot\
    o/v1beta1/package.proto\x1a\x1eproto/v1beta1/provenance.proto\x1a!proto/\
    v1beta1/vulnerability.proto\"\xb8\x06\n\nOccurrence\x12\x12\n\x04name\
    \x18\x01\x20\x01(\tR\x04name\x125\n\x08resource\x18\x02\x20\x01(\x0b2\
    \x19.grafeas.v1beta1.ResourceR\x08resource\x12\x1b\n\tnote_name\x18\x03\
    \x20\x01(\tR\x08noteName\x12-\n\x04kind\x18\x04\x20\x01(\x0e2\x19.grafea\
    s.v1beta1.NoteKindR\x04kind\x12\x20\n\x0bremediation\x18\x05\x20\x01(\tR\
    \x0bremediation\x12;\n\x0bcreate_time\x18\x06\x20\x01(\x0b2\x1a.google.p\
    rotobuf.TimestampR\ncreateTime\x12;\n\x0bupdate_time\x18\x07\x20\x01(\
    \x0b2\x1a.google.protobuf.TimestampR\nupdateTime\x12N\n\rvulnerability\
    \x18\x08\x20\x01(\x0b2&.grafeas.v1beta1.vulnerability.DetailsH\0R\rvulne\
    rability\x126\n\x05build\x18\t\x20\x01(\x0b2\x1e.grafeas.v1beta1.build.D\
    etailsH\0R\x05build\x12E\n\rderived_image\x18\n\x20\x01(\x0b2\x1e.grafea\
    s.v1beta1.image.DetailsH\0R\x0cderivedImage\x12F\n\x0cinstallation\x18\
    \x0b\x20\x01(\x0b2\x20.grafeas.v1beta1.package.DetailsH\0R\x0cinstallati\
    on\x12E\n\ndeployment\x18\x0c\x20\x01(\x0b2#.grafeas.v1beta1.deployment.\
    DetailsH\0R\ndeployment\x12D\n\ndiscovered\x18\r\x20\x01(\x0b2\".grafeas\
    .v1beta1.discovery.DetailsH\0R\ndiscovered\x12H\n\x0battestation\x18\x0e\
    \x20\x01(\x0b2$.grafeas.v1beta1.attestation.DetailsH\0R\x0battestationB\
    \t\n\x07details\"}\n\x08Resource\x12\x16\n\x04name\x18\x01\x20\x01(\tR\
    \x04nameB\x02\x18\x01\x12\x10\n\x03uri\x18\x02\x20\x01(\tR\x03uri\x12G\n\
    \x0ccontent_hash\x18\x03\x20\x01(\x0b2\x20.grafeas.v1beta1.provenance.Ha\
    shR\x0bcontentHashB\x02\x18\x01\"\xcc\x07\n\x04Note\x12\x12\n\x04name\
    \x18\x01\x20\x01(\tR\x04name\x12+\n\x11short_description\x18\x02\x20\x01\
    (\tR\x10shortDescription\x12)\n\x10long_description\x18\x03\x20\x01(\tR\
    \x0flongDescription\x12-\n\x04kind\x18\x04\x20\x01(\x0e2\x19.grafeas.v1b\
    eta1.NoteKindR\x04kind\x12<\n\x0brelated_url\x18\x05\x20\x03(\x0b2\x1b.g\
    rafeas.v1beta1.RelatedUrlR\nrelatedUrl\x12C\n\x0fexpiration_time\x18\x06\
    \x20\x01(\x0b2\x1a.google.protobuf.TimestampR\x0eexpirationTime\x12;\n\
    \x0bcreate_time\x18\x07\x20\x01(\x0b2\x1a.google.protobuf.TimestampR\ncr\
    eateTime\x12;\n\x0bupdate_time\x18\x08\x20\x01(\x0b2\x1a.google.protobuf\
    .TimestampR\nupdateTime\x12,\n\x12related_note_names\x18\t\x20\x03(\tR\
    \x10relatedNoteNames\x12T\n\rvulnerability\x18\n\x20\x01(\x0b2,.grafeas.\
    v1beta1.vulnerability.VulnerabilityH\0R\rvulnerability\x124\n\x05build\
    \x18\x0b\x20\x01(\x0b2\x1c.grafeas.v1beta1.build.BuildH\0R\x05build\x12=\
    \n\nbase_image\x18\x0c\x20\x01(\x0b2\x1c.grafeas.v1beta1.image.BasisH\0R\
    \tbaseImage\x12<\n\x07package\x18\r\x20\x01(\x0b2\x20.grafeas.v1beta1.pa\
    ckage.PackageH\0R\x07package\x12H\n\ndeployable\x18\x0e\x20\x01(\x0b2&.g\
    rafeas.v1beta1.deployment.DeployableH\0R\ndeployable\x12D\n\tdiscovery\
    \x18\x0f\x20\x01(\x0b2$.grafeas.v1beta1.discovery.DiscoveryH\0R\tdiscove\
    ry\x12]\n\x15attestation_authority\x18\x10\x20\x01(\x0b2&.grafeas.v1beta\
    1.attestation.AuthorityH\0R\x14attestationAuthorityB\x06\n\x04type\"*\n\
    \x14GetOccurrenceRequest\x12\x12\n\x04name\x18\x01\x20\x01(\tR\x04name\"\
    \x84\x01\n\x16ListOccurrencesRequest\x12\x16\n\x06parent\x18\x01\x20\x01\
    (\tR\x06parent\x12\x16\n\x06filter\x18\x02\x20\x01(\tR\x06filter\x12\x1b\
    \n\tpage_size\x18\x03\x20\x01(\x05R\x08pageSize\x12\x1d\n\npage_token\
    \x18\x04\x20\x01(\tR\tpageToken\"\x80\x01\n\x17ListOccurrencesResponse\
    \x12=\n\x0boccurrences\x18\x01\x20\x03(\x0b2\x1b.grafeas.v1beta1.Occurre\
    nceR\x0boccurrences\x12&\n\x0fnext_page_token\x18\x02\x20\x01(\tR\rnextP\
    ageToken\"-\n\x17DeleteOccurrenceRequest\x12\x12\n\x04name\x18\x01\x20\
    \x01(\tR\x04name\"n\n\x17CreateOccurrenceRequest\x12\x16\n\x06parent\x18\
    \x01\x20\x01(\tR\x06parent\x12;\n\noccurrence\x18\x02\x20\x01(\x0b2\x1b.\
    grafeas.v1beta1.OccurrenceR\noccurrence\"\xa7\x01\n\x17UpdateOccurrenceR\
    equest\x12\x12\n\x04name\x18\x01\x20\x01(\tR\x04name\x12;\n\noccurrence\
    \x18\x02\x20\x01(\x0b2\x1b.grafeas.v1beta1.OccurrenceR\noccurrence\x12;\
    \n\x0bupdate_mask\x18\x03\x20\x01(\x0b2\x1a.google.protobuf.FieldMaskR\n\
    updateMask\"$\n\x0eGetNoteRequest\x12\x12\n\x04name\x18\x01\x20\x01(\tR\
    \x04name\".\n\x18GetOccurrenceNoteRequest\x12\x12\n\x04name\x18\x01\x20\
    \x01(\tR\x04name\"~\n\x10ListNotesRequest\x12\x16\n\x06parent\x18\x01\
    \x20\x01(\tR\x06parent\x12\x16\n\x06filter\x18\x02\x20\x01(\tR\x06filter\
    \x12\x1b\n\tpage_size\x18\x03\x20\x01(\x05R\x08pageSize\x12\x1d\n\npage_\
    token\x18\x04\x20\x01(\tR\tpageToken\"h\n\x11ListNotesResponse\x12+\n\
    \x05notes\x18\x01\x20\x03(\x0b2\x15.grafeas.v1beta1.NoteR\x05notes\x12&\
    \n\x0fnext_page_token\x18\x02\x20\x01(\tR\rnextPageToken\"'\n\x11DeleteN\
    oteRequest\x12\x12\n\x04name\x18\x01\x20\x01(\tR\x04name\"o\n\x11CreateN\
    oteRequest\x12\x16\n\x06parent\x18\x01\x20\x01(\tR\x06parent\x12\x17\n\
    \x07note_id\x18\x02\x20\x01(\tR\x06noteId\x12)\n\x04note\x18\x03\x20\x01\
    (\x0b2\x15.grafeas.v1beta1.NoteR\x04note\"\x8f\x01\n\x11UpdateNoteReques\
    t\x12\x12\n\x04name\x18\x01\x20\x01(\tR\x04name\x12)\n\x04note\x18\x02\
    \x20\x01(\x0b2\x15.grafeas.v1beta1.NoteR\x04note\x12;\n\x0bupdate_mask\
    \x18\x03\x20\x01(\x0b2\x1a.google.protobuf.FieldMaskR\nupdateMask\"\x84\
    \x01\n\x1aListNoteOccurrencesRequest\x12\x12\n\x04name\x18\x01\x20\x01(\
    \tR\x04name\x12\x16\n\x06filter\x18\x02\x20\x01(\tR\x06filter\x12\x1b\n\
    \tpage_size\x18\x03\x20\x01(\x05R\x08pageSize\x12\x1d\n\npage_token\x18\
    \x04\x20\x01(\tR\tpageToken\"\x84\x01\n\x1bListNoteOccurrencesResponse\
    \x12=\n\x0boccurrences\x18\x01\x20\x03(\x0b2\x1b.grafeas.v1beta1.Occurre\
    nceR\x0boccurrences\x12&\n\x0fnext_page_token\x18\x02\x20\x01(\tR\rnextP\
    ageToken\"\xcd\x01\n\x17BatchCreateNotesRequest\x12\x16\n\x06parent\x18\
    \x01\x20\x01(\tR\x06parent\x12I\n\x05notes\x18\x02\x20\x03(\x0b23.grafea\
    s.v1beta1.BatchCreateNotesRequest.NotesEntryR\x05notes\x1aO\n\nNotesEntr\
    y\x12\x10\n\x03key\x18\x01\x20\x01(\tR\x03key\x12+\n\x05value\x18\x02\
    \x20\x01(\x0b2\x15.grafeas.v1beta1.NoteR\x05value:\x028\x01\"G\n\x18Batc\
    hCreateNotesResponse\x12+\n\x05notes\x18\x01\x20\x03(\x0b2\x15.grafeas.v\
    1beta1.NoteR\x05notes\"v\n\x1dBatchCreateOccurrencesRequest\x12\x16\n\
    \x06parent\x18\x01\x20\x01(\tR\x06parent\x12=\n\x0boccurrences\x18\x02\
    \x20\x03(\x0b2\x1b.grafeas.v1beta1.OccurrenceR\x0boccurrences\"_\n\x1eBa\
    tchCreateOccurrencesResponse\x12=\n\x0boccurrences\x18\x01\x20\x03(\x0b2\
    \x1b.grafeas.v1beta1.OccurrenceR\x0boccurrences\"[\n)GetVulnerabilityOcc\
    urrencesSummaryRequest\x12\x16\n\x06parent\x18\x01\x20\x01(\tR\x06parent\
    \x12\x16\n\x06filter\x18\x02\x20\x01(\tR\x06filter\"\xdb\x02\n\x1fVulner\
    abilityOccurrencesSummary\x12]\n\x06counts\x18\x01\x20\x03(\x0b2E.grafea\
    s.v1beta1.VulnerabilityOccurrencesSummary.FixableTotalByDigestR\x06count\
    s\x1a\xd8\x01\n\x14FixableTotalByDigest\x125\n\x08resource\x18\x01\x20\
    \x01(\x0b2\x19.grafeas.v1beta1.ResourceR\x08resource\x12C\n\x08severity\
    \x18\x02\x20\x01(\x0e2'.grafeas.v1beta1.vulnerability.SeverityR\x08sever\
    ity\x12#\n\rfixable_count\x18\x03\x20\x01(\x03R\x0cfixableCount\x12\x1f\
    \n\x0btotal_count\x18\x04\x20\x01(\x03R\ntotalCount2\xc2\x11\n\x0eGrafea\
    sV1Beta1\x12\x85\x01\n\rGetOccurrence\x12%.grafeas.v1beta1.GetOccurrence\
    Request\x1a\x1b.grafeas.v1beta1.Occurrence\"0\x82\xd3\xe4\x93\x02*\x12(/\
    v1beta1/{name=projects/*/occurrences/*}\x12\x96\x01\n\x0fListOccurrences\
    \x12'.grafeas.v1beta1.ListOccurrencesRequest\x1a(.grafeas.v1beta1.ListOc\
    currencesResponse\"0\x82\xd3\xe4\x93\x02*\x12(/v1beta1/{parent=projects/\
    *}/occurrences\x12\x86\x01\n\x10DeleteOccurrence\x12(.grafeas.v1beta1.De\
    leteOccurrenceRequest\x1a\x16.google.protobuf.Empty\"0\x82\xd3\xe4\x93\
    \x02**(/v1beta1/{name=projects/*/occurrences/*}\x12\x97\x01\n\x10CreateO\
    ccurrence\x12(.grafeas.v1beta1.CreateOccurrenceRequest\x1a\x1b.grafeas.v\
    1beta1.Occurrence\"<\x82\xd3\xe4\x93\x026\"(/v1beta1/{parent=projects/*}\
    /occurrences:\noccurrence\x12\xba\x01\n\x16BatchCreateOccurrences\x12..g\
    rafeas.v1beta1.BatchCreateOccurrencesRequest\x1a/.grafeas.v1beta1.BatchC\
    reateOccurrencesResponse\"?\x82\xd3\xe4\x93\x029\"4/v1beta1/{parent=proj\
    ects/*}/occurrences:batchCreate:\x01*\x12\x97\x01\n\x10UpdateOccurrence\
    \x12(.grafeas.v1beta1.UpdateOccurrenceRequest\x1a\x1b.grafeas.v1beta1.Oc\
    currence\"<\x82\xd3\xe4\x93\x0262(/v1beta1/{name=projects/*/occurrences/\
    *}:\noccurrence\x12\x8d\x01\n\x11GetOccurrenceNote\x12).grafeas.v1beta1.\
    GetOccurrenceNoteRequest\x1a\x15.grafeas.v1beta1.Note\"6\x82\xd3\xe4\x93\
    \x020\x12./v1beta1/{name=projects/*/occurrences/*}/notes\x12m\n\x07GetNo\
    te\x12\x1f.grafeas.v1beta1.GetNoteRequest\x1a\x15.grafeas.v1beta1.Note\"\
    *\x82\xd3\xe4\x93\x02$\x12\"/v1beta1/{name=projects/*/notes/*}\x12~\n\tL\
    istNotes\x12!.grafeas.v1beta1.ListNotesRequest\x1a\".grafeas.v1beta1.Lis\
    tNotesResponse\"*\x82\xd3\xe4\x93\x02$\x12\"/v1beta1/{parent=projects/*}\
    /notes\x12t\n\nDeleteNote\x12\".grafeas.v1beta1.DeleteNoteRequest\x1a\
    \x16.google.protobuf.Empty\"*\x82\xd3\xe4\x93\x02$*\"/v1beta1/{name=proj\
    ects/*/notes/*}\x12y\n\nCreateNote\x12\".grafeas.v1beta1.CreateNoteReque\
    st\x1a\x15.grafeas.v1beta1.Note\"0\x82\xd3\xe4\x93\x02*\"\"/v1beta1/{par\
    ent=projects/*}/notes:\x04note\x12\xa2\x01\n\x10BatchCreateNotes\x12(.gr\
    afeas.v1beta1.BatchCreateNotesRequest\x1a).grafeas.v1beta1.BatchCreateNo\
    tesResponse\"9\x82\xd3\xe4\x93\x023\"./v1beta1/{parent=projects/*}/notes\
    :batchCreate:\x01*\x12y\n\nUpdateNote\x12\".grafeas.v1beta1.UpdateNoteRe\
    quest\x1a\x15.grafeas.v1beta1.Note\"0\x82\xd3\xe4\x93\x02*2\"/v1beta1/{n\
    ame=projects/*/notes/*}:\x04note\x12\xa8\x01\n\x13ListNoteOccurrences\
    \x12+.grafeas.v1beta1.ListNoteOccurrencesRequest\x1a,.grafeas.v1beta1.Li\
    stNoteOccurrencesResponse\"6\x82\xd3\xe4\x93\x020\x12./v1beta1/{name=pro\
    jects/*/notes/*}/occurrences\x12\xd9\x01\n\"GetVulnerabilityOccurrencesS\
    ummary\x12:.grafeas.v1beta1.GetVulnerabilityOccurrencesSummaryRequest\
    \x1a0.grafeas.v1beta1.VulnerabilityOccurrencesSummary\"E\x82\xd3\xe4\x93\
    \x02?\x12=/v1beta1/{parent=projects/*}/occurrences:vulnerabilitySummaryB\
    W\n\x12io.grafeas.v1beta1P\x01Z9github.com/grafeas/grafeas/proto/v1beta1\
    /grafeas_go_proto\xa2\x02\x03GRAJ\xdb\x88\x01\n\x07\x12\x05\x0e\0\x81\
    \x04\x01\n\xda\x04\n\x01\x0c\x12\x03\x0e\0\x122\xcf\x04\x20Copyright\x20\
    2018\x20The\x20Grafeas\x20Authors.\x20All\x20rights\x20reserved.\n\n\x20\
    Licensed\x20under\x20the\x20Apache\x20License,\x20Version\x202.0\x20(the\
    \x20\"License\");\n\x20you\x20may\x20not\x20use\x20this\x20file\x20excep\
    t\x20in\x20compliance\x20with\x20the\x20License.\n\x20You\x20may\x20obta\
    in\x20a\x20copy\x20of\x20the\x20License\x20at\n\n\x20\x20\x20\x20http://\
    www.apache.org/licenses/LICENSE-2.0\n\n\x20Unless\x20required\x20by\x20a\
    pplicable\x20law\x20or\x20agreed\x20to\x20in\x20writing,\x20software\n\
    \x20distributed\x20under\x20the\x20License\x20is\x20distributed\x20on\
    \x20an\x20\"AS\x20IS\"\x20BASIS,\n\x20WITHOUT\x20WARRANTIES\x20OR\x20CON\
    DITIONS\x20OF\x20ANY\x20KIND,\x20either\x20express\x20or\x20implied.\n\
    \x20See\x20the\x20License\x20for\x20the\x20specific\x20language\x20gover\
    ning\x20permissions\x20and\n\x20limitations\x20under\x20the\x20License.\
    \n\n\x08\n\x01\x02\x12\x03\x10\0\x18\n\x08\n\x01\x08\x12\x03\x12\0P\n\t\
    \n\x02\x08\x0b\x12\x03\x12\0P\n\x08\n\x01\x08\x12\x03\x13\0\"\n\t\n\x02\
    \x08\n\x12\x03\x13\0\"\n\x08\n\x01\x08\x12\x03\x14\0+\n\t\n\x02\x08\x01\
    \x12\x03\x14\0+\n\x08\n\x01\x08\x12\x03\x15\0!\n\t\n\x02\x08$\x12\x03\
    \x15\0!\n\t\n\x02\x03\0\x12\x03\x17\0&\n\t\n\x02\x03\x01\x12\x03\x18\0%\
    \n\t\n\x02\x03\x02\x12\x03\x19\0*\n\t\n\x02\x03\x03\x12\x03\x1a\0)\n\t\n\
    \x02\x03\x04\x12\x03\x1b\0)\n\t\n\x02\x03\x05\x12\x03\x1c\0#\n\t\n\x02\
    \x03\x06\x12\x03\x1d\0$\n\t\n\x02\x03\x07\x12\x03\x1e\0(\n\t\n\x02\x03\
    \x08\x12\x03\x1f\0'\n\t\n\x02\x03\t\x12\x03\x20\0#\n\t\n\x02\x03\n\x12\
    \x03!\0%\n\t\n\x02\x03\x0b\x12\x03\"\0(\n\t\n\x02\x03\x0c\x12\x03#\0+\n\
    \xa9\x05\n\x02\x06\0\x12\x053\0\xae\x01\x01\x1a\x9b\x05\x20[Grafeas](gra\
    feas.io)\x20API.\n\n\x20Retrieves\x20analysis\x20results\x20of\x20Cloud\
    \x20components\x20such\x20as\x20Docker\x20container\n\x20images.\n\n\x20\
    Analysis\x20results\x20are\x20stored\x20as\x20a\x20series\x20of\x20occur\
    rences.\x20An\x20`Occurrence`\n\x20contains\x20information\x20about\x20a\
    \x20specific\x20analysis\x20instance\x20on\x20a\x20resource.\x20An\n\x20\
    occurrence\x20refers\x20to\x20a\x20`Note`.\x20A\x20note\x20contains\x20d\
    etails\x20describing\x20the\n\x20analysis\x20and\x20is\x20generally\x20s\
    tored\x20in\x20a\x20separate\x20project,\x20called\x20a\x20`Provider`.\n\
    \x20Multiple\x20occurrences\x20can\x20refer\x20to\x20the\x20same\x20note\
    .\n\n\x20For\x20example,\x20an\x20SSL\x20vulnerability\x20could\x20affec\
    t\x20multiple\x20images.\x20In\x20this\x20case,\n\x20there\x20would\x20b\
    e\x20one\x20note\x20for\x20the\x20vulnerability\x20and\x20an\x20occurren\
    ce\x20for\x20each\n\x20image\x20with\x20the\x20vulnerability\x20referrin\
    g\x20to\x20that\x20note.\n\n\n\n\x03\x06\0\x01\x12\x033\x08\x16\n.\n\x04\
    \x06\0\x02\0\x12\x045\x029\x03\x1a\x20\x20Gets\x20the\x20specified\x20oc\
    currence.\n\n\x0c\n\x05\x06\0\x02\0\x01\x12\x035\x06\x13\n\x0c\n\x05\x06\
    \0\x02\0\x02\x12\x035\x14(\n\x0c\n\x05\x06\0\x02\0\x03\x12\x0353=\n\r\n\
    \x05\x06\0\x02\0\x04\x12\x046\x048\x06\n\x11\n\t\x06\0\x02\0\x04\xb0\xca\
    \xbc\"\x12\x046\x048\x06\n<\n\x04\x06\0\x02\x01\x12\x04<\x02A\x03\x1a.\
    \x20Lists\x20occurrences\x20for\x20the\x20specified\x20project.\n\n\x0c\
    \n\x05\x06\0\x02\x01\x01\x12\x03<\x06\x15\n\x0c\n\x05\x06\0\x02\x01\x02\
    \x12\x03<\x16,\n\x0c\n\x05\x06\0\x02\x01\x03\x12\x03=\x0f&\n\r\n\x05\x06\
    \0\x02\x01\x04\x12\x04>\x04@\x06\n\x11\n\t\x06\0\x02\x01\x04\xb0\xca\xbc\
    \"\x12\x04>\x04@\x06\n\xad\x01\n\x04\x06\0\x02\x02\x12\x04F\x02K\x03\x1a\
    \x9e\x01\x20Deletes\x20the\x20specified\x20occurrence.\x20For\x20example\
    ,\x20use\x20this\x20method\x20to\x20delete\x20an\n\x20occurrence\x20when\
    \x20the\x20occurrence\x20is\x20no\x20longer\x20applicable\x20for\x20the\
    \x20given\n\x20resource.\n\n\x0c\n\x05\x06\0\x02\x02\x01\x12\x03F\x06\
    \x16\n\x0c\n\x05\x06\0\x02\x02\x02\x12\x03F\x17.\n\x0c\n\x05\x06\0\x02\
    \x02\x03\x12\x03G\x0f$\n\r\n\x05\x06\0\x02\x02\x04\x12\x04H\x04J\x06\n\
    \x11\n\t\x06\0\x02\x02\x04\xb0\xca\xbc\"\x12\x04H\x04J\x06\n)\n\x04\x06\
    \0\x02\x03\x12\x04N\x02S\x03\x1a\x1b\x20Creates\x20a\x20new\x20occurrenc\
    e.\n\n\x0c\n\x05\x06\0\x02\x03\x01\x12\x03N\x06\x16\n\x0c\n\x05\x06\0\
    \x02\x03\x02\x12\x03N\x17.\n\x0c\n\x05\x06\0\x02\x03\x03\x12\x03N9C\n\r\
    \n\x05\x06\0\x02\x03\x04\x12\x04O\x04R\x06\n\x11\n\t\x06\0\x02\x03\x04\
    \xb0\xca\xbc\"\x12\x04O\x04R\x06\n1\n\x04\x06\0\x02\x04\x12\x04V\x02\\\
    \x03\x1a#\x20Creates\x20new\x20occurrences\x20in\x20batch.\n\n\x0c\n\x05\
    \x06\0\x02\x04\x01\x12\x03V\x06\x1c\n\x0c\n\x05\x06\0\x02\x04\x02\x12\
    \x03V\x1d:\n\x0c\n\x05\x06\0\x02\x04\x03\x12\x03W\x0f-\n\r\n\x05\x06\0\
    \x02\x04\x04\x12\x04X\x04[\x06\n\x11\n\t\x06\0\x02\x04\x04\xb0\xca\xbc\"\
    \x12\x04X\x04[\x06\n1\n\x04\x06\0\x02\x05\x12\x04_\x02d\x03\x1a#\x20Upda\
    tes\x20the\x20specified\x20occurrence.\n\n\x0c\n\x05\x06\0\x02\x05\x01\
    \x12\x03_\x06\x16\n\x0c\n\x05\x06\0\x02\x05\x02\x12\x03_\x17.\n\x0c\n\
    \x05\x06\0\x02\x05\x03\x12\x03_9C\n\r\n\x05\x06\0\x02\x05\x04\x12\x04`\
    \x04c\x06\n\x11\n\t\x06\0\x02\x05\x04\xb0\xca\xbc\"\x12\x04`\x04c\x06\n\
    \x9d\x01\n\x04\x06\0\x02\x06\x12\x04h\x02l\x03\x1a\x8e\x01\x20Gets\x20th\
    e\x20note\x20attached\x20to\x20the\x20specified\x20occurrence.\x20Consum\
    er\x20projects\x20can\n\x20use\x20this\x20method\x20to\x20get\x20a\x20no\
    te\x20that\x20belongs\x20to\x20a\x20provider\x20project.\n\n\x0c\n\x05\
    \x06\0\x02\x06\x01\x12\x03h\x06\x17\n\x0c\n\x05\x06\0\x02\x06\x02\x12\
    \x03h\x180\n\x0c\n\x05\x06\0\x02\x06\x03\x12\x03h;?\n\r\n\x05\x06\0\x02\
    \x06\x04\x12\x04i\x04k\x06\n\x11\n\t\x06\0\x02\x06\x04\xb0\xca\xbc\"\x12\
    \x04i\x04k\x06\n(\n\x04\x06\0\x02\x07\x12\x04o\x02s\x03\x1a\x1a\x20Gets\
    \x20the\x20specified\x20note.\n\n\x0c\n\x05\x06\0\x02\x07\x01\x12\x03o\
    \x06\r\n\x0c\n\x05\x06\0\x02\x07\x02\x12\x03o\x0e\x1c\n\x0c\n\x05\x06\0\
    \x02\x07\x03\x12\x03o'+\n\r\n\x05\x06\0\x02\x07\x04\x12\x04p\x04r\x06\n\
    \x11\n\t\x06\0\x02\x07\x04\xb0\xca\xbc\"\x12\x04p\x04r\x06\n6\n\x04\x06\
    \0\x02\x08\x12\x04v\x02z\x03\x1a(\x20Lists\x20notes\x20for\x20the\x20spe\
    cified\x20project.\n\n\x0c\n\x05\x06\0\x02\x08\x01\x12\x03v\x06\x0f\n\
    \x0c\n\x05\x06\0\x02\x08\x02\x12\x03v\x10\x20\n\x0c\n\x05\x06\0\x02\x08\
    \x03\x12\x03v+<\n\r\n\x05\x06\0\x02\x08\x04\x12\x04w\x04y\x06\n\x11\n\t\
    \x06\0\x02\x08\x04\xb0\xca\xbc\"\x12\x04w\x04y\x06\n,\n\x04\x06\0\x02\t\
    \x12\x05}\x02\x81\x01\x03\x1a\x1d\x20Deletes\x20the\x20specified\x20note\
    .\n\n\x0c\n\x05\x06\0\x02\t\x01\x12\x03}\x06\x10\n\x0c\n\x05\x06\0\x02\t\
    \x02\x12\x03}\x11\"\n\x0c\n\x05\x06\0\x02\t\x03\x12\x03}-B\n\x0e\n\x05\
    \x06\0\x02\t\x04\x12\x05~\x04\x80\x01\x06\n\x12\n\t\x06\0\x02\t\x04\xb0\
    \xca\xbc\"\x12\x05~\x04\x80\x01\x06\n%\n\x04\x06\0\x02\n\x12\x06\x84\x01\
    \x02\x89\x01\x03\x1a\x15\x20Creates\x20a\x20new\x20note.\n\n\r\n\x05\x06\
    \0\x02\n\x01\x12\x04\x84\x01\x06\x10\n\r\n\x05\x06\0\x02\n\x02\x12\x04\
    \x84\x01\x11\"\n\r\n\x05\x06\0\x02\n\x03\x12\x04\x84\x01-1\n\x0f\n\x05\
    \x06\0\x02\n\x04\x12\x06\x85\x01\x04\x88\x01\x06\n\x13\n\t\x06\0\x02\n\
    \x04\xb0\xca\xbc\"\x12\x06\x85\x01\x04\x88\x01\x06\n-\n\x04\x06\0\x02\
    \x0b\x12\x06\x8c\x01\x02\x92\x01\x03\x1a\x1d\x20Creates\x20new\x20notes\
    \x20in\x20batch.\n\n\r\n\x05\x06\0\x02\x0b\x01\x12\x04\x8c\x01\x06\x16\n\
    \r\n\x05\x06\0\x02\x0b\x02\x12\x04\x8c\x01\x17.\n\r\n\x05\x06\0\x02\x0b\
    \x03\x12\x04\x8d\x01\x0f'\n\x0f\n\x05\x06\0\x02\x0b\x04\x12\x06\x8e\x01\
    \x04\x91\x01\x06\n\x13\n\t\x06\0\x02\x0b\x04\xb0\xca\xbc\"\x12\x06\x8e\
    \x01\x04\x91\x01\x06\n-\n\x04\x06\0\x02\x0c\x12\x06\x95\x01\x02\x9a\x01\
    \x03\x1a\x1d\x20Updates\x20the\x20specified\x20note.\n\n\r\n\x05\x06\0\
    \x02\x0c\x01\x12\x04\x95\x01\x06\x10\n\r\n\x05\x06\0\x02\x0c\x02\x12\x04\
    \x95\x01\x11\"\n\r\n\x05\x06\0\x02\x0c\x03\x12\x04\x95\x01-1\n\x0f\n\x05\
    \x06\0\x02\x0c\x04\x12\x06\x96\x01\x04\x99\x01\x06\n\x13\n\t\x06\0\x02\
    \x0c\x04\xb0\xca\xbc\"\x12\x06\x96\x01\x04\x99\x01\x06\n\xbc\x01\n\x04\
    \x06\0\x02\r\x12\x06\x9f\x01\x02\xa4\x01\x03\x1a\xab\x01\x20Lists\x20occ\
    urrences\x20referencing\x20the\x20specified\x20note.\x20Provider\x20proj\
    ects\x20can\x20use\n\x20this\x20method\x20to\x20get\x20all\x20occurrence\
    s\x20across\x20consumer\x20projects\x20referencing\x20the\n\x20specified\
    \x20note.\n\n\r\n\x05\x06\0\x02\r\x01\x12\x04\x9f\x01\x06\x19\n\r\n\x05\
    \x06\0\x02\r\x02\x12\x04\x9f\x01\x1a4\n\r\n\x05\x06\0\x02\r\x03\x12\x04\
    \xa0\x01\x0f*\n\x0f\n\x05\x06\0\x02\r\x04\x12\x06\xa1\x01\x04\xa3\x01\
    \x06\n\x13\n\t\x06\0\x02\r\x04\xb0\xca\xbc\"\x12\x06\xa1\x01\x04\xa3\x01\
    \x06\nK\n\x04\x06\0\x02\x0e\x12\x06\xa7\x01\x02\xad\x01\x03\x1a;\x20Gets\
    \x20a\x20summary\x20of\x20the\x20number\x20and\x20severity\x20of\x20occu\
    rrences.\n\n\r\n\x05\x06\0\x02\x0e\x01\x12\x04\xa7\x01\x06(\n\r\n\x05\
    \x06\0\x02\x0e\x02\x12\x04\xa8\x01\x06/\n\r\n\x05\x06\0\x02\x0e\x03\x12\
    \x04\xa9\x01\x0f.\n\x0f\n\x05\x06\0\x02\x0e\x04\x12\x06\xaa\x01\x04\xac\
    \x01\x06\n\x13\n\t\x06\0\x02\x0e\x04\xb0\xca\xbc\"\x12\x06\xaa\x01\x04\
    \xac\x01\x06\nR\n\x02\x04\0\x12\x06\xb1\x01\0\xe0\x01\x01\x1aD\x20An\x20\
    instance\x20of\x20an\x20analysis\x20type\x20that\x20has\x20been\x20found\
    \x20on\x20a\x20resource.\n\n\x0b\n\x03\x04\0\x01\x12\x04\xb1\x01\x08\x12\
    \n|\n\x04\x04\0\x02\0\x12\x04\xb4\x01\x02\x12\x1an\x20Output\x20only.\
    \x20The\x20name\x20of\x20the\x20occurrence\x20in\x20the\x20form\x20of\n\
    \x20`projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]`.\n\n\x0f\n\x05\
    \x04\0\x02\0\x04\x12\x06\xb4\x01\x02\xb1\x01\x14\n\r\n\x05\x04\0\x02\0\
    \x05\x12\x04\xb4\x01\x02\x08\n\r\n\x05\x04\0\x02\0\x01\x12\x04\xb4\x01\t\
    \r\n\r\n\x05\x04\0\x02\0\x03\x12\x04\xb4\x01\x10\x11\nS\n\x04\x04\0\x02\
    \x01\x12\x04\xb7\x01\x02\x18\x1aE\x20Required.\x20Immutable.\x20The\x20r\
    esource\x20for\x20which\x20the\x20occurrence\x20applies.\n\n\x0f\n\x05\
    \x04\0\x02\x01\x04\x12\x06\xb7\x01\x02\xb4\x01\x12\n\r\n\x05\x04\0\x02\
    \x01\x06\x12\x04\xb7\x01\x02\n\n\r\n\x05\x04\0\x02\x01\x01\x12\x04\xb7\
    \x01\x0b\x13\n\r\n\x05\x04\0\x02\x01\x03\x12\x04\xb7\x01\x16\x17\n\xc8\
    \x01\n\x04\x04\0\x02\x02\x12\x04\xbc\x01\x02\x17\x1a\xb9\x01\x20Required\
    .\x20Immutable.\x20The\x20analysis\x20note\x20associated\x20with\x20this\
    \x20occurrence,\x20in\n\x20the\x20form\x20of\x20`projects/[PROVIDER_ID]/\
    notes/[NOTE_ID]`.\x20This\x20field\x20can\x20be\n\x20used\x20as\x20a\x20\
    filter\x20in\x20list\x20requests.\n\n\x0f\n\x05\x04\0\x02\x02\x04\x12\
    \x06\xbc\x01\x02\xb7\x01\x18\n\r\n\x05\x04\0\x02\x02\x05\x12\x04\xbc\x01\
    \x02\x08\n\r\n\x05\x04\0\x02\x02\x01\x12\x04\xbc\x01\t\x12\n\r\n\x05\x04\
    \0\x02\x02\x03\x12\x04\xbc\x01\x15\x16\n\x9a\x01\n\x04\x04\0\x02\x03\x12\
    \x04\xc0\x01\x02$\x1a\x8b\x01\x20Output\x20only.\x20This\x20explicitly\
    \x20denotes\x20which\x20of\x20the\x20occurrence\x20details\x20are\n\x20s\
    pecified.\x20This\x20field\x20can\x20be\x20used\x20as\x20a\x20filter\x20\
    in\x20list\x20requests.\n\n\x0f\n\x05\x04\0\x02\x03\x04\x12\x06\xc0\x01\
    \x02\xbc\x01\x17\n\r\n\x05\x04\0\x02\x03\x06\x12\x04\xc0\x01\x02\x1a\n\r\
    \n\x05\x04\0\x02\x03\x01\x12\x04\xc0\x01\x1b\x1f\n\r\n\x05\x04\0\x02\x03\
    \x03\x12\x04\xc0\x01\"#\nN\n\x04\x04\0\x02\x04\x12\x04\xc3\x01\x02\x19\
    \x1a@\x20A\x20description\x20of\x20actions\x20that\x20can\x20be\x20taken\
    \x20to\x20remedy\x20the\x20note.\n\n\x0f\n\x05\x04\0\x02\x04\x04\x12\x06\
    \xc3\x01\x02\xc0\x01$\n\r\n\x05\x04\0\x02\x04\x05\x12\x04\xc3\x01\x02\
    \x08\n\r\n\x05\x04\0\x02\x04\x01\x12\x04\xc3\x01\t\x14\n\r\n\x05\x04\0\
    \x02\x04\x03\x12\x04\xc3\x01\x17\x18\nB\n\x04\x04\0\x02\x05\x12\x04\xc6\
    \x01\x02,\x1a4\x20Output\x20only.\x20The\x20time\x20this\x20occurrence\
    \x20was\x20created.\n\n\x0f\n\x05\x04\0\x02\x05\x04\x12\x06\xc6\x01\x02\
    \xc3\x01\x19\n\r\n\x05\x04\0\x02\x05\x06\x12\x04\xc6\x01\x02\x1b\n\r\n\
    \x05\x04\0\x02\x05\x01\x12\x04\xc6\x01\x1c'\n\r\n\x05\x04\0\x02\x05\x03\
    \x12\x04\xc6\x01*+\nG\n\x04\x04\0\x02\x06\x12\x04\xc9\x01\x02,\x1a9\x20O\
    utput\x20only.\x20The\x20time\x20this\x20occurrence\x20was\x20last\x20up\
    dated.\n\n\x0f\n\x05\x04\0\x02\x06\x04\x12\x06\xc9\x01\x02\xc6\x01,\n\r\
    \n\x05\x04\0\x02\x06\x06\x12\x04\xc9\x01\x02\x1b\n\r\n\x05\x04\0\x02\x06\
    \x01\x12\x04\xc9\x01\x1c'\n\r\n\x05\x04\0\x02\x06\x03\x12\x04\xc9\x01*+\
    \nf\n\x04\x04\0\x08\0\x12\x06\xcd\x01\x02\xdd\x01\x03\x1aV\x20Required.\
    \x20Immutable.\x20Describes\x20the\x20details\x20of\x20the\x20note\x20ki\
    nd\x20found\x20on\x20this\n\x20resource.\n\n\r\n\x05\x04\0\x08\0\x01\x12\
    \x04\xcd\x01\x08\x0f\n3\n\x04\x04\0\x02\x07\x12\x04\xcf\x01\x04<\x1a%\
    \x20Describes\x20a\x20security\x20vulnerability.\n\n\r\n\x05\x04\0\x02\
    \x07\x06\x12\x04\xcf\x01\x04)\n\r\n\x05\x04\0\x02\x07\x01\x12\x04\xcf\
    \x01*7\n\r\n\x05\x04\0\x02\x07\x03\x12\x04\xcf\x01:;\n-\n\x04\x04\0\x02\
    \x08\x12\x04\xd1\x01\x04,\x1a\x1f\x20Describes\x20a\x20verifiable\x20bui\
    ld.\n\n\r\n\x05\x04\0\x02\x08\x06\x12\x04\xd1\x01\x04!\n\r\n\x05\x04\0\
    \x02\x08\x01\x12\x04\xd1\x01\"'\n\r\n\x05\x04\0\x02\x08\x03\x12\x04\xd1\
    \x01*+\n[\n\x04\x04\0\x02\t\x12\x04\xd4\x01\x045\x1aM\x20Describes\x20ho\
    w\x20this\x20resource\x20derives\x20from\x20the\x20basis\x20in\x20the\
    \x20associated\n\x20note.\n\n\r\n\x05\x04\0\x02\t\x06\x12\x04\xd4\x01\
    \x04!\n\r\n\x05\x04\0\x02\t\x01\x12\x04\xd4\x01\"/\n\r\n\x05\x04\0\x02\t\
    \x03\x12\x04\xd4\x0124\nO\n\x04\x04\0\x02\n\x12\x04\xd6\x01\x046\x1aA\
    \x20Describes\x20the\x20installation\x20of\x20a\x20package\x20on\x20the\
    \x20linked\x20resource.\n\n\r\n\x05\x04\0\x02\n\x06\x12\x04\xd6\x01\x04#\
    \n\r\n\x05\x04\0\x02\n\x01\x12\x04\xd6\x01$0\n\r\n\x05\x04\0\x02\n\x03\
    \x12\x04\xd6\x0135\nE\n\x04\x04\0\x02\x0b\x12\x04\xd8\x01\x047\x1a7\x20D\
    escribes\x20the\x20deployment\x20of\x20an\x20artifact\x20on\x20a\x20runt\
    ime.\n\n\r\n\x05\x04\0\x02\x0b\x06\x12\x04\xd8\x01\x04&\n\r\n\x05\x04\0\
    \x02\x0b\x01\x12\x04\xd8\x01'1\n\r\n\x05\x04\0\x02\x0b\x03\x12\x04\xd8\
    \x0146\n9\n\x04\x04\0\x02\x0c\x12\x04\xda\x01\x046\x1a+\x20Describes\x20\
    when\x20a\x20resource\x20was\x20discovered.\n\n\r\n\x05\x04\0\x02\x0c\
    \x06\x12\x04\xda\x01\x04%\n\r\n\x05\x04\0\x02\x0c\x01\x12\x04\xda\x01&0\
    \n\r\n\x05\x04\0\x02\x0c\x03\x12\x04\xda\x0135\n8\n\x04\x04\0\x02\r\x12\
    \x04\xdc\x01\x049\x1a*\x20Describes\x20an\x20attestation\x20of\x20an\x20\
    artifact.\n\n\r\n\x05\x04\0\x02\r\x06\x12\x04\xdc\x01\x04'\n\r\n\x05\x04\
    \0\x02\r\x01\x12\x04\xdc\x01(3\n\r\n\x05\x04\0\x02\r\x03\x12\x04\xdc\x01\
    68\nN\n\x02\x04\x01\x12\x06\xe3\x01\0\xf4\x01\x01\x1a@\x20An\x20entity\
    \x20that\x20can\x20have\x20metadata.\x20For\x20example,\x20a\x20Docker\
    \x20image.\n\n\x0b\n\x03\x04\x01\x01\x12\x04\xe3\x01\x08\x10\n\x89\x01\n\
    \x04\x04\x01\x02\0\x12\x04\xe8\x01\x02&\x1a{\x20Deprecated,\x20do\x20not\
    \x20use.\x20Use\x20uri\x20instead.\n\n\x20The\x20name\x20of\x20the\x20re\
    source.\x20For\x20example,\x20the\x20name\x20of\x20a\x20Docker\x20image\
    \x20-\n\x20\"Debian\".\n\n\x0f\n\x05\x04\x01\x02\0\x04\x12\x06\xe8\x01\
    \x02\xe3\x01\x12\n\r\n\x05\x04\x01\x02\0\x05\x12\x04\xe8\x01\x02\x08\n\r\
    \n\x05\x04\x01\x02\0\x01\x12\x04\xe8\x01\t\r\n\r\n\x05\x04\x01\x02\0\x03\
    \x12\x04\xe8\x01\x10\x11\n\r\n\x05\x04\x01\x02\0\x08\x12\x04\xe8\x01\x12\
    %\n\x0e\n\x06\x04\x01\x02\0\x08\x03\x12\x04\xe8\x01\x13$\n\x85\x01\n\x04\
    \x04\x01\x02\x01\x12\x04\xec\x01\x02\x11\x1aw\x20Required.\x20The\x20uni\
    que\x20URI\x20of\x20the\x20resource.\x20For\x20example,\n\x20`https://gc\
    r.io/project/image@sha256:foo`\x20for\x20a\x20Docker\x20image.\n\n\x0f\n\
    \x05\x04\x01\x02\x01\x04\x12\x06\xec\x01\x02\xe8\x01&\n\r\n\x05\x04\x01\
    \x02\x01\x05\x12\x04\xec\x01\x02\x08\n\r\n\x05\x04\x01\x02\x01\x01\x12\
    \x04\xec\x01\t\x0c\n\r\n\x05\x04\x01\x02\x01\x03\x12\x04\xec\x01\x0f\x10\
    \n|\n\x04\x04\x01\x02\x02\x12\x04\xf1\x01\x02G\x1an\x20Deprecated,\x20do\
    \x20not\x20use.\x20Use\x20uri\x20instead.\n\n\x20The\x20hash\x20of\x20th\
    e\x20resource\x20content.\x20For\x20example,\x20the\x20Docker\x20digest.\
    \n\n\x0f\n\x05\x04\x01\x02\x02\x04\x12\x06\xf1\x01\x02\xec\x01\x11\n\r\n\
    \x05\x04\x01\x02\x02\x06\x12\x04\xf1\x01\x02!\n\r\n\x05\x04\x01\x02\x02\
    \x01\x12\x04\xf1\x01\".\n\r\n\x05\x04\x01\x02\x02\x03\x12\x04\xf1\x0112\
    \n\r\n\x05\x04\x01\x02\x02\x08\x12\x04\xf1\x013F\n\x0e\n\x06\x04\x01\x02\
    \x02\x08\x03\x12\x04\xf1\x014E\nC\n\x02\x04\x02\x12\x06\xf7\x01\0\xaa\
    \x02\x01\x1a5\x20A\x20type\x20of\x20analysis\x20that\x20can\x20be\x20don\
    e\x20for\x20a\x20resource.\n\n\x0b\n\x03\x04\x02\x01\x12\x04\xf7\x01\x08\
    \x0c\nk\n\x04\x04\x02\x02\0\x12\x04\xfa\x01\x02\x12\x1a]\x20Output\x20on\
    ly.\x20The\x20name\x20of\x20the\x20note\x20in\x20the\x20form\x20of\n\x20\
    `projects/[PROVIDER_ID]/notes/[NOTE_ID]`.\n\n\x0f\n\x05\x04\x02\x02\0\
    \x04\x12\x06\xfa\x01\x02\xf7\x01\x0e\n\r\n\x05\x04\x02\x02\0\x05\x12\x04\
    \xfa\x01\x02\x08\n\r\n\x05\x04\x02\x02\0\x01\x12\x04\xfa\x01\t\r\n\r\n\
    \x05\x04\x02\x02\0\x03\x12\x04\xfa\x01\x10\x11\n8\n\x04\x04\x02\x02\x01\
    \x12\x04\xfd\x01\x02\x1f\x1a*\x20A\x20one\x20sentence\x20description\x20\
    of\x20this\x20note.\n\n\x0f\n\x05\x04\x02\x02\x01\x04\x12\x06\xfd\x01\
    \x02\xfa\x01\x12\n\r\n\x05\x04\x02\x02\x01\x05\x12\x04\xfd\x01\x02\x08\n\
    \r\n\x05\x04\x02\x02\x01\x01\x12\x04\xfd\x01\t\x1a\n\r\n\x05\x04\x02\x02\
    \x01\x03\x12\x04\xfd\x01\x1d\x1e\n4\n\x04\x04\x02\x02\x02\x12\x04\x80\
    \x02\x02\x1e\x1a&\x20A\x20detailed\x20description\x20of\x20this\x20note.\
    \n\n\x0f\n\x05\x04\x02\x02\x02\x04\x12\x06\x80\x02\x02\xfd\x01\x1f\n\r\n\
    \x05\x04\x02\x02\x02\x05\x12\x04\x80\x02\x02\x08\n\r\n\x05\x04\x02\x02\
    \x02\x01\x12\x04\x80\x02\t\x19\n\r\n\x05\x04\x02\x02\x02\x03\x12\x04\x80\
    \x02\x1c\x1d\nh\n\x04\x04\x02\x02\x03\x12\x04\x84\x02\x02$\x1aZ\x20Outpu\
    t\x20only.\x20The\x20type\x20of\x20analysis.\x20This\x20field\x20can\x20\
    be\x20used\x20as\x20a\x20filter\x20in\n\x20list\x20requests.\n\n\x0f\n\
    \x05\x04\x02\x02\x03\x04\x12\x06\x84\x02\x02\x80\x02\x1e\n\r\n\x05\x04\
    \x02\x02\x03\x06\x12\x04\x84\x02\x02\x1a\n\r\n\x05\x04\x02\x02\x03\x01\
    \x12\x04\x84\x02\x1b\x1f\n\r\n\x05\x04\x02\x02\x03\x03\x12\x04\x84\x02\"\
    #\n/\n\x04\x04\x02\x02\x04\x12\x04\x87\x02\x026\x1a!\x20URLs\x20associat\
    ed\x20with\x20this\x20note.\n\n\r\n\x05\x04\x02\x02\x04\x04\x12\x04\x87\
    \x02\x02\n\n\r\n\x05\x04\x02\x02\x04\x06\x12\x04\x87\x02\x0b%\n\r\n\x05\
    \x04\x02\x02\x04\x01\x12\x04\x87\x02&1\n\r\n\x05\x04\x02\x02\x04\x03\x12\
    \x04\x87\x0245\nP\n\x04\x04\x02\x02\x05\x12\x04\x8a\x02\x020\x1aB\x20Tim\
    e\x20of\x20expiration\x20for\x20this\x20note.\x20Empty\x20if\x20note\x20\
    does\x20not\x20expire.\n\n\x0f\n\x05\x04\x02\x02\x05\x04\x12\x06\x8a\x02\
    \x02\x87\x026\n\r\n\x05\x04\x02\x02\x05\x06\x12\x04\x8a\x02\x02\x1b\n\r\
    \n\x05\x04\x02\x02\x05\x01\x12\x04\x8a\x02\x1c+\n\r\n\x05\x04\x02\x02\
    \x05\x03\x12\x04\x8a\x02./\nr\n\x04\x04\x02\x02\x06\x12\x04\x8e\x02\x02,\
    \x1ad\x20Output\x20only.\x20The\x20time\x20this\x20note\x20was\x20create\
    d.\x20This\x20field\x20can\x20be\x20used\x20as\x20a\n\x20filter\x20in\
    \x20list\x20requests.\n\n\x0f\n\x05\x04\x02\x02\x06\x04\x12\x06\x8e\x02\
    \x02\x8a\x020\n\r\n\x05\x04\x02\x02\x06\x06\x12\x04\x8e\x02\x02\x1b\n\r\
    \n\x05\x04\x02\x02\x06\x01\x12\x04\x8e\x02\x1c'\n\r\n\x05\x04\x02\x02\
    \x06\x03\x12\x04\x8e\x02*+\nw\n\x04\x04\x02\x02\x07\x12\x04\x92\x02\x02,\
    \x1ai\x20Output\x20only.\x20The\x20time\x20this\x20note\x20was\x20last\
    \x20updated.\x20This\x20field\x20can\x20be\x20used\x20as\n\x20a\x20filte\
    r\x20in\x20list\x20requests.\n\n\x0f\n\x05\x04\x02\x02\x07\x04\x12\x06\
    \x92\x02\x02\x8e\x02,\n\r\n\x05\x04\x02\x02\x07\x06\x12\x04\x92\x02\x02\
    \x1b\n\r\n\x05\x04\x02\x02\x07\x01\x12\x04\x92\x02\x1c'\n\r\n\x05\x04\
    \x02\x02\x07\x03\x12\x04\x92\x02*+\n1\n\x04\x04\x02\x02\x08\x12\x04\x95\
    \x02\x02)\x1a#\x20Other\x20notes\x20related\x20to\x20this\x20note.\n\n\r\
    \n\x05\x04\x02\x02\x08\x04\x12\x04\x95\x02\x02\n\n\r\n\x05\x04\x02\x02\
    \x08\x05\x12\x04\x95\x02\x0b\x11\n\r\n\x05\x04\x02\x02\x08\x01\x12\x04\
    \x95\x02\x12$\n\r\n\x05\x04\x02\x02\x08\x03\x12\x04\x95\x02'(\nQ\n\x04\
    \x04\x02\x08\0\x12\x06\x98\x02\x02\xa7\x02\x03\x1aA\x20Required.\x20Immu\
    table.\x20The\x20type\x20of\x20analysis\x20this\x20note\x20represents.\n\
    \n\r\n\x05\x04\x02\x08\0\x01\x12\x04\x98\x02\x08\x0c\n:\n\x04\x04\x02\
    \x02\t\x12\x04\x9a\x02\x04C\x1a,\x20A\x20note\x20describing\x20a\x20pack\
    age\x20vulnerability.\n\n\r\n\x05\x04\x02\x02\t\x06\x12\x04\x9a\x02\x04/\
    \n\r\n\x05\x04\x02\x02\t\x01\x12\x04\x9a\x020=\n\r\n\x05\x04\x02\x02\t\
    \x03\x12\x04\x9a\x02@B\nJ\n\x04\x04\x02\x02\n\x12\x04\x9c\x02\x04+\x1a<\
    \x20A\x20note\x20describing\x20build\x20provenance\x20for\x20a\x20verifi\
    able\x20build.\n\n\r\n\x05\x04\x02\x02\n\x06\x12\x04\x9c\x02\x04\x1f\n\r\
    \n\x05\x04\x02\x02\n\x01\x12\x04\x9c\x02\x20%\n\r\n\x05\x04\x02\x02\n\
    \x03\x12\x04\x9c\x02(*\n/\n\x04\x04\x02\x02\x0b\x12\x04\x9e\x02\x040\x1a\
    !\x20A\x20note\x20describing\x20a\x20base\x20image.\n\n\r\n\x05\x04\x02\
    \x02\x0b\x06\x12\x04\x9e\x02\x04\x1f\n\r\n\x05\x04\x02\x02\x0b\x01\x12\
    \x04\x9e\x02\x20*\n\r\n\x05\x04\x02\x02\x0b\x03\x12\x04\x9e\x02-/\nO\n\
    \x04\x04\x02\x02\x0c\x12\x04\xa0\x02\x041\x1aA\x20A\x20note\x20describin\
    g\x20a\x20package\x20hosted\x20by\x20various\x20package\x20managers.\n\n\
    \r\n\x05\x04\x02\x02\x0c\x06\x12\x04\xa0\x02\x04#\n\r\n\x05\x04\x02\x02\
    \x0c\x01\x12\x04\xa0\x02$+\n\r\n\x05\x04\x02\x02\x0c\x03\x12\x04\xa0\x02\
    .0\nA\n\x04\x04\x02\x02\r\x12\x04\xa2\x02\x04:\x1a3\x20A\x20note\x20desc\
    ribing\x20something\x20that\x20can\x20be\x20deployed.\n\n\r\n\x05\x04\
    \x02\x02\r\x06\x12\x04\xa2\x02\x04)\n\r\n\x05\x04\x02\x02\r\x01\x12\x04\
    \xa2\x02*4\n\r\n\x05\x04\x02\x02\r\x03\x12\x04\xa2\x0279\nE\n\x04\x04\
    \x02\x02\x0e\x12\x04\xa4\x02\x047\x1a7\x20A\x20note\x20describing\x20the\
    \x20initial\x20analysis\x20of\x20a\x20resource.\n\n\r\n\x05\x04\x02\x02\
    \x0e\x06\x12\x04\xa4\x02\x04'\n\r\n\x05\x04\x02\x02\x0e\x01\x12\x04\xa4\
    \x02(1\n\r\n\x05\x04\x02\x02\x0e\x03\x12\x04\xa4\x0246\n6\n\x04\x04\x02\
    \x02\x0f\x12\x04\xa6\x02\x04E\x1a(\x20A\x20note\x20describing\x20an\x20a\
    ttestation\x20role.\n\n\r\n\x05\x04\x02\x02\x0f\x06\x12\x04\xa6\x02\x04)\
    \n\r\n\x05\x04\x02\x02\x0f\x01\x12\x04\xa6\x02*?\n\r\n\x05\x04\x02\x02\
    \x0f\x03\x12\x04\xa6\x02BD\n-\n\x02\x04\x03\x12\x06\xad\x02\0\xb1\x02\
    \x01\x1a\x1f\x20Request\x20to\x20get\x20an\x20occurrence.\n\n\x0b\n\x03\
    \x04\x03\x01\x12\x04\xad\x02\x08\x1c\no\n\x04\x04\x03\x02\0\x12\x04\xb0\
    \x02\x02\x12\x1aa\x20The\x20name\x20of\x20the\x20occurrence\x20in\x20the\
    \x20form\x20of\n\x20`projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]`.\
    \n\n\x0f\n\x05\x04\x03\x02\0\x04\x12\x06\xb0\x02\x02\xad\x02\x1e\n\r\n\
    \x05\x04\x03\x02\0\x05\x12\x04\xb0\x02\x02\x08\n\r\n\x05\x04\x03\x02\0\
    \x01\x12\x04\xb0\x02\t\r\n\r\n\x05\x04\x03\x02\0\x03\x12\x04\xb0\x02\x10\
    \x11\n,\n\x02\x04\x04\x12\x06\xb4\x02\0\xc4\x02\x01\x1a\x1e\x20Request\
    \x20to\x20list\x20occurrences.\n\n\x0b\n\x03\x04\x04\x01\x12\x04\xb4\x02\
    \x08\x1e\nh\n\x04\x04\x04\x02\0\x12\x04\xb7\x02\x02\x14\x1aZ\x20The\x20n\
    ame\x20of\x20the\x20project\x20to\x20list\x20occurrences\x20for\x20in\
    \x20the\x20form\x20of\n\x20`projects/[PROJECT_ID]`.\n\n\x0f\n\x05\x04\
    \x04\x02\0\x04\x12\x06\xb7\x02\x02\xb4\x02\x20\n\r\n\x05\x04\x04\x02\0\
    \x05\x12\x04\xb7\x02\x02\x08\n\r\n\x05\x04\x04\x02\0\x01\x12\x04\xb7\x02\
    \t\x0f\n\r\n\x05\x04\x04\x02\0\x03\x12\x04\xb7\x02\x12\x13\n&\n\x04\x04\
    \x04\x02\x01\x12\x04\xba\x02\x02\x14\x1a\x18\x20The\x20filter\x20express\
    ion.\n\n\x0f\n\x05\x04\x04\x02\x01\x04\x12\x06\xba\x02\x02\xb7\x02\x14\n\
    \r\n\x05\x04\x04\x02\x01\x05\x12\x04\xba\x02\x02\x08\n\r\n\x05\x04\x04\
    \x02\x01\x01\x12\x04\xba\x02\t\x0f\n\r\n\x05\x04\x04\x02\x01\x03\x12\x04\
    \xba\x02\x12\x13\n\x9b\x01\n\x04\x04\x04\x02\x02\x12\x04\xbe\x02\x02\x16\
    \x1a\x8c\x01\x20Number\x20of\x20occurrences\x20to\x20return\x20in\x20the\
    \x20list.\x20Must\x20be\x20positive.\x20Max\x20allowed\n\x20page\x20size\
    \x20is\x201000.\x20If\x20not\x20specified,\x20page\x20size\x20defaults\
    \x20to\x2020.\n\n\x0f\n\x05\x04\x04\x02\x02\x04\x12\x06\xbe\x02\x02\xba\
    \x02\x14\n\r\n\x05\x04\x04\x02\x02\x05\x12\x04\xbe\x02\x02\x07\n\r\n\x05\
    \x04\x04\x02\x02\x01\x12\x04\xbe\x02\x08\x11\n\r\n\x05\x04\x04\x02\x02\
    \x03\x12\x04\xbe\x02\x14\x15\nJ\n\x04\x04\x04\x02\x03\x12\x04\xc1\x02\
    \x02\x18\x1a<\x20Token\x20to\x20provide\x20to\x20skip\x20to\x20a\x20part\
    icular\x20spot\x20in\x20the\x20list.\n\n\x0f\n\x05\x04\x04\x02\x03\x04\
    \x12\x06\xc1\x02\x02\xbe\x02\x16\n\r\n\x05\x04\x04\x02\x03\x05\x12\x04\
    \xc1\x02\x02\x08\n\r\n\x05\x04\x04\x02\x03\x01\x12\x04\xc1\x02\t\x13\n\r\
    \n\x05\x04\x04\x02\x03\x03\x12\x04\xc1\x02\x16\x17\n1\n\x02\x04\x05\x12\
    \x06\xc7\x02\0\xce\x02\x01\x1a#\x20Response\x20for\x20listing\x20occurre\
    nces.\n\n\x0b\n\x03\x04\x05\x01\x12\x04\xc7\x02\x08\x1f\n*\n\x04\x04\x05\
    \x02\0\x12\x04\xc9\x02\x02&\x1a\x1c\x20The\x20occurrences\x20requested.\
    \n\n\r\n\x05\x04\x05\x02\0\x04\x12\x04\xc9\x02\x02\n\n\r\n\x05\x04\x05\
    \x02\0\x06\x12\x04\xc9\x02\x0b\x15\n\r\n\x05\x04\x05\x02\0\x01\x12\x04\
    \xc9\x02\x16!\n\r\n\x05\x04\x05\x02\0\x03\x12\x04\xc9\x02$%\n\xa5\x01\n\
    \x04\x04\x05\x02\x01\x12\x04\xcd\x02\x02\x1d\x1a\x96\x01\x20The\x20next\
    \x20pagination\x20token\x20in\x20the\x20list\x20response.\x20It\x20shoul\
    d\x20be\x20used\x20as\n\x20`page_token`\x20for\x20the\x20following\x20re\
    quest.\x20An\x20empty\x20value\x20means\x20no\x20more\n\x20results.\n\n\
    \x0f\n\x05\x04\x05\x02\x01\x04\x12\x06\xcd\x02\x02\xc9\x02&\n\r\n\x05\
    \x04\x05\x02\x01\x05\x12\x04\xcd\x02\x02\x08\n\r\n\x05\x04\x05\x02\x01\
    \x01\x12\x04\xcd\x02\t\x18\n\r\n\x05\x04\x05\x02\x01\x03\x12\x04\xcd\x02\
    \x1b\x1c\n/\n\x02\x04\x06\x12\x06\xd1\x02\0\xd5\x02\x01\x1a!\x20Request\
    \x20to\x20delete\x20a\x20occurrence.\n\n\x0b\n\x03\x04\x06\x01\x12\x04\
    \xd1\x02\x08\x1f\no\n\x04\x04\x06\x02\0\x12\x04\xd4\x02\x02\x12\x1aa\x20\
    The\x20name\x20of\x20the\x20occurrence\x20in\x20the\x20form\x20of\n\x20`\
    projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]`.\n\n\x0f\n\x05\x04\
    \x06\x02\0\x04\x12\x06\xd4\x02\x02\xd1\x02!\n\r\n\x05\x04\x06\x02\0\x05\
    \x12\x04\xd4\x02\x02\x08\n\r\n\x05\x04\x06\x02\0\x01\x12\x04\xd4\x02\t\r\
    \n\r\n\x05\x04\x06\x02\0\x03\x12\x04\xd4\x02\x10\x11\n3\n\x02\x04\x07\
    \x12\x06\xd8\x02\0\xde\x02\x01\x1a%\x20Request\x20to\x20create\x20a\x20n\
    ew\x20occurrence.\n\n\x0b\n\x03\x04\x07\x01\x12\x04\xd8\x02\x08\x1f\n}\n\
    \x04\x04\x07\x02\0\x12\x04\xdb\x02\x02\x14\x1ao\x20The\x20name\x20of\x20\
    the\x20project\x20in\x20the\x20form\x20of\x20`projects/[PROJECT_ID]`,\
    \x20under\x20which\n\x20the\x20occurrence\x20is\x20to\x20be\x20created.\
    \n\n\x0f\n\x05\x04\x07\x02\0\x04\x12\x06\xdb\x02\x02\xd8\x02!\n\r\n\x05\
    \x04\x07\x02\0\x05\x12\x04\xdb\x02\x02\x08\n\r\n\x05\x04\x07\x02\0\x01\
    \x12\x04\xdb\x02\t\x0f\n\r\n\x05\x04\x07\x02\0\x03\x12\x04\xdb\x02\x12\
    \x13\n)\n\x04\x04\x07\x02\x01\x12\x04\xdd\x02\x02\x1c\x1a\x1b\x20The\x20\
    occurrence\x20to\x20create.\n\n\x0f\n\x05\x04\x07\x02\x01\x04\x12\x06\
    \xdd\x02\x02\xdb\x02\x14\n\r\n\x05\x04\x07\x02\x01\x06\x12\x04\xdd\x02\
    \x02\x0c\n\r\n\x05\x04\x07\x02\x01\x01\x12\x04\xdd\x02\r\x17\n\r\n\x05\
    \x04\x07\x02\x01\x03\x12\x04\xdd\x02\x1a\x1b\n0\n\x02\x04\x08\x12\x06\
    \xe1\x02\0\xe9\x02\x01\x1a\"\x20Request\x20to\x20update\x20an\x20occurre\
    nce.\n\n\x0b\n\x03\x04\x08\x01\x12\x04\xe1\x02\x08\x1f\no\n\x04\x04\x08\
    \x02\0\x12\x04\xe4\x02\x02\x12\x1aa\x20The\x20name\x20of\x20the\x20occur\
    rence\x20in\x20the\x20form\x20of\n\x20`projects/[PROJECT_ID]/occurrences\
    /[OCCURRENCE_ID]`.\n\n\x0f\n\x05\x04\x08\x02\0\x04\x12\x06\xe4\x02\x02\
    \xe1\x02!\n\r\n\x05\x04\x08\x02\0\x05\x12\x04\xe4\x02\x02\x08\n\r\n\x05\
    \x04\x08\x02\0\x01\x12\x04\xe4\x02\t\r\n\r\n\x05\x04\x08\x02\0\x03\x12\
    \x04\xe4\x02\x10\x11\n'\n\x04\x04\x08\x02\x01\x12\x04\xe6\x02\x02\x1c\
    \x1a\x19\x20The\x20updated\x20occurrence.\n\n\x0f\n\x05\x04\x08\x02\x01\
    \x04\x12\x06\xe6\x02\x02\xe4\x02\x12\n\r\n\x05\x04\x08\x02\x01\x06\x12\
    \x04\xe6\x02\x02\x0c\n\r\n\x05\x04\x08\x02\x01\x01\x12\x04\xe6\x02\r\x17\
    \n\r\n\x05\x04\x08\x02\x01\x03\x12\x04\xe6\x02\x1a\x1b\n%\n\x04\x04\x08\
    \x02\x02\x12\x04\xe8\x02\x02,\x1a\x17\x20The\x20fields\x20to\x20update.\
    \n\n\x0f\n\x05\x04\x08\x02\x02\x04\x12\x06\xe8\x02\x02\xe6\x02\x1c\n\r\n\
    \x05\x04\x08\x02\x02\x06\x12\x04\xe8\x02\x02\x1b\n\r\n\x05\x04\x08\x02\
    \x02\x01\x12\x04\xe8\x02\x1c'\n\r\n\x05\x04\x08\x02\x02\x03\x12\x04\xe8\
    \x02*+\n&\n\x02\x04\t\x12\x06\xec\x02\0\xf0\x02\x01\x1a\x18\x20Request\
    \x20to\x20get\x20a\x20note.\n\n\x0b\n\x03\x04\t\x01\x12\x04\xec\x02\x08\
    \x16\n^\n\x04\x04\t\x02\0\x12\x04\xef\x02\x02\x12\x1aP\x20The\x20name\
    \x20of\x20the\x20note\x20in\x20the\x20form\x20of\n\x20`projects/[PROVIDE\
    R_ID]/notes/[NOTE_ID]`.\n\n\x0f\n\x05\x04\t\x02\0\x04\x12\x06\xef\x02\
    \x02\xec\x02\x18\n\r\n\x05\x04\t\x02\0\x05\x12\x04\xef\x02\x02\x08\n\r\n\
    \x05\x04\t\x02\0\x01\x12\x04\xef\x02\t\r\n\r\n\x05\x04\t\x02\0\x03\x12\
    \x04\xef\x02\x10\x11\nV\n\x02\x04\n\x12\x06\xf3\x02\0\xf7\x02\x01\x1aH\
    \x20Request\x20to\x20get\x20the\x20note\x20to\x20which\x20the\x20specifi\
    ed\x20occurrence\x20is\x20attached.\n\n\x0b\n\x03\x04\n\x01\x12\x04\xf3\
    \x02\x08\x20\no\n\x04\x04\n\x02\0\x12\x04\xf6\x02\x02\x12\x1aa\x20The\
    \x20name\x20of\x20the\x20occurrence\x20in\x20the\x20form\x20of\n\x20`pro\
    jects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]`.\n\n\x0f\n\x05\x04\n\x02\
    \0\x04\x12\x06\xf6\x02\x02\xf3\x02\"\n\r\n\x05\x04\n\x02\0\x05\x12\x04\
    \xf6\x02\x02\x08\n\r\n\x05\x04\n\x02\0\x01\x12\x04\xf6\x02\t\r\n\r\n\x05\
    \x04\n\x02\0\x03\x12\x04\xf6\x02\x10\x11\n&\n\x02\x04\x0b\x12\x06\xfa\
    \x02\0\x88\x03\x01\x1a\x18\x20Request\x20to\x20list\x20notes.\n\n\x0b\n\
    \x03\x04\x0b\x01\x12\x04\xfa\x02\x08\x18\nb\n\x04\x04\x0b\x02\0\x12\x04\
    \xfd\x02\x02\x14\x1aT\x20The\x20name\x20of\x20the\x20project\x20to\x20li\
    st\x20notes\x20for\x20in\x20the\x20form\x20of\n\x20`projects/[PROJECT_ID\
    ]`.\n\n\x0f\n\x05\x04\x0b\x02\0\x04\x12\x06\xfd\x02\x02\xfa\x02\x1a\n\r\
    \n\x05\x04\x0b\x02\0\x05\x12\x04\xfd\x02\x02\x08\n\r\n\x05\x04\x0b\x02\0\
    \x01\x12\x04\xfd\x02\t\x0f\n\r\n\x05\x04\x0b\x02\0\x03\x12\x04\xfd\x02\
    \x12\x13\n&\n\x04\x04\x0b\x02\x01\x12\x04\x80\x03\x02\x14\x1a\x18\x20The\
    \x20filter\x20expression.\n\n\x0f\n\x05\x04\x0b\x02\x01\x04\x12\x06\x80\
    \x03\x02\xfd\x02\x14\n\r\n\x05\x04\x0b\x02\x01\x05\x12\x04\x80\x03\x02\
    \x08\n\r\n\x05\x04\x0b\x02\x01\x01\x12\x04\x80\x03\t\x0f\n\r\n\x05\x04\
    \x0b\x02\x01\x03\x12\x04\x80\x03\x12\x13\n\x95\x01\n\x04\x04\x0b\x02\x02\
    \x12\x04\x84\x03\x02\x16\x1a\x86\x01\x20Number\x20of\x20notes\x20to\x20r\
    eturn\x20in\x20the\x20list.\x20Must\x20be\x20positive.\x20Max\x20allowed\
    \x20page\n\x20size\x20is\x201000.\x20If\x20not\x20specified,\x20page\x20\
    size\x20defaults\x20to\x2020.\n\n\x0f\n\x05\x04\x0b\x02\x02\x04\x12\x06\
    \x84\x03\x02\x80\x03\x14\n\r\n\x05\x04\x0b\x02\x02\x05\x12\x04\x84\x03\
    \x02\x07\n\r\n\x05\x04\x0b\x02\x02\x01\x12\x04\x84\x03\x08\x11\n\r\n\x05\
    \x04\x0b\x02\x02\x03\x12\x04\x84\x03\x14\x15\nJ\n\x04\x04\x0b\x02\x03\
    \x12\x04\x87\x03\x02\x18\x1a<\x20Token\x20to\x20provide\x20to\x20skip\
    \x20to\x20a\x20particular\x20spot\x20in\x20the\x20list.\n\n\x0f\n\x05\
    \x04\x0b\x02\x03\x04\x12\x06\x87\x03\x02\x84\x03\x16\n\r\n\x05\x04\x0b\
    \x02\x03\x05\x12\x04\x87\x03\x02\x08\n\r\n\x05\x04\x0b\x02\x03\x01\x12\
    \x04\x87\x03\t\x13\n\r\n\x05\x04\x0b\x02\x03\x03\x12\x04\x87\x03\x16\x17\
    \n+\n\x02\x04\x0c\x12\x06\x8b\x03\0\x92\x03\x01\x1a\x1d\x20Response\x20f\
    or\x20listing\x20notes.\n\n\x0b\n\x03\x04\x0c\x01\x12\x04\x8b\x03\x08\
    \x19\n$\n\x04\x04\x0c\x02\0\x12\x04\x8d\x03\x02\x1a\x1a\x16\x20The\x20no\
    tes\x20requested.\n\n\r\n\x05\x04\x0c\x02\0\x04\x12\x04\x8d\x03\x02\n\n\
    \r\n\x05\x04\x0c\x02\0\x06\x12\x04\x8d\x03\x0b\x0f\n\r\n\x05\x04\x0c\x02\
    \0\x01\x12\x04\x8d\x03\x10\x15\n\r\n\x05\x04\x0c\x02\0\x03\x12\x04\x8d\
    \x03\x18\x19\n\xa5\x01\n\x04\x04\x0c\x02\x01\x12\x04\x91\x03\x02\x1d\x1a\
    \x96\x01\x20The\x20next\x20pagination\x20token\x20in\x20the\x20list\x20r\
    esponse.\x20It\x20should\x20be\x20used\x20as\n\x20`page_token`\x20for\
    \x20the\x20following\x20request.\x20An\x20empty\x20value\x20means\x20no\
    \x20more\n\x20results.\n\n\x0f\n\x05\x04\x0c\x02\x01\x04\x12\x06\x91\x03\
    \x02\x8d\x03\x1a\n\r\n\x05\x04\x0c\x02\x01\x05\x12\x04\x91\x03\x02\x08\n\
    \r\n\x05\x04\x0c\x02\x01\x01\x12\x04\x91\x03\t\x18\n\r\n\x05\x04\x0c\x02\
    \x01\x03\x12\x04\x91\x03\x1b\x1c\n)\n\x02\x04\r\x12\x06\x95\x03\0\x99\
    \x03\x01\x1a\x1b\x20Request\x20to\x20delete\x20a\x20note.\n\n\x0b\n\x03\
    \x04\r\x01\x12\x04\x95\x03\x08\x19\n^\n\x04\x04\r\x02\0\x12\x04\x98\x03\
    \x02\x12\x1aP\x20The\x20name\x20of\x20the\x20note\x20in\x20the\x20form\
    \x20of\n\x20`projects/[PROVIDER_ID]/notes/[NOTE_ID]`.\n\n\x0f\n\x05\x04\
    \r\x02\0\x04\x12\x06\x98\x03\x02\x95\x03\x1b\n\r\n\x05\x04\r\x02\0\x05\
    \x12\x04\x98\x03\x02\x08\n\r\n\x05\x04\r\x02\0\x01\x12\x04\x98\x03\t\r\n\
    \r\n\x05\x04\r\x02\0\x03\x12\x04\x98\x03\x10\x11\n-\n\x02\x04\x0e\x12\
    \x06\x9c\x03\0\xa4\x03\x01\x1a\x1f\x20Request\x20to\x20create\x20a\x20ne\
    w\x20note.\n\n\x0b\n\x03\x04\x0e\x01\x12\x04\x9c\x03\x08\x19\nw\n\x04\
    \x04\x0e\x02\0\x12\x04\x9f\x03\x02\x14\x1ai\x20The\x20name\x20of\x20the\
    \x20project\x20in\x20the\x20form\x20of\x20`projects/[PROJECT_ID]`,\x20un\
    der\x20which\n\x20the\x20note\x20is\x20to\x20be\x20created.\n\n\x0f\n\
    \x05\x04\x0e\x02\0\x04\x12\x06\x9f\x03\x02\x9c\x03\x1b\n\r\n\x05\x04\x0e\
    \x02\0\x05\x12\x04\x9f\x03\x02\x08\n\r\n\x05\x04\x0e\x02\0\x01\x12\x04\
    \x9f\x03\t\x0f\n\r\n\x05\x04\x0e\x02\0\x03\x12\x04\x9f\x03\x12\x13\n,\n\
    \x04\x04\x0e\x02\x01\x12\x04\xa1\x03\x02\x15\x1a\x1e\x20The\x20ID\x20to\
    \x20use\x20for\x20this\x20note.\n\n\x0f\n\x05\x04\x0e\x02\x01\x04\x12\
    \x06\xa1\x03\x02\x9f\x03\x14\n\r\n\x05\x04\x0e\x02\x01\x05\x12\x04\xa1\
    \x03\x02\x08\n\r\n\x05\x04\x0e\x02\x01\x01\x12\x04\xa1\x03\t\x10\n\r\n\
    \x05\x04\x0e\x02\x01\x03\x12\x04\xa1\x03\x13\x14\n#\n\x04\x04\x0e\x02\
    \x02\x12\x04\xa3\x03\x02\x10\x1a\x15\x20The\x20note\x20to\x20create.\n\n\
    \x0f\n\x05\x04\x0e\x02\x02\x04\x12\x06\xa3\x03\x02\xa1\x03\x15\n\r\n\x05\
    \x04\x0e\x02\x02\x06\x12\x04\xa3\x03\x02\x06\n\r\n\x05\x04\x0e\x02\x02\
    \x01\x12\x04\xa3\x03\x07\x0b\n\r\n\x05\x04\x0e\x02\x02\x03\x12\x04\xa3\
    \x03\x0e\x0f\n)\n\x02\x04\x0f\x12\x06\xa7\x03\0\xaf\x03\x01\x1a\x1b\x20R\
    equest\x20to\x20update\x20a\x20note.\n\n\x0b\n\x03\x04\x0f\x01\x12\x04\
    \xa7\x03\x08\x19\n^\n\x04\x04\x0f\x02\0\x12\x04\xaa\x03\x02\x12\x1aP\x20\
    The\x20name\x20of\x20the\x20note\x20in\x20the\x20form\x20of\n\x20`projec\
    ts/[PROVIDER_ID]/notes/[NOTE_ID]`.\n\n\x0f\n\x05\x04\x0f\x02\0\x04\x12\
    \x06\xaa\x03\x02\xa7\x03\x1b\n\r\n\x05\x04\x0f\x02\0\x05\x12\x04\xaa\x03\
    \x02\x08\n\r\n\x05\x04\x0f\x02\0\x01\x12\x04\xaa\x03\t\r\n\r\n\x05\x04\
    \x0f\x02\0\x03\x12\x04\xaa\x03\x10\x11\n!\n\x04\x04\x0f\x02\x01\x12\x04\
    \xac\x03\x02\x10\x1a\x13\x20The\x20updated\x20note.\n\n\x0f\n\x05\x04\
    \x0f\x02\x01\x04\x12\x06\xac\x03\x02\xaa\x03\x12\n\r\n\x05\x04\x0f\x02\
    \x01\x06\x12\x04\xac\x03\x02\x06\n\r\n\x05\x04\x0f\x02\x01\x01\x12\x04\
    \xac\x03\x07\x0b\n\r\n\x05\x04\x0f\x02\x01\x03\x12\x04\xac\x03\x0e\x0f\n\
    %\n\x04\x04\x0f\x02\x02\x12\x04\xae\x03\x02,\x1a\x17\x20The\x20fields\
    \x20to\x20update.\n\n\x0f\n\x05\x04\x0f\x02\x02\x04\x12\x06\xae\x03\x02\
    \xac\x03\x10\n\r\n\x05\x04\x0f\x02\x02\x06\x12\x04\xae\x03\x02\x1b\n\r\n\
    \x05\x04\x0f\x02\x02\x01\x12\x04\xae\x03\x1c'\n\r\n\x05\x04\x0f\x02\x02\
    \x03\x12\x04\xae\x03*+\n7\n\x02\x04\x10\x12\x06\xb2\x03\0\xbc\x03\x01\
    \x1a)\x20Request\x20to\x20list\x20occurrences\x20for\x20a\x20note.\n\n\
    \x0b\n\x03\x04\x10\x01\x12\x04\xb2\x03\x08\"\nv\n\x04\x04\x10\x02\0\x12\
    \x04\xb5\x03\x02\x12\x1ah\x20The\x20name\x20of\x20the\x20note\x20to\x20l\
    ist\x20occurrences\x20for\x20in\x20the\x20form\x20of\n\x20`projects/[PRO\
    VIDER_ID]/notes/[NOTE_ID]`.\n\n\x0f\n\x05\x04\x10\x02\0\x04\x12\x06\xb5\
    \x03\x02\xb2\x03$\n\r\n\x05\x04\x10\x02\0\x05\x12\x04\xb5\x03\x02\x08\n\
    \r\n\x05\x04\x10\x02\0\x01\x12\x04\xb5\x03\t\r\n\r\n\x05\x04\x10\x02\0\
    \x03\x12\x04\xb5\x03\x10\x11\n&\n\x04\x04\x10\x02\x01\x12\x04\xb7\x03\
    \x02\x14\x1a\x18\x20The\x20filter\x20expression.\n\n\x0f\n\x05\x04\x10\
    \x02\x01\x04\x12\x06\xb7\x03\x02\xb5\x03\x12\n\r\n\x05\x04\x10\x02\x01\
    \x05\x12\x04\xb7\x03\x02\x08\n\r\n\x05\x04\x10\x02\x01\x01\x12\x04\xb7\
    \x03\t\x0f\n\r\n\x05\x04\x10\x02\x01\x03\x12\x04\xb7\x03\x12\x13\n<\n\
    \x04\x04\x10\x02\x02\x12\x04\xb9\x03\x02\x16\x1a.\x20Number\x20of\x20occ\
    urrences\x20to\x20return\x20in\x20the\x20list.\n\n\x0f\n\x05\x04\x10\x02\
    \x02\x04\x12\x06\xb9\x03\x02\xb7\x03\x14\n\r\n\x05\x04\x10\x02\x02\x05\
    \x12\x04\xb9\x03\x02\x07\n\r\n\x05\x04\x10\x02\x02\x01\x12\x04\xb9\x03\
    \x08\x11\n\r\n\x05\x04\x10\x02\x02\x03\x12\x04\xb9\x03\x14\x15\nJ\n\x04\
    \x04\x10\x02\x03\x12\x04\xbb\x03\x02\x18\x1a<\x20Token\x20to\x20provide\
    \x20to\x20skip\x20to\x20a\x20particular\x20spot\x20in\x20the\x20list.\n\
    \n\x0f\n\x05\x04\x10\x02\x03\x04\x12\x06\xbb\x03\x02\xb9\x03\x16\n\r\n\
    \x05\x04\x10\x02\x03\x05\x12\x04\xbb\x03\x02\x08\n\r\n\x05\x04\x10\x02\
    \x03\x01\x12\x04\xbb\x03\t\x13\n\r\n\x05\x04\x10\x02\x03\x03\x12\x04\xbb\
    \x03\x16\x17\n<\n\x02\x04\x11\x12\x06\xbf\x03\0\xc4\x03\x01\x1a.\x20Resp\
    onse\x20for\x20listing\x20occurrences\x20for\x20a\x20note.\n\n\x0b\n\x03\
    \x04\x11\x01\x12\x04\xbf\x03\x08#\n?\n\x04\x04\x11\x02\0\x12\x04\xc1\x03\
    \x02&\x1a1\x20The\x20occurrences\x20attached\x20to\x20the\x20specified\
    \x20note.\n\n\r\n\x05\x04\x11\x02\0\x04\x12\x04\xc1\x03\x02\n\n\r\n\x05\
    \x04\x11\x02\0\x06\x12\x04\xc1\x03\x0b\x15\n\r\n\x05\x04\x11\x02\0\x01\
    \x12\x04\xc1\x03\x16!\n\r\n\x05\x04\x11\x02\0\x03\x12\x04\xc1\x03$%\nJ\n\
    \x04\x04\x11\x02\x01\x12\x04\xc3\x03\x02\x1d\x1a<\x20Token\x20to\x20prov\
    ide\x20to\x20skip\x20to\x20a\x20particular\x20spot\x20in\x20the\x20list.\
    \n\n\x0f\n\x05\x04\x11\x02\x01\x04\x12\x06\xc3\x03\x02\xc1\x03&\n\r\n\
    \x05\x04\x11\x02\x01\x05\x12\x04\xc3\x03\x02\x08\n\r\n\x05\x04\x11\x02\
    \x01\x01\x12\x04\xc3\x03\t\x18\n\r\n\x05\x04\x11\x02\x01\x03\x12\x04\xc3\
    \x03\x1b\x1c\n1\n\x02\x04\x12\x12\x06\xc7\x03\0\xce\x03\x01\x1a#\x20Requ\
    est\x20to\x20create\x20notes\x20in\x20batch.\n\n\x0b\n\x03\x04\x12\x01\
    \x12\x04\xc7\x03\x08\x1f\ny\n\x04\x04\x12\x02\0\x12\x04\xca\x03\x02\x14\
    \x1ak\x20The\x20name\x20of\x20the\x20project\x20in\x20the\x20form\x20of\
    \x20`projects/[PROJECT_ID]`,\x20under\x20which\n\x20the\x20notes\x20are\
    \x20to\x20be\x20created.\n\n\x0f\n\x05\x04\x12\x02\0\x04\x12\x06\xca\x03\
    \x02\xc7\x03!\n\r\n\x05\x04\x12\x02\0\x05\x12\x04\xca\x03\x02\x08\n\r\n\
    \x05\x04\x12\x02\0\x01\x12\x04\xca\x03\t\x0f\n\r\n\x05\x04\x12\x02\0\x03\
    \x12\x04\xca\x03\x12\x13\n@\n\x04\x04\x12\x02\x01\x12\x04\xcd\x03\x02\
    \x1e\x1a2\x20The\x20notes\x20to\x20create.\x20Max\x20allowed\x20length\
    \x20is\x201000.\n\n\x0f\n\x05\x04\x12\x02\x01\x04\x12\x06\xcd\x03\x02\
    \xca\x03\x14\n\r\n\x05\x04\x12\x02\x01\x06\x12\x04\xcd\x03\x02\x13\n\r\n\
    \x05\x04\x12\x02\x01\x01\x12\x04\xcd\x03\x14\x19\n\r\n\x05\x04\x12\x02\
    \x01\x03\x12\x04\xcd\x03\x1c\x1d\n5\n\x02\x04\x13\x12\x06\xd1\x03\0\xd4\
    \x03\x01\x1a'\x20Response\x20for\x20creating\x20notes\x20in\x20batch.\n\
    \n\x0b\n\x03\x04\x13\x01\x12\x04\xd1\x03\x08\x20\n,\n\x04\x04\x13\x02\0\
    \x12\x04\xd3\x03\x02\x1a\x1a\x1e\x20The\x20notes\x20that\x20were\x20crea\
    ted.\n\n\r\n\x05\x04\x13\x02\0\x04\x12\x04\xd3\x03\x02\n\n\r\n\x05\x04\
    \x13\x02\0\x06\x12\x04\xd3\x03\x0b\x0f\n\r\n\x05\x04\x13\x02\0\x01\x12\
    \x04\xd3\x03\x10\x15\n\r\n\x05\x04\x13\x02\0\x03\x12\x04\xd3\x03\x18\x19\
    \n7\n\x02\x04\x14\x12\x06\xd7\x03\0\xde\x03\x01\x1a)\x20Request\x20to\
    \x20create\x20occurrences\x20in\x20batch.\n\n\x0b\n\x03\x04\x14\x01\x12\
    \x04\xd7\x03\x08%\n\x7f\n\x04\x04\x14\x02\0\x12\x04\xda\x03\x02\x14\x1aq\
    \x20The\x20name\x20of\x20the\x20project\x20in\x20the\x20form\x20of\x20`p\
    rojects/[PROJECT_ID]`,\x20under\x20which\n\x20the\x20occurrences\x20are\
    \x20to\x20be\x20created.\n\n\x0f\n\x05\x04\x14\x02\0\x04\x12\x06\xda\x03\
    \x02\xd7\x03'\n\r\n\x05\x04\x14\x02\0\x05\x12\x04\xda\x03\x02\x08\n\r\n\
    \x05\x04\x14\x02\0\x01\x12\x04\xda\x03\t\x0f\n\r\n\x05\x04\x14\x02\0\x03\
    \x12\x04\xda\x03\x12\x13\nF\n\x04\x04\x14\x02\x01\x12\x04\xdd\x03\x02&\
    \x1a8\x20The\x20occurrences\x20to\x20create.\x20Max\x20allowed\x20length\
    \x20is\x201000.\n\n\r\n\x05\x04\x14\x02\x01\x04\x12\x04\xdd\x03\x02\n\n\
    \r\n\x05\x04\x14\x02\x01\x06\x12\x04\xdd\x03\x0b\x15\n\r\n\x05\x04\x14\
    \x02\x01\x01\x12\x04\xdd\x03\x16!\n\r\n\x05\x04\x14\x02\x01\x03\x12\x04\
    \xdd\x03$%\n;\n\x02\x04\x15\x12\x06\xe1\x03\0\xe4\x03\x01\x1a-\x20Respon\
    se\x20for\x20creating\x20occurrences\x20in\x20batch.\n\n\x0b\n\x03\x04\
    \x15\x01\x12\x04\xe1\x03\x08&\n2\n\x04\x04\x15\x02\0\x12\x04\xe3\x03\x02\
    &\x1a$\x20The\x20occurrences\x20that\x20were\x20created.\n\n\r\n\x05\x04\
    \x15\x02\0\x04\x12\x04\xe3\x03\x02\n\n\r\n\x05\x04\x15\x02\0\x06\x12\x04\
    \xe3\x03\x0b\x15\n\r\n\x05\x04\x15\x02\0\x01\x12\x04\xe3\x03\x16!\n\r\n\
    \x05\x04\x15\x02\0\x03\x12\x04\xe3\x03$%\nS\n\x02\x04\x16\x12\x06\xe7\
    \x03\0\xed\x03\x01\x1aE\x20Request\x20to\x20get\x20a\x20vulnerability\
    \x20summary\x20for\x20some\x20set\x20of\x20occurrences.\n\n\x0b\n\x03\
    \x04\x16\x01\x12\x04\xe7\x03\x081\ns\n\x04\x04\x16\x02\0\x12\x04\xea\x03\
    \x02\x14\x1ae\x20The\x20name\x20of\x20the\x20project\x20to\x20get\x20a\
    \x20vulnerability\x20summary\x20for\x20in\x20the\x20form\x20of\n\x20`pro\
    jects/[PROJECT_ID]`.\n\n\x0f\n\x05\x04\x16\x02\0\x04\x12\x06\xea\x03\x02\
    \xe7\x033\n\r\n\x05\x04\x16\x02\0\x05\x12\x04\xea\x03\x02\x08\n\r\n\x05\
    \x04\x16\x02\0\x01\x12\x04\xea\x03\t\x0f\n\r\n\x05\x04\x16\x02\0\x03\x12\
    \x04\xea\x03\x12\x13\n&\n\x04\x04\x16\x02\x01\x12\x04\xec\x03\x02\x14\
    \x1a\x18\x20The\x20filter\x20expression.\n\n\x0f\n\x05\x04\x16\x02\x01\
    \x04\x12\x06\xec\x03\x02\xea\x03\x14\n\r\n\x05\x04\x16\x02\x01\x05\x12\
    \x04\xec\x03\x02\x08\n\r\n\x05\x04\x16\x02\x01\x01\x12\x04\xec\x03\t\x0f\
    \n\r\n\x05\x04\x16\x02\x01\x03\x12\x04\xec\x03\x12\x13\nj\n\x02\x04\x17\
    \x12\x06\xf1\x03\0\x81\x04\x01\x1a\\\x20A\x20summary\x20of\x20how\x20man\
    y\x20vulnerability\x20occurrences\x20there\x20are\x20per\x20resource\x20\
    and\n\x20severity\x20type.\n\n\x0b\n\x03\x04\x17\x01\x12\x04\xf1\x03\x08\
    '\nY\n\x04\x04\x17\x02\0\x12\x04\xf3\x03\x02+\x1aK\x20A\x20listing\x20by\
    \x20resource\x20of\x20the\x20number\x20of\x20fixable\x20and\x20total\x20\
    vulnerabilities.\n\n\r\n\x05\x04\x17\x02\0\x04\x12\x04\xf3\x03\x02\n\n\r\
    \n\x05\x04\x17\x02\0\x06\x12\x04\xf3\x03\x0b\x1f\n\r\n\x05\x04\x17\x02\0\
    \x01\x12\x04\xf3\x03\x20&\n\r\n\x05\x04\x17\x02\0\x03\x12\x04\xf3\x03)*\
    \nX\n\x04\x04\x17\x03\0\x12\x06\xf6\x03\x02\x80\x04\x03\x1aH\x20Per\x20r\
    esource\x20and\x20severity\x20counts\x20of\x20fixable\x20and\x20total\
    \x20vulnerabilities.\n\n\r\n\x05\x04\x17\x03\0\x01\x12\x04\xf6\x03\n\x1e\
    \n(\n\x06\x04\x17\x03\0\x02\0\x12\x04\xf8\x03\x04\x1a\x1a\x18\x20The\x20\
    affected\x20resource.\n\n\x11\n\x07\x04\x17\x03\0\x02\0\x04\x12\x06\xf8\
    \x03\x04\xf6\x03\x20\n\x0f\n\x07\x04\x17\x03\0\x02\0\x06\x12\x04\xf8\x03\
    \x04\x0c\n\x0f\n\x07\x04\x17\x03\0\x02\0\x01\x12\x04\xf8\x03\r\x15\n\x0f\
    \n\x07\x04\x17\x03\0\x02\0\x03\x12\x04\xf8\x03\x18\x19\nk\n\x06\x04\x17\
    \x03\0\x02\x01\x12\x04\xfb\x03\x048\x1a[\x20The\x20severity\x20for\x20th\
    is\x20count.\x20SEVERITY_UNSPECIFIED\x20indicates\x20total\x20across\n\
    \x20all\x20severities.\n\n\x11\n\x07\x04\x17\x03\0\x02\x01\x04\x12\x06\
    \xfb\x03\x04\xf8\x03\x1a\n\x0f\n\x07\x04\x17\x03\0\x02\x01\x06\x12\x04\
    \xfb\x03\x04*\n\x0f\n\x07\x04\x17\x03\0\x02\x01\x01\x12\x04\xfb\x03+3\n\
    \x0f\n\x07\x04\x17\x03\0\x02\x01\x03\x12\x04\xfb\x0367\nV\n\x06\x04\x17\
    \x03\0\x02\x02\x12\x04\xfd\x03\x04\x1c\x1aF\x20The\x20number\x20of\x20fi\
    xable\x20vulnerabilities\x20associated\x20with\x20this\x20resource.\n\n\
    \x11\n\x07\x04\x17\x03\0\x02\x02\x04\x12\x06\xfd\x03\x04\xfb\x038\n\x0f\
    \n\x07\x04\x17\x03\0\x02\x02\x05\x12\x04\xfd\x03\x04\t\n\x0f\n\x07\x04\
    \x17\x03\0\x02\x02\x01\x12\x04\xfd\x03\n\x17\n\x0f\n\x07\x04\x17\x03\0\
    \x02\x02\x03\x12\x04\xfd\x03\x1a\x1b\nT\n\x06\x04\x17\x03\0\x02\x03\x12\
    \x04\xff\x03\x04\x1a\x1aD\x20The\x20total\x20number\x20of\x20vulnerabili\
    ties\x20associated\x20with\x20this\x20resource.\n\n\x11\n\x07\x04\x17\
    \x03\0\x02\x03\x04\x12\x06\xff\x03\x04\xfd\x03\x1c\n\x0f\n\x07\x04\x17\
    \x03\0\x02\x03\x05\x12\x04\xff\x03\x04\t\n\x0f\n\x07\x04\x17\x03\0\x02\
    \x03\x01\x12\x04\xff\x03\n\x15\n\x0f\n\x07\x04\x17\x03\0\x02\x03\x03\x12\
    \x04\xff\x03\x18\x19b\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
