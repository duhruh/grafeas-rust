// This file is generated by rust-protobuf 2.6.0. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq,Clone,Default)]
pub struct SourceContext {
    // message fields
    pub labels: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    // message oneof groups
    pub context: ::std::option::Option<SourceContext_oneof_context>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SourceContext {
    fn default() -> &'a SourceContext {
        <SourceContext as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum SourceContext_oneof_context {
    cloud_repo(CloudRepoSourceContext),
    gerrit(GerritSourceContext),
    git(GitSourceContext),
}

impl SourceContext {
    pub fn new() -> SourceContext {
        ::std::default::Default::default()
    }

    // .grafeas.v1beta1.source.CloudRepoSourceContext cloud_repo = 1;


    pub fn get_cloud_repo(&self) -> &CloudRepoSourceContext {
        match self.context {
            ::std::option::Option::Some(SourceContext_oneof_context::cloud_repo(ref v)) => v,
            _ => CloudRepoSourceContext::default_instance(),
        }
    }
    pub fn clear_cloud_repo(&mut self) {
        self.context = ::std::option::Option::None;
    }

    pub fn has_cloud_repo(&self) -> bool {
        match self.context {
            ::std::option::Option::Some(SourceContext_oneof_context::cloud_repo(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_cloud_repo(&mut self, v: CloudRepoSourceContext) {
        self.context = ::std::option::Option::Some(SourceContext_oneof_context::cloud_repo(v))
    }

    // Mutable pointer to the field.
    pub fn mut_cloud_repo(&mut self) -> &mut CloudRepoSourceContext {
        if let ::std::option::Option::Some(SourceContext_oneof_context::cloud_repo(_)) = self.context {
        } else {
            self.context = ::std::option::Option::Some(SourceContext_oneof_context::cloud_repo(CloudRepoSourceContext::new()));
        }
        match self.context {
            ::std::option::Option::Some(SourceContext_oneof_context::cloud_repo(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_cloud_repo(&mut self) -> CloudRepoSourceContext {
        if self.has_cloud_repo() {
            match self.context.take() {
                ::std::option::Option::Some(SourceContext_oneof_context::cloud_repo(v)) => v,
                _ => panic!(),
            }
        } else {
            CloudRepoSourceContext::new()
        }
    }

    // .grafeas.v1beta1.source.GerritSourceContext gerrit = 2;


    pub fn get_gerrit(&self) -> &GerritSourceContext {
        match self.context {
            ::std::option::Option::Some(SourceContext_oneof_context::gerrit(ref v)) => v,
            _ => GerritSourceContext::default_instance(),
        }
    }
    pub fn clear_gerrit(&mut self) {
        self.context = ::std::option::Option::None;
    }

    pub fn has_gerrit(&self) -> bool {
        match self.context {
            ::std::option::Option::Some(SourceContext_oneof_context::gerrit(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_gerrit(&mut self, v: GerritSourceContext) {
        self.context = ::std::option::Option::Some(SourceContext_oneof_context::gerrit(v))
    }

    // Mutable pointer to the field.
    pub fn mut_gerrit(&mut self) -> &mut GerritSourceContext {
        if let ::std::option::Option::Some(SourceContext_oneof_context::gerrit(_)) = self.context {
        } else {
            self.context = ::std::option::Option::Some(SourceContext_oneof_context::gerrit(GerritSourceContext::new()));
        }
        match self.context {
            ::std::option::Option::Some(SourceContext_oneof_context::gerrit(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_gerrit(&mut self) -> GerritSourceContext {
        if self.has_gerrit() {
            match self.context.take() {
                ::std::option::Option::Some(SourceContext_oneof_context::gerrit(v)) => v,
                _ => panic!(),
            }
        } else {
            GerritSourceContext::new()
        }
    }

    // .grafeas.v1beta1.source.GitSourceContext git = 3;


    pub fn get_git(&self) -> &GitSourceContext {
        match self.context {
            ::std::option::Option::Some(SourceContext_oneof_context::git(ref v)) => v,
            _ => GitSourceContext::default_instance(),
        }
    }
    pub fn clear_git(&mut self) {
        self.context = ::std::option::Option::None;
    }

    pub fn has_git(&self) -> bool {
        match self.context {
            ::std::option::Option::Some(SourceContext_oneof_context::git(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_git(&mut self, v: GitSourceContext) {
        self.context = ::std::option::Option::Some(SourceContext_oneof_context::git(v))
    }

    // Mutable pointer to the field.
    pub fn mut_git(&mut self) -> &mut GitSourceContext {
        if let ::std::option::Option::Some(SourceContext_oneof_context::git(_)) = self.context {
        } else {
            self.context = ::std::option::Option::Some(SourceContext_oneof_context::git(GitSourceContext::new()));
        }
        match self.context {
            ::std::option::Option::Some(SourceContext_oneof_context::git(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_git(&mut self) -> GitSourceContext {
        if self.has_git() {
            match self.context.take() {
                ::std::option::Option::Some(SourceContext_oneof_context::git(v)) => v,
                _ => panic!(),
            }
        } else {
            GitSourceContext::new()
        }
    }

    // repeated .grafeas.v1beta1.source.SourceContext.LabelsEntry labels = 4;


    pub fn get_labels(&self) -> &::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &self.labels
    }
    pub fn clear_labels(&mut self) {
        self.labels.clear();
    }

    // Param is passed by value, moved
    pub fn set_labels(&mut self, v: ::std::collections::HashMap<::std::string::String, ::std::string::String>) {
        self.labels = v;
    }

    // Mutable pointer to the field.
    pub fn mut_labels(&mut self) -> &mut ::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &mut self.labels
    }

    // Take field
    pub fn take_labels(&mut self) -> ::std::collections::HashMap<::std::string::String, ::std::string::String> {
        ::std::mem::replace(&mut self.labels, ::std::collections::HashMap::new())
    }
}

impl ::protobuf::Message for SourceContext {
    fn is_initialized(&self) -> bool {
        if let Some(SourceContext_oneof_context::cloud_repo(ref v)) = self.context {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(SourceContext_oneof_context::gerrit(ref v)) = self.context {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(SourceContext_oneof_context::git(ref v)) = self.context {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.context = ::std::option::Option::Some(SourceContext_oneof_context::cloud_repo(is.read_message()?));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.context = ::std::option::Option::Some(SourceContext_oneof_context::gerrit(is.read_message()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.context = ::std::option::Option::Some(SourceContext_oneof_context::git(is.read_message()?));
                },
                4 => {
                    ::protobuf::rt::read_map_into::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(wire_type, is, &mut self.labels)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::compute_map_size::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(4, &self.labels);
        if let ::std::option::Option::Some(ref v) = self.context {
            match v {
                &SourceContext_oneof_context::cloud_repo(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &SourceContext_oneof_context::gerrit(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &SourceContext_oneof_context::git(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        ::protobuf::rt::write_map_with_cached_sizes::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(4, &self.labels, os)?;
        if let ::std::option::Option::Some(ref v) = self.context {
            match v {
                &SourceContext_oneof_context::cloud_repo(ref v) => {
                    os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &SourceContext_oneof_context::gerrit(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &SourceContext_oneof_context::git(ref v) => {
                    os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SourceContext {
        SourceContext::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, CloudRepoSourceContext>(
                    "cloud_repo",
                    SourceContext::has_cloud_repo,
                    SourceContext::get_cloud_repo,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, GerritSourceContext>(
                    "gerrit",
                    SourceContext::has_gerrit,
                    SourceContext::get_gerrit,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, GitSourceContext>(
                    "git",
                    SourceContext::has_git,
                    SourceContext::get_git,
                ));
                fields.push(::protobuf::reflect::accessor::make_map_accessor::<_, ::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(
                    "labels",
                    |m: &SourceContext| { &m.labels },
                    |m: &mut SourceContext| { &mut m.labels },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<SourceContext>(
                    "SourceContext",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static SourceContext {
        static mut instance: ::protobuf::lazy::Lazy<SourceContext> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const SourceContext,
        };
        unsafe {
            instance.get(SourceContext::new)
        }
    }
}

impl ::protobuf::Clear for SourceContext {
    fn clear(&mut self) {
        self.context = ::std::option::Option::None;
        self.context = ::std::option::Option::None;
        self.context = ::std::option::Option::None;
        self.labels.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SourceContext {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SourceContext {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AliasContext {
    // message fields
    pub kind: AliasContext_Kind,
    pub name: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AliasContext {
    fn default() -> &'a AliasContext {
        <AliasContext as ::protobuf::Message>::default_instance()
    }
}

impl AliasContext {
    pub fn new() -> AliasContext {
        ::std::default::Default::default()
    }

    // .grafeas.v1beta1.source.AliasContext.Kind kind = 1;


    pub fn get_kind(&self) -> AliasContext_Kind {
        self.kind
    }
    pub fn clear_kind(&mut self) {
        self.kind = AliasContext_Kind::KIND_UNSPECIFIED;
    }

    // Param is passed by value, moved
    pub fn set_kind(&mut self, v: AliasContext_Kind) {
        self.kind = v;
    }

    // string name = 2;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }
}

impl ::protobuf::Message for AliasContext {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.kind, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.kind != AliasContext_Kind::KIND_UNSPECIFIED {
            my_size += ::protobuf::rt::enum_size(1, self.kind);
        }
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.name);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.kind != AliasContext_Kind::KIND_UNSPECIFIED {
            os.write_enum(1, self.kind.value())?;
        }
        if !self.name.is_empty() {
            os.write_string(2, &self.name)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AliasContext {
        AliasContext::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<AliasContext_Kind>>(
                    "kind",
                    |m: &AliasContext| { &m.kind },
                    |m: &mut AliasContext| { &mut m.kind },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "name",
                    |m: &AliasContext| { &m.name },
                    |m: &mut AliasContext| { &mut m.name },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<AliasContext>(
                    "AliasContext",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static AliasContext {
        static mut instance: ::protobuf::lazy::Lazy<AliasContext> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const AliasContext,
        };
        unsafe {
            instance.get(AliasContext::new)
        }
    }
}

impl ::protobuf::Clear for AliasContext {
    fn clear(&mut self) {
        self.kind = AliasContext_Kind::KIND_UNSPECIFIED;
        self.name.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AliasContext {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AliasContext {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum AliasContext_Kind {
    KIND_UNSPECIFIED = 0,
    FIXED = 1,
    MOVABLE = 2,
    OTHER = 4,
}

impl ::protobuf::ProtobufEnum for AliasContext_Kind {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<AliasContext_Kind> {
        match value {
            0 => ::std::option::Option::Some(AliasContext_Kind::KIND_UNSPECIFIED),
            1 => ::std::option::Option::Some(AliasContext_Kind::FIXED),
            2 => ::std::option::Option::Some(AliasContext_Kind::MOVABLE),
            4 => ::std::option::Option::Some(AliasContext_Kind::OTHER),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [AliasContext_Kind] = &[
            AliasContext_Kind::KIND_UNSPECIFIED,
            AliasContext_Kind::FIXED,
            AliasContext_Kind::MOVABLE,
            AliasContext_Kind::OTHER,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("AliasContext_Kind", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for AliasContext_Kind {
}

impl ::std::default::Default for AliasContext_Kind {
    fn default() -> Self {
        AliasContext_Kind::KIND_UNSPECIFIED
    }
}

impl ::protobuf::reflect::ProtobufValue for AliasContext_Kind {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CloudRepoSourceContext {
    // message fields
    pub repo_id: ::protobuf::SingularPtrField<RepoId>,
    // message oneof groups
    pub revision: ::std::option::Option<CloudRepoSourceContext_oneof_revision>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CloudRepoSourceContext {
    fn default() -> &'a CloudRepoSourceContext {
        <CloudRepoSourceContext as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum CloudRepoSourceContext_oneof_revision {
    revision_id(::std::string::String),
    alias_context(AliasContext),
}

impl CloudRepoSourceContext {
    pub fn new() -> CloudRepoSourceContext {
        ::std::default::Default::default()
    }

    // .grafeas.v1beta1.source.RepoId repo_id = 1;


    pub fn get_repo_id(&self) -> &RepoId {
        self.repo_id.as_ref().unwrap_or_else(|| RepoId::default_instance())
    }
    pub fn clear_repo_id(&mut self) {
        self.repo_id.clear();
    }

    pub fn has_repo_id(&self) -> bool {
        self.repo_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_repo_id(&mut self, v: RepoId) {
        self.repo_id = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_repo_id(&mut self) -> &mut RepoId {
        if self.repo_id.is_none() {
            self.repo_id.set_default();
        }
        self.repo_id.as_mut().unwrap()
    }

    // Take field
    pub fn take_repo_id(&mut self) -> RepoId {
        self.repo_id.take().unwrap_or_else(|| RepoId::new())
    }

    // string revision_id = 2;


    pub fn get_revision_id(&self) -> &str {
        match self.revision {
            ::std::option::Option::Some(CloudRepoSourceContext_oneof_revision::revision_id(ref v)) => v,
            _ => "",
        }
    }
    pub fn clear_revision_id(&mut self) {
        self.revision = ::std::option::Option::None;
    }

    pub fn has_revision_id(&self) -> bool {
        match self.revision {
            ::std::option::Option::Some(CloudRepoSourceContext_oneof_revision::revision_id(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_revision_id(&mut self, v: ::std::string::String) {
        self.revision = ::std::option::Option::Some(CloudRepoSourceContext_oneof_revision::revision_id(v))
    }

    // Mutable pointer to the field.
    pub fn mut_revision_id(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(CloudRepoSourceContext_oneof_revision::revision_id(_)) = self.revision {
        } else {
            self.revision = ::std::option::Option::Some(CloudRepoSourceContext_oneof_revision::revision_id(::std::string::String::new()));
        }
        match self.revision {
            ::std::option::Option::Some(CloudRepoSourceContext_oneof_revision::revision_id(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_revision_id(&mut self) -> ::std::string::String {
        if self.has_revision_id() {
            match self.revision.take() {
                ::std::option::Option::Some(CloudRepoSourceContext_oneof_revision::revision_id(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }

    // .grafeas.v1beta1.source.AliasContext alias_context = 3;


    pub fn get_alias_context(&self) -> &AliasContext {
        match self.revision {
            ::std::option::Option::Some(CloudRepoSourceContext_oneof_revision::alias_context(ref v)) => v,
            _ => AliasContext::default_instance(),
        }
    }
    pub fn clear_alias_context(&mut self) {
        self.revision = ::std::option::Option::None;
    }

    pub fn has_alias_context(&self) -> bool {
        match self.revision {
            ::std::option::Option::Some(CloudRepoSourceContext_oneof_revision::alias_context(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_alias_context(&mut self, v: AliasContext) {
        self.revision = ::std::option::Option::Some(CloudRepoSourceContext_oneof_revision::alias_context(v))
    }

    // Mutable pointer to the field.
    pub fn mut_alias_context(&mut self) -> &mut AliasContext {
        if let ::std::option::Option::Some(CloudRepoSourceContext_oneof_revision::alias_context(_)) = self.revision {
        } else {
            self.revision = ::std::option::Option::Some(CloudRepoSourceContext_oneof_revision::alias_context(AliasContext::new()));
        }
        match self.revision {
            ::std::option::Option::Some(CloudRepoSourceContext_oneof_revision::alias_context(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_alias_context(&mut self) -> AliasContext {
        if self.has_alias_context() {
            match self.revision.take() {
                ::std::option::Option::Some(CloudRepoSourceContext_oneof_revision::alias_context(v)) => v,
                _ => panic!(),
            }
        } else {
            AliasContext::new()
        }
    }
}

impl ::protobuf::Message for CloudRepoSourceContext {
    fn is_initialized(&self) -> bool {
        for v in &self.repo_id {
            if !v.is_initialized() {
                return false;
            }
        };
        if let Some(CloudRepoSourceContext_oneof_revision::alias_context(ref v)) = self.revision {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.repo_id)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.revision = ::std::option::Option::Some(CloudRepoSourceContext_oneof_revision::revision_id(is.read_string()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.revision = ::std::option::Option::Some(CloudRepoSourceContext_oneof_revision::alias_context(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.repo_id.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let ::std::option::Option::Some(ref v) = self.revision {
            match v {
                &CloudRepoSourceContext_oneof_revision::revision_id(ref v) => {
                    my_size += ::protobuf::rt::string_size(2, &v);
                },
                &CloudRepoSourceContext_oneof_revision::alias_context(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.repo_id.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let ::std::option::Option::Some(ref v) = self.revision {
            match v {
                &CloudRepoSourceContext_oneof_revision::revision_id(ref v) => {
                    os.write_string(2, v)?;
                },
                &CloudRepoSourceContext_oneof_revision::alias_context(ref v) => {
                    os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CloudRepoSourceContext {
        CloudRepoSourceContext::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<RepoId>>(
                    "repo_id",
                    |m: &CloudRepoSourceContext| { &m.repo_id },
                    |m: &mut CloudRepoSourceContext| { &mut m.repo_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_string_accessor::<_>(
                    "revision_id",
                    CloudRepoSourceContext::has_revision_id,
                    CloudRepoSourceContext::get_revision_id,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, AliasContext>(
                    "alias_context",
                    CloudRepoSourceContext::has_alias_context,
                    CloudRepoSourceContext::get_alias_context,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<CloudRepoSourceContext>(
                    "CloudRepoSourceContext",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CloudRepoSourceContext {
        static mut instance: ::protobuf::lazy::Lazy<CloudRepoSourceContext> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CloudRepoSourceContext,
        };
        unsafe {
            instance.get(CloudRepoSourceContext::new)
        }
    }
}

impl ::protobuf::Clear for CloudRepoSourceContext {
    fn clear(&mut self) {
        self.repo_id.clear();
        self.revision = ::std::option::Option::None;
        self.revision = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CloudRepoSourceContext {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CloudRepoSourceContext {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GerritSourceContext {
    // message fields
    pub host_uri: ::std::string::String,
    pub gerrit_project: ::std::string::String,
    // message oneof groups
    pub revision: ::std::option::Option<GerritSourceContext_oneof_revision>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GerritSourceContext {
    fn default() -> &'a GerritSourceContext {
        <GerritSourceContext as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum GerritSourceContext_oneof_revision {
    revision_id(::std::string::String),
    alias_context(AliasContext),
}

impl GerritSourceContext {
    pub fn new() -> GerritSourceContext {
        ::std::default::Default::default()
    }

    // string host_uri = 1;


    pub fn get_host_uri(&self) -> &str {
        &self.host_uri
    }
    pub fn clear_host_uri(&mut self) {
        self.host_uri.clear();
    }

    // Param is passed by value, moved
    pub fn set_host_uri(&mut self, v: ::std::string::String) {
        self.host_uri = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_host_uri(&mut self) -> &mut ::std::string::String {
        &mut self.host_uri
    }

    // Take field
    pub fn take_host_uri(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.host_uri, ::std::string::String::new())
    }

    // string gerrit_project = 2;


    pub fn get_gerrit_project(&self) -> &str {
        &self.gerrit_project
    }
    pub fn clear_gerrit_project(&mut self) {
        self.gerrit_project.clear();
    }

    // Param is passed by value, moved
    pub fn set_gerrit_project(&mut self, v: ::std::string::String) {
        self.gerrit_project = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_gerrit_project(&mut self) -> &mut ::std::string::String {
        &mut self.gerrit_project
    }

    // Take field
    pub fn take_gerrit_project(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.gerrit_project, ::std::string::String::new())
    }

    // string revision_id = 3;


    pub fn get_revision_id(&self) -> &str {
        match self.revision {
            ::std::option::Option::Some(GerritSourceContext_oneof_revision::revision_id(ref v)) => v,
            _ => "",
        }
    }
    pub fn clear_revision_id(&mut self) {
        self.revision = ::std::option::Option::None;
    }

    pub fn has_revision_id(&self) -> bool {
        match self.revision {
            ::std::option::Option::Some(GerritSourceContext_oneof_revision::revision_id(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_revision_id(&mut self, v: ::std::string::String) {
        self.revision = ::std::option::Option::Some(GerritSourceContext_oneof_revision::revision_id(v))
    }

    // Mutable pointer to the field.
    pub fn mut_revision_id(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(GerritSourceContext_oneof_revision::revision_id(_)) = self.revision {
        } else {
            self.revision = ::std::option::Option::Some(GerritSourceContext_oneof_revision::revision_id(::std::string::String::new()));
        }
        match self.revision {
            ::std::option::Option::Some(GerritSourceContext_oneof_revision::revision_id(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_revision_id(&mut self) -> ::std::string::String {
        if self.has_revision_id() {
            match self.revision.take() {
                ::std::option::Option::Some(GerritSourceContext_oneof_revision::revision_id(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }

    // .grafeas.v1beta1.source.AliasContext alias_context = 4;


    pub fn get_alias_context(&self) -> &AliasContext {
        match self.revision {
            ::std::option::Option::Some(GerritSourceContext_oneof_revision::alias_context(ref v)) => v,
            _ => AliasContext::default_instance(),
        }
    }
    pub fn clear_alias_context(&mut self) {
        self.revision = ::std::option::Option::None;
    }

    pub fn has_alias_context(&self) -> bool {
        match self.revision {
            ::std::option::Option::Some(GerritSourceContext_oneof_revision::alias_context(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_alias_context(&mut self, v: AliasContext) {
        self.revision = ::std::option::Option::Some(GerritSourceContext_oneof_revision::alias_context(v))
    }

    // Mutable pointer to the field.
    pub fn mut_alias_context(&mut self) -> &mut AliasContext {
        if let ::std::option::Option::Some(GerritSourceContext_oneof_revision::alias_context(_)) = self.revision {
        } else {
            self.revision = ::std::option::Option::Some(GerritSourceContext_oneof_revision::alias_context(AliasContext::new()));
        }
        match self.revision {
            ::std::option::Option::Some(GerritSourceContext_oneof_revision::alias_context(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_alias_context(&mut self) -> AliasContext {
        if self.has_alias_context() {
            match self.revision.take() {
                ::std::option::Option::Some(GerritSourceContext_oneof_revision::alias_context(v)) => v,
                _ => panic!(),
            }
        } else {
            AliasContext::new()
        }
    }
}

impl ::protobuf::Message for GerritSourceContext {
    fn is_initialized(&self) -> bool {
        if let Some(GerritSourceContext_oneof_revision::alias_context(ref v)) = self.revision {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.host_uri)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.gerrit_project)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.revision = ::std::option::Option::Some(GerritSourceContext_oneof_revision::revision_id(is.read_string()?));
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.revision = ::std::option::Option::Some(GerritSourceContext_oneof_revision::alias_context(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.host_uri.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.host_uri);
        }
        if !self.gerrit_project.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.gerrit_project);
        }
        if let ::std::option::Option::Some(ref v) = self.revision {
            match v {
                &GerritSourceContext_oneof_revision::revision_id(ref v) => {
                    my_size += ::protobuf::rt::string_size(3, &v);
                },
                &GerritSourceContext_oneof_revision::alias_context(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.host_uri.is_empty() {
            os.write_string(1, &self.host_uri)?;
        }
        if !self.gerrit_project.is_empty() {
            os.write_string(2, &self.gerrit_project)?;
        }
        if let ::std::option::Option::Some(ref v) = self.revision {
            match v {
                &GerritSourceContext_oneof_revision::revision_id(ref v) => {
                    os.write_string(3, v)?;
                },
                &GerritSourceContext_oneof_revision::alias_context(ref v) => {
                    os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GerritSourceContext {
        GerritSourceContext::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "host_uri",
                    |m: &GerritSourceContext| { &m.host_uri },
                    |m: &mut GerritSourceContext| { &mut m.host_uri },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "gerrit_project",
                    |m: &GerritSourceContext| { &m.gerrit_project },
                    |m: &mut GerritSourceContext| { &mut m.gerrit_project },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_string_accessor::<_>(
                    "revision_id",
                    GerritSourceContext::has_revision_id,
                    GerritSourceContext::get_revision_id,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, AliasContext>(
                    "alias_context",
                    GerritSourceContext::has_alias_context,
                    GerritSourceContext::get_alias_context,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<GerritSourceContext>(
                    "GerritSourceContext",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static GerritSourceContext {
        static mut instance: ::protobuf::lazy::Lazy<GerritSourceContext> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const GerritSourceContext,
        };
        unsafe {
            instance.get(GerritSourceContext::new)
        }
    }
}

impl ::protobuf::Clear for GerritSourceContext {
    fn clear(&mut self) {
        self.host_uri.clear();
        self.gerrit_project.clear();
        self.revision = ::std::option::Option::None;
        self.revision = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GerritSourceContext {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GerritSourceContext {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GitSourceContext {
    // message fields
    pub url: ::std::string::String,
    pub revision_id: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GitSourceContext {
    fn default() -> &'a GitSourceContext {
        <GitSourceContext as ::protobuf::Message>::default_instance()
    }
}

impl GitSourceContext {
    pub fn new() -> GitSourceContext {
        ::std::default::Default::default()
    }

    // string url = 1;


    pub fn get_url(&self) -> &str {
        &self.url
    }
    pub fn clear_url(&mut self) {
        self.url.clear();
    }

    // Param is passed by value, moved
    pub fn set_url(&mut self, v: ::std::string::String) {
        self.url = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_url(&mut self) -> &mut ::std::string::String {
        &mut self.url
    }

    // Take field
    pub fn take_url(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.url, ::std::string::String::new())
    }

    // string revision_id = 2;


    pub fn get_revision_id(&self) -> &str {
        &self.revision_id
    }
    pub fn clear_revision_id(&mut self) {
        self.revision_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_revision_id(&mut self, v: ::std::string::String) {
        self.revision_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_revision_id(&mut self) -> &mut ::std::string::String {
        &mut self.revision_id
    }

    // Take field
    pub fn take_revision_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.revision_id, ::std::string::String::new())
    }
}

impl ::protobuf::Message for GitSourceContext {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.url)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.revision_id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.url.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.url);
        }
        if !self.revision_id.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.revision_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.url.is_empty() {
            os.write_string(1, &self.url)?;
        }
        if !self.revision_id.is_empty() {
            os.write_string(2, &self.revision_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GitSourceContext {
        GitSourceContext::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "url",
                    |m: &GitSourceContext| { &m.url },
                    |m: &mut GitSourceContext| { &mut m.url },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "revision_id",
                    |m: &GitSourceContext| { &m.revision_id },
                    |m: &mut GitSourceContext| { &mut m.revision_id },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<GitSourceContext>(
                    "GitSourceContext",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static GitSourceContext {
        static mut instance: ::protobuf::lazy::Lazy<GitSourceContext> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const GitSourceContext,
        };
        unsafe {
            instance.get(GitSourceContext::new)
        }
    }
}

impl ::protobuf::Clear for GitSourceContext {
    fn clear(&mut self) {
        self.url.clear();
        self.revision_id.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GitSourceContext {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GitSourceContext {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RepoId {
    // message oneof groups
    pub id: ::std::option::Option<RepoId_oneof_id>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RepoId {
    fn default() -> &'a RepoId {
        <RepoId as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum RepoId_oneof_id {
    project_repo_id(ProjectRepoId),
    uid(::std::string::String),
}

impl RepoId {
    pub fn new() -> RepoId {
        ::std::default::Default::default()
    }

    // .grafeas.v1beta1.source.ProjectRepoId project_repo_id = 1;


    pub fn get_project_repo_id(&self) -> &ProjectRepoId {
        match self.id {
            ::std::option::Option::Some(RepoId_oneof_id::project_repo_id(ref v)) => v,
            _ => ProjectRepoId::default_instance(),
        }
    }
    pub fn clear_project_repo_id(&mut self) {
        self.id = ::std::option::Option::None;
    }

    pub fn has_project_repo_id(&self) -> bool {
        match self.id {
            ::std::option::Option::Some(RepoId_oneof_id::project_repo_id(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_project_repo_id(&mut self, v: ProjectRepoId) {
        self.id = ::std::option::Option::Some(RepoId_oneof_id::project_repo_id(v))
    }

    // Mutable pointer to the field.
    pub fn mut_project_repo_id(&mut self) -> &mut ProjectRepoId {
        if let ::std::option::Option::Some(RepoId_oneof_id::project_repo_id(_)) = self.id {
        } else {
            self.id = ::std::option::Option::Some(RepoId_oneof_id::project_repo_id(ProjectRepoId::new()));
        }
        match self.id {
            ::std::option::Option::Some(RepoId_oneof_id::project_repo_id(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_project_repo_id(&mut self) -> ProjectRepoId {
        if self.has_project_repo_id() {
            match self.id.take() {
                ::std::option::Option::Some(RepoId_oneof_id::project_repo_id(v)) => v,
                _ => panic!(),
            }
        } else {
            ProjectRepoId::new()
        }
    }

    // string uid = 2;


    pub fn get_uid(&self) -> &str {
        match self.id {
            ::std::option::Option::Some(RepoId_oneof_id::uid(ref v)) => v,
            _ => "",
        }
    }
    pub fn clear_uid(&mut self) {
        self.id = ::std::option::Option::None;
    }

    pub fn has_uid(&self) -> bool {
        match self.id {
            ::std::option::Option::Some(RepoId_oneof_id::uid(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_uid(&mut self, v: ::std::string::String) {
        self.id = ::std::option::Option::Some(RepoId_oneof_id::uid(v))
    }

    // Mutable pointer to the field.
    pub fn mut_uid(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(RepoId_oneof_id::uid(_)) = self.id {
        } else {
            self.id = ::std::option::Option::Some(RepoId_oneof_id::uid(::std::string::String::new()));
        }
        match self.id {
            ::std::option::Option::Some(RepoId_oneof_id::uid(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_uid(&mut self) -> ::std::string::String {
        if self.has_uid() {
            match self.id.take() {
                ::std::option::Option::Some(RepoId_oneof_id::uid(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }
}

impl ::protobuf::Message for RepoId {
    fn is_initialized(&self) -> bool {
        if let Some(RepoId_oneof_id::project_repo_id(ref v)) = self.id {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.id = ::std::option::Option::Some(RepoId_oneof_id::project_repo_id(is.read_message()?));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.id = ::std::option::Option::Some(RepoId_oneof_id::uid(is.read_string()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.id {
            match v {
                &RepoId_oneof_id::project_repo_id(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &RepoId_oneof_id::uid(ref v) => {
                    my_size += ::protobuf::rt::string_size(2, &v);
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.id {
            match v {
                &RepoId_oneof_id::project_repo_id(ref v) => {
                    os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &RepoId_oneof_id::uid(ref v) => {
                    os.write_string(2, v)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RepoId {
        RepoId::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, ProjectRepoId>(
                    "project_repo_id",
                    RepoId::has_project_repo_id,
                    RepoId::get_project_repo_id,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_string_accessor::<_>(
                    "uid",
                    RepoId::has_uid,
                    RepoId::get_uid,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<RepoId>(
                    "RepoId",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static RepoId {
        static mut instance: ::protobuf::lazy::Lazy<RepoId> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const RepoId,
        };
        unsafe {
            instance.get(RepoId::new)
        }
    }
}

impl ::protobuf::Clear for RepoId {
    fn clear(&mut self) {
        self.id = ::std::option::Option::None;
        self.id = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RepoId {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RepoId {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ProjectRepoId {
    // message fields
    pub project_id: ::std::string::String,
    pub repo_name: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ProjectRepoId {
    fn default() -> &'a ProjectRepoId {
        <ProjectRepoId as ::protobuf::Message>::default_instance()
    }
}

impl ProjectRepoId {
    pub fn new() -> ProjectRepoId {
        ::std::default::Default::default()
    }

    // string project_id = 1;


    pub fn get_project_id(&self) -> &str {
        &self.project_id
    }
    pub fn clear_project_id(&mut self) {
        self.project_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_project_id(&mut self, v: ::std::string::String) {
        self.project_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_project_id(&mut self) -> &mut ::std::string::String {
        &mut self.project_id
    }

    // Take field
    pub fn take_project_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.project_id, ::std::string::String::new())
    }

    // string repo_name = 2;


    pub fn get_repo_name(&self) -> &str {
        &self.repo_name
    }
    pub fn clear_repo_name(&mut self) {
        self.repo_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_repo_name(&mut self, v: ::std::string::String) {
        self.repo_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_repo_name(&mut self) -> &mut ::std::string::String {
        &mut self.repo_name
    }

    // Take field
    pub fn take_repo_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.repo_name, ::std::string::String::new())
    }
}

impl ::protobuf::Message for ProjectRepoId {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.project_id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.repo_name)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.project_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.project_id);
        }
        if !self.repo_name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.repo_name);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.project_id.is_empty() {
            os.write_string(1, &self.project_id)?;
        }
        if !self.repo_name.is_empty() {
            os.write_string(2, &self.repo_name)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ProjectRepoId {
        ProjectRepoId::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "project_id",
                    |m: &ProjectRepoId| { &m.project_id },
                    |m: &mut ProjectRepoId| { &mut m.project_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "repo_name",
                    |m: &ProjectRepoId| { &m.repo_name },
                    |m: &mut ProjectRepoId| { &mut m.repo_name },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ProjectRepoId>(
                    "ProjectRepoId",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ProjectRepoId {
        static mut instance: ::protobuf::lazy::Lazy<ProjectRepoId> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ProjectRepoId,
        };
        unsafe {
            instance.get(ProjectRepoId::new)
        }
    }
}

impl ::protobuf::Clear for ProjectRepoId {
    fn clear(&mut self) {
        self.project_id.clear();
        self.repo_name.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ProjectRepoId {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ProjectRepoId {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1aproto/v1beta1/source.proto\x12\x16grafeas.v1beta1.source\"\xf6\x02\
    \n\rSourceContext\x12O\n\ncloud_repo\x18\x01\x20\x01(\x0b2..grafeas.v1be\
    ta1.source.CloudRepoSourceContextH\0R\tcloudRepo\x12E\n\x06gerrit\x18\
    \x02\x20\x01(\x0b2+.grafeas.v1beta1.source.GerritSourceContextH\0R\x06ge\
    rrit\x12<\n\x03git\x18\x03\x20\x01(\x0b2(.grafeas.v1beta1.source.GitSour\
    ceContextH\0R\x03git\x12I\n\x06labels\x18\x04\x20\x03(\x0b21.grafeas.v1b\
    eta1.source.SourceContext.LabelsEntryR\x06labels\x1a9\n\x0bLabelsEntry\
    \x12\x10\n\x03key\x18\x01\x20\x01(\tR\x03key\x12\x14\n\x05value\x18\x02\
    \x20\x01(\tR\x05value:\x028\x01B\t\n\x07context\"\xa2\x01\n\x0cAliasCont\
    ext\x12=\n\x04kind\x18\x01\x20\x01(\x0e2).grafeas.v1beta1.source.AliasCo\
    ntext.KindR\x04kind\x12\x12\n\x04name\x18\x02\x20\x01(\tR\x04name\"?\n\
    \x04Kind\x12\x14\n\x10KIND_UNSPECIFIED\x10\0\x12\t\n\x05FIXED\x10\x01\
    \x12\x0b\n\x07MOVABLE\x10\x02\x12\t\n\x05OTHER\x10\x04\"\xcd\x01\n\x16Cl\
    oudRepoSourceContext\x127\n\x07repo_id\x18\x01\x20\x01(\x0b2\x1e.grafeas\
    .v1beta1.source.RepoIdR\x06repoId\x12!\n\x0brevision_id\x18\x02\x20\x01(\
    \tH\0R\nrevisionId\x12K\n\ralias_context\x18\x03\x20\x01(\x0b2$.grafeas.\
    v1beta1.source.AliasContextH\0R\x0caliasContextB\n\n\x08revision\"\xd3\
    \x01\n\x13GerritSourceContext\x12\x19\n\x08host_uri\x18\x01\x20\x01(\tR\
    \x07hostUri\x12%\n\x0egerrit_project\x18\x02\x20\x01(\tR\rgerritProject\
    \x12!\n\x0brevision_id\x18\x03\x20\x01(\tH\0R\nrevisionId\x12K\n\ralias_\
    context\x18\x04\x20\x01(\x0b2$.grafeas.v1beta1.source.AliasContextH\0R\
    \x0caliasContextB\n\n\x08revision\"E\n\x10GitSourceContext\x12\x10\n\x03\
    url\x18\x01\x20\x01(\tR\x03url\x12\x1f\n\x0brevision_id\x18\x02\x20\x01(\
    \tR\nrevisionId\"s\n\x06RepoId\x12O\n\x0fproject_repo_id\x18\x01\x20\x01\
    (\x0b2%.grafeas.v1beta1.source.ProjectRepoIdH\0R\rprojectRepoId\x12\x12\
    \n\x03uid\x18\x02\x20\x01(\tH\0R\x03uidB\x04\n\x02id\"K\n\rProjectRepoId\
    \x12\x1d\n\nproject_id\x18\x01\x20\x01(\tR\tprojectId\x12\x1b\n\trepo_na\
    me\x18\x02\x20\x01(\tR\x08repoNameB]\n\x19io.grafeas.v1beta1.sourceP\x01\
    Z8github.com/grafeas/grafeas/proto/v1beta1/source_go_proto\xa2\x02\x03GR\
    AJ\xb7\"\n\x07\x12\x05\x0e\0\x85\x01\x01\n\xda\x04\n\x01\x0c\x12\x03\x0e\
    \0\x122\xcf\x04\x20Copyright\x202018\x20The\x20Grafeas\x20Authors.\x20Al\
    l\x20rights\x20reserved.\n\n\x20Licensed\x20under\x20the\x20Apache\x20Li\
    cense,\x20Version\x202.0\x20(the\x20\"License\");\n\x20you\x20may\x20not\
    \x20use\x20this\x20file\x20except\x20in\x20compliance\x20with\x20the\x20\
    License.\n\x20You\x20may\x20obtain\x20a\x20copy\x20of\x20the\x20License\
    \x20at\n\n\x20\x20\x20\x20http://www.apache.org/licenses/LICENSE-2.0\n\n\
    \x20Unless\x20required\x20by\x20applicable\x20law\x20or\x20agreed\x20to\
    \x20in\x20writing,\x20software\n\x20distributed\x20under\x20the\x20Licen\
    se\x20is\x20distributed\x20on\x20an\x20\"AS\x20IS\"\x20BASIS,\n\x20WITHO\
    UT\x20WARRANTIES\x20OR\x20CONDITIONS\x20OF\x20ANY\x20KIND,\x20either\x20\
    express\x20or\x20implied.\n\x20See\x20the\x20License\x20for\x20the\x20sp\
    ecific\x20language\x20governing\x20permissions\x20and\n\x20limitations\
    \x20under\x20the\x20License.\n\n\x08\n\x01\x02\x12\x03\x10\0\x1f\n\x08\n\
    \x01\x08\x12\x03\x12\0O\n\t\n\x02\x08\x0b\x12\x03\x12\0O\n\x08\n\x01\x08\
    \x12\x03\x13\0\"\n\t\n\x02\x08\n\x12\x03\x13\0\"\n\x08\n\x01\x08\x12\x03\
    \x14\02\n\t\n\x02\x08\x01\x12\x03\x14\02\n\x08\n\x01\x08\x12\x03\x15\0!\
    \n\t\n\x02\x08$\x12\x03\x15\0!\n\xa1\x01\n\x02\x04\0\x12\x04\x19\0(\x01\
    \x1a\x94\x01\x20A\x20SourceContext\x20is\x20a\x20reference\x20to\x20a\
    \x20tree\x20of\x20files.\x20A\x20SourceContext\x20together\n\x20with\x20\
    a\x20path\x20point\x20to\x20a\x20unique\x20revision\x20of\x20a\x20single\
    \x20file\x20or\x20directory.\n\n\n\n\x03\x04\0\x01\x12\x03\x19\x08\x15\n\
    Y\n\x04\x04\0\x08\0\x12\x04\x1b\x02$\x03\x1aK\x20A\x20SourceContext\x20c\
    an\x20refer\x20any\x20one\x20of\x20the\x20following\x20types\x20of\x20re\
    positories.\n\n\x0c\n\x05\x04\0\x08\0\x01\x12\x03\x1b\x08\x0f\nU\n\x04\
    \x04\0\x02\0\x12\x03\x1d\x04*\x1aH\x20A\x20SourceContext\x20referring\
    \x20to\x20a\x20revision\x20in\x20a\x20Google\x20Cloud\x20Source\x20Repo.\
    \n\n\x0c\n\x05\x04\0\x02\0\x06\x12\x03\x1d\x04\x1a\n\x0c\n\x05\x04\0\x02\
    \0\x01\x12\x03\x1d\x1b%\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x1d()\n=\n\
    \x04\x04\0\x02\x01\x12\x03\x20\x04#\x1a0\x20A\x20SourceContext\x20referr\
    ing\x20to\x20a\x20Gerrit\x20project.\n\n\x0c\n\x05\x04\0\x02\x01\x06\x12\
    \x03\x20\x04\x17\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\x20\x18\x1e\n\x0c\
    \n\x05\x04\0\x02\x01\x03\x12\x03\x20!\"\nT\n\x04\x04\0\x02\x02\x12\x03#\
    \x04\x1d\x1aG\x20A\x20SourceContext\x20referring\x20to\x20any\x20third\
    \x20party\x20Git\x20repo\x20(e.g.,\x20GitHub).\n\n\x0c\n\x05\x04\0\x02\
    \x02\x06\x12\x03#\x04\x14\n\x0c\n\x05\x04\0\x02\x02\x01\x12\x03#\x15\x18\
    \n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03#\x1b\x1c\n1\n\x04\x04\0\x02\x03\
    \x12\x03'\x02!\x1a$\x20Labels\x20with\x20user\x20defined\x20metadata.\n\
    \n\r\n\x05\x04\0\x02\x03\x04\x12\x04'\x02$\x03\n\x0c\n\x05\x04\0\x02\x03\
    \x06\x12\x03'\x02\x15\n\x0c\n\x05\x04\0\x02\x03\x01\x12\x03'\x16\x1c\n\
    \x0c\n\x05\x04\0\x02\x03\x03\x12\x03'\x1f\x20\n*\n\x02\x04\x01\x12\x04+\
    \0>\x01\x1a\x1e\x20An\x20alias\x20to\x20a\x20repo\x20revision.\n\n\n\n\
    \x03\x04\x01\x01\x12\x03+\x08\x14\n%\n\x04\x04\x01\x04\0\x12\x04-\x027\
    \x03\x1a\x17\x20The\x20type\x20of\x20an\x20alias.\n\n\x0c\n\x05\x04\x01\
    \x04\0\x01\x12\x03-\x07\x0b\n\x19\n\x06\x04\x01\x04\0\x02\0\x12\x03/\x04\
    \x19\x1a\n\x20Unknown.\n\n\x0e\n\x07\x04\x01\x04\0\x02\0\x01\x12\x03/\
    \x04\x14\n\x0e\n\x07\x04\x01\x04\0\x02\0\x02\x12\x03/\x17\x18\n\x19\n\
    \x06\x04\x01\x04\0\x02\x01\x12\x031\x04\x0e\x1a\n\x20Git\x20tag.\n\n\x0e\
    \n\x07\x04\x01\x04\0\x02\x01\x01\x12\x031\x04\t\n\x0e\n\x07\x04\x01\x04\
    \0\x02\x01\x02\x12\x031\x0c\r\n\x1c\n\x06\x04\x01\x04\0\x02\x02\x12\x033\
    \x04\x10\x1a\r\x20Git\x20branch.\n\n\x0e\n\x07\x04\x01\x04\0\x02\x02\x01\
    \x12\x033\x04\x0b\n\x0e\n\x07\x04\x01\x04\0\x02\x02\x02\x12\x033\x0e\x0f\
    \nr\n\x06\x04\x01\x04\0\x02\x03\x12\x036\x04\x0e\x1ac\x20Used\x20to\x20s\
    pecify\x20non-standard\x20aliases.\x20For\x20example,\x20if\x20a\x20Git\
    \x20repo\x20has\x20a\n\x20ref\x20named\x20\"refs/foo/bar\".\n\n\x0e\n\
    \x07\x04\x01\x04\0\x02\x03\x01\x12\x036\x04\t\n\x0e\n\x07\x04\x01\x04\0\
    \x02\x03\x02\x12\x036\x0c\r\n\x1e\n\x04\x04\x01\x02\0\x12\x03:\x02\x10\
    \x1a\x11\x20The\x20alias\x20kind.\n\n\r\n\x05\x04\x01\x02\0\x04\x12\x04:\
    \x027\x03\n\x0c\n\x05\x04\x01\x02\0\x06\x12\x03:\x02\x06\n\x0c\n\x05\x04\
    \x01\x02\0\x01\x12\x03:\x07\x0b\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03:\
    \x0e\x0f\n\x1e\n\x04\x04\x01\x02\x01\x12\x03=\x02\x12\x1a\x11\x20The\x20\
    alias\x20name.\n\n\r\n\x05\x04\x01\x02\x01\x04\x12\x04=\x02:\x10\n\x0c\n\
    \x05\x04\x01\x02\x01\x05\x12\x03=\x02\x08\n\x0c\n\x05\x04\x01\x02\x01\
    \x01\x12\x03=\t\r\n\x0c\n\x05\x04\x01\x02\x01\x03\x12\x03=\x10\x11\nd\n\
    \x02\x04\x02\x12\x04B\0O\x01\x1aX\x20A\x20CloudRepoSourceContext\x20deno\
    tes\x20a\x20particular\x20revision\x20in\x20a\x20Google\x20Cloud\n\x20So\
    urce\x20Repo.\n\n\n\n\x03\x04\x02\x01\x12\x03B\x08\x1e\n\"\n\x04\x04\x02\
    \x02\0\x12\x03D\x02\x15\x1a\x15\x20The\x20ID\x20of\x20the\x20repo.\n\n\r\
    \n\x05\x04\x02\x02\0\x04\x12\x04D\x02B\x20\n\x0c\n\x05\x04\x02\x02\0\x06\
    \x12\x03D\x02\x08\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03D\t\x10\n\x0c\n\
    \x05\x04\x02\x02\0\x03\x12\x03D\x13\x14\ne\n\x04\x04\x02\x08\0\x12\x04H\
    \x02N\x03\x1aW\x20A\x20revision\x20in\x20a\x20Cloud\x20Repo\x20can\x20be\
    \x20identified\x20by\x20either\x20its\x20revision\x20ID\x20or\n\x20its\
    \x20alias.\n\n\x0c\n\x05\x04\x02\x08\0\x01\x12\x03H\x08\x10\n\x1d\n\x04\
    \x04\x02\x02\x01\x12\x03J\x04\x1b\x1a\x10\x20A\x20revision\x20ID.\n\n\
    \x0c\n\x05\x04\x02\x02\x01\x05\x12\x03J\x04\n\n\x0c\n\x05\x04\x02\x02\
    \x01\x01\x12\x03J\x0b\x16\n\x0c\n\x05\x04\x02\x02\x01\x03\x12\x03J\x19\
    \x1a\n6\n\x04\x04\x02\x02\x02\x12\x03M\x04#\x1a)\x20An\x20alias,\x20whic\
    h\x20may\x20be\x20a\x20branch\x20or\x20tag.\n\n\x0c\n\x05\x04\x02\x02\
    \x02\x06\x12\x03M\x04\x10\n\x0c\n\x05\x04\x02\x02\x02\x01\x12\x03M\x11\
    \x1e\n\x0c\n\x05\x04\x02\x02\x02\x03\x12\x03M!\"\n<\n\x02\x04\x03\x12\
    \x04R\0d\x01\x1a0\x20A\x20SourceContext\x20referring\x20to\x20a\x20Gerri\
    t\x20project.\n\n\n\n\x03\x04\x03\x01\x12\x03R\x08\x1b\n4\n\x04\x04\x03\
    \x02\0\x12\x03T\x02\x16\x1a'\x20The\x20URI\x20of\x20a\x20running\x20Gerr\
    it\x20instance.\n\n\r\n\x05\x04\x03\x02\0\x04\x12\x04T\x02R\x1d\n\x0c\n\
    \x05\x04\x03\x02\0\x05\x12\x03T\x02\x08\n\x0c\n\x05\x04\x03\x02\0\x01\
    \x12\x03T\t\x11\n\x0c\n\x05\x04\x03\x02\0\x03\x12\x03T\x14\x15\n\xa9\x01\
    \n\x04\x04\x03\x02\x01\x12\x03Y\x02\x1c\x1a\x9b\x01\x20The\x20full\x20pr\
    oject\x20name\x20within\x20the\x20host.\x20Projects\x20may\x20be\x20nest\
    ed,\x20so\n\x20\"project/subproject\"\x20is\x20a\x20valid\x20project\x20\
    name.\x20The\x20\"repo\x20name\"\x20is\x20the\n\x20hostURI/project.\n\n\
    \r\n\x05\x04\x03\x02\x01\x04\x12\x04Y\x02T\x16\n\x0c\n\x05\x04\x03\x02\
    \x01\x05\x12\x03Y\x02\x08\n\x0c\n\x05\x04\x03\x02\x01\x01\x12\x03Y\t\x17\
    \n\x0c\n\x05\x04\x03\x02\x01\x03\x12\x03Y\x1a\x1b\ni\n\x04\x04\x03\x08\0\
    \x12\x04]\x02c\x03\x1a[\x20A\x20revision\x20in\x20a\x20Gerrit\x20project\
    \x20can\x20be\x20identified\x20by\x20either\x20its\x20revision\x20ID\n\
    \x20or\x20its\x20alias.\n\n\x0c\n\x05\x04\x03\x08\0\x01\x12\x03]\x08\x10\
    \n&\n\x04\x04\x03\x02\x02\x12\x03_\x04\x1b\x1a\x19\x20A\x20revision\x20(\
    commit)\x20ID.\n\n\x0c\n\x05\x04\x03\x02\x02\x05\x12\x03_\x04\n\n\x0c\n\
    \x05\x04\x03\x02\x02\x01\x12\x03_\x0b\x16\n\x0c\n\x05\x04\x03\x02\x02\
    \x03\x12\x03_\x19\x1a\n6\n\x04\x04\x03\x02\x03\x12\x03b\x04#\x1a)\x20An\
    \x20alias,\x20which\x20may\x20be\x20a\x20branch\x20or\x20tag.\n\n\x0c\n\
    \x05\x04\x03\x02\x03\x06\x12\x03b\x04\x10\n\x0c\n\x05\x04\x03\x02\x03\
    \x01\x12\x03b\x11\x1e\n\x0c\n\x05\x04\x03\x02\x03\x03\x12\x03b!\"\no\n\
    \x02\x04\x04\x12\x04h\0n\x01\x1ac\x20A\x20GitSourceContext\x20denotes\
    \x20a\x20particular\x20revision\x20in\x20a\x20third\x20party\x20Git\n\
    \x20repository\x20(e.g.,\x20GitHub).\n\n\n\n\x03\x04\x04\x01\x12\x03h\
    \x08\x18\n\"\n\x04\x04\x04\x02\0\x12\x03j\x02\x11\x1a\x15\x20Git\x20repo\
    sitory\x20URL.\n\n\r\n\x05\x04\x04\x02\0\x04\x12\x04j\x02h\x1a\n\x0c\n\
    \x05\x04\x04\x02\0\x05\x12\x03j\x02\x08\n\x0c\n\x05\x04\x04\x02\0\x01\
    \x12\x03j\t\x0c\n\x0c\n\x05\x04\x04\x02\0\x03\x12\x03j\x0f\x10\n\x1f\n\
    \x04\x04\x04\x02\x01\x12\x03m\x02\x19\x1a\x12\x20Git\x20commit\x20hash.\
    \n\n\r\n\x05\x04\x04\x02\x01\x04\x12\x04m\x02j\x11\n\x0c\n\x05\x04\x04\
    \x02\x01\x05\x12\x03m\x02\x08\n\x0c\n\x05\x04\x04\x02\x01\x01\x12\x03m\t\
    \x14\n\x0c\n\x05\x04\x04\x02\x01\x03\x12\x03m\x17\x18\n3\n\x02\x04\x05\
    \x12\x04q\0{\x01\x1a'\x20A\x20unique\x20identifier\x20for\x20a\x20Cloud\
    \x20Repo.\n\n\n\n\x03\x04\x05\x01\x12\x03q\x08\x0e\n\x8c\x01\n\x04\x04\
    \x05\x08\0\x12\x04t\x02z\x03\x1a~\x20A\x20cloud\x20repo\x20can\x20be\x20\
    identified\x20by\x20either\x20its\x20project\x20ID\x20and\x20repository\
    \x20name\n\x20combination,\x20or\x20its\x20globally\x20unique\x20identif\
    ier.\n\n\x0c\n\x05\x04\x05\x08\0\x01\x12\x03t\x08\n\n=\n\x04\x04\x05\x02\
    \0\x12\x03v\x04&\x1a0\x20A\x20combination\x20of\x20a\x20project\x20ID\
    \x20and\x20a\x20repo\x20name.\n\n\x0c\n\x05\x04\x05\x02\0\x06\x12\x03v\
    \x04\x11\n\x0c\n\x05\x04\x05\x02\0\x01\x12\x03v\x12!\n\x0c\n\x05\x04\x05\
    \x02\0\x03\x12\x03v$%\n=\n\x04\x04\x05\x02\x01\x12\x03y\x04\x13\x1a0\x20\
    A\x20server-assigned,\x20globally\x20unique\x20identifier.\n\n\x0c\n\x05\
    \x04\x05\x02\x01\x05\x12\x03y\x04\n\n\x0c\n\x05\x04\x05\x02\x01\x01\x12\
    \x03y\x0b\x0e\n\x0c\n\x05\x04\x05\x02\x01\x03\x12\x03y\x11\x12\n\x84\x01\
    \n\x02\x04\x06\x12\x05\x7f\0\x85\x01\x01\x1aw\x20Selects\x20a\x20repo\
    \x20using\x20a\x20Google\x20Cloud\x20Platform\x20project\x20ID\x20(e.g.,\
    \n\x20winged-cargo-31)\x20and\x20a\x20repo\x20name\x20within\x20that\x20\
    project.\n\n\n\n\x03\x04\x06\x01\x12\x03\x7f\x08\x15\n&\n\x04\x04\x06\
    \x02\0\x12\x04\x81\x01\x02\x18\x1a\x18\x20The\x20ID\x20of\x20the\x20proj\
    ect.\n\n\x0e\n\x05\x04\x06\x02\0\x04\x12\x05\x81\x01\x02\x7f\x17\n\r\n\
    \x05\x04\x06\x02\0\x05\x12\x04\x81\x01\x02\x08\n\r\n\x05\x04\x06\x02\0\
    \x01\x12\x04\x81\x01\t\x13\n\r\n\x05\x04\x06\x02\0\x03\x12\x04\x81\x01\
    \x16\x17\nG\n\x04\x04\x06\x02\x01\x12\x04\x84\x01\x02\x17\x1a9\x20The\
    \x20name\x20of\x20the\x20repo.\x20Leave\x20empty\x20for\x20the\x20defaul\
    t\x20repo.\n\n\x0f\n\x05\x04\x06\x02\x01\x04\x12\x06\x84\x01\x02\x81\x01\
    \x18\n\r\n\x05\x04\x06\x02\x01\x05\x12\x04\x84\x01\x02\x08\n\r\n\x05\x04\
    \x06\x02\x01\x01\x12\x04\x84\x01\t\x12\n\r\n\x05\x04\x06\x02\x01\x03\x12\
    \x04\x84\x01\x15\x16b\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
