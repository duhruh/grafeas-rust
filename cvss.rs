// This file is generated by rust-protobuf 2.6.0. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq,Clone,Default)]
pub struct CVSSv3 {
    // message fields
    pub base_score: f32,
    pub exploitability_score: f32,
    pub impact_score: f32,
    pub attack_vector: CVSSv3_AttackVector,
    pub attack_complexity: CVSSv3_AttackComplexity,
    pub privileges_required: CVSSv3_PrivilegesRequired,
    pub user_interaction: CVSSv3_UserInteraction,
    pub scope: CVSSv3_Scope,
    pub confidentiality_impact: CVSSv3_Impact,
    pub integrity_impact: CVSSv3_Impact,
    pub availability_impact: CVSSv3_Impact,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CVSSv3 {
    fn default() -> &'a CVSSv3 {
        <CVSSv3 as ::protobuf::Message>::default_instance()
    }
}

impl CVSSv3 {
    pub fn new() -> CVSSv3 {
        ::std::default::Default::default()
    }

    // float base_score = 1;


    pub fn get_base_score(&self) -> f32 {
        self.base_score
    }
    pub fn clear_base_score(&mut self) {
        self.base_score = 0.;
    }

    // Param is passed by value, moved
    pub fn set_base_score(&mut self, v: f32) {
        self.base_score = v;
    }

    // float exploitability_score = 2;


    pub fn get_exploitability_score(&self) -> f32 {
        self.exploitability_score
    }
    pub fn clear_exploitability_score(&mut self) {
        self.exploitability_score = 0.;
    }

    // Param is passed by value, moved
    pub fn set_exploitability_score(&mut self, v: f32) {
        self.exploitability_score = v;
    }

    // float impact_score = 3;


    pub fn get_impact_score(&self) -> f32 {
        self.impact_score
    }
    pub fn clear_impact_score(&mut self) {
        self.impact_score = 0.;
    }

    // Param is passed by value, moved
    pub fn set_impact_score(&mut self, v: f32) {
        self.impact_score = v;
    }

    // .grafeas.v1beta1.vulnerability.CVSSv3.AttackVector attack_vector = 5;


    pub fn get_attack_vector(&self) -> CVSSv3_AttackVector {
        self.attack_vector
    }
    pub fn clear_attack_vector(&mut self) {
        self.attack_vector = CVSSv3_AttackVector::ATTACK_VECTOR_UNSPECIFIED;
    }

    // Param is passed by value, moved
    pub fn set_attack_vector(&mut self, v: CVSSv3_AttackVector) {
        self.attack_vector = v;
    }

    // .grafeas.v1beta1.vulnerability.CVSSv3.AttackComplexity attack_complexity = 6;


    pub fn get_attack_complexity(&self) -> CVSSv3_AttackComplexity {
        self.attack_complexity
    }
    pub fn clear_attack_complexity(&mut self) {
        self.attack_complexity = CVSSv3_AttackComplexity::ATTACK_COMPLEXITY_UNSPECIFIED;
    }

    // Param is passed by value, moved
    pub fn set_attack_complexity(&mut self, v: CVSSv3_AttackComplexity) {
        self.attack_complexity = v;
    }

    // .grafeas.v1beta1.vulnerability.CVSSv3.PrivilegesRequired privileges_required = 7;


    pub fn get_privileges_required(&self) -> CVSSv3_PrivilegesRequired {
        self.privileges_required
    }
    pub fn clear_privileges_required(&mut self) {
        self.privileges_required = CVSSv3_PrivilegesRequired::PRIVILEGES_REQUIRED_UNSPECIFIED;
    }

    // Param is passed by value, moved
    pub fn set_privileges_required(&mut self, v: CVSSv3_PrivilegesRequired) {
        self.privileges_required = v;
    }

    // .grafeas.v1beta1.vulnerability.CVSSv3.UserInteraction user_interaction = 8;


    pub fn get_user_interaction(&self) -> CVSSv3_UserInteraction {
        self.user_interaction
    }
    pub fn clear_user_interaction(&mut self) {
        self.user_interaction = CVSSv3_UserInteraction::USER_INTERACTION_UNSPECIFIED;
    }

    // Param is passed by value, moved
    pub fn set_user_interaction(&mut self, v: CVSSv3_UserInteraction) {
        self.user_interaction = v;
    }

    // .grafeas.v1beta1.vulnerability.CVSSv3.Scope scope = 9;


    pub fn get_scope(&self) -> CVSSv3_Scope {
        self.scope
    }
    pub fn clear_scope(&mut self) {
        self.scope = CVSSv3_Scope::SCOPE_UNSPECIFIED;
    }

    // Param is passed by value, moved
    pub fn set_scope(&mut self, v: CVSSv3_Scope) {
        self.scope = v;
    }

    // .grafeas.v1beta1.vulnerability.CVSSv3.Impact confidentiality_impact = 10;


    pub fn get_confidentiality_impact(&self) -> CVSSv3_Impact {
        self.confidentiality_impact
    }
    pub fn clear_confidentiality_impact(&mut self) {
        self.confidentiality_impact = CVSSv3_Impact::IMPACT_UNSPECIFIED;
    }

    // Param is passed by value, moved
    pub fn set_confidentiality_impact(&mut self, v: CVSSv3_Impact) {
        self.confidentiality_impact = v;
    }

    // .grafeas.v1beta1.vulnerability.CVSSv3.Impact integrity_impact = 11;


    pub fn get_integrity_impact(&self) -> CVSSv3_Impact {
        self.integrity_impact
    }
    pub fn clear_integrity_impact(&mut self) {
        self.integrity_impact = CVSSv3_Impact::IMPACT_UNSPECIFIED;
    }

    // Param is passed by value, moved
    pub fn set_integrity_impact(&mut self, v: CVSSv3_Impact) {
        self.integrity_impact = v;
    }

    // .grafeas.v1beta1.vulnerability.CVSSv3.Impact availability_impact = 12;


    pub fn get_availability_impact(&self) -> CVSSv3_Impact {
        self.availability_impact
    }
    pub fn clear_availability_impact(&mut self) {
        self.availability_impact = CVSSv3_Impact::IMPACT_UNSPECIFIED;
    }

    // Param is passed by value, moved
    pub fn set_availability_impact(&mut self, v: CVSSv3_Impact) {
        self.availability_impact = v;
    }
}

impl ::protobuf::Message for CVSSv3 {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.base_score = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.exploitability_score = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.impact_score = tmp;
                },
                5 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.attack_vector, 5, &mut self.unknown_fields)?
                },
                6 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.attack_complexity, 6, &mut self.unknown_fields)?
                },
                7 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.privileges_required, 7, &mut self.unknown_fields)?
                },
                8 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.user_interaction, 8, &mut self.unknown_fields)?
                },
                9 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.scope, 9, &mut self.unknown_fields)?
                },
                10 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.confidentiality_impact, 10, &mut self.unknown_fields)?
                },
                11 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.integrity_impact, 11, &mut self.unknown_fields)?
                },
                12 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.availability_impact, 12, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.base_score != 0. {
            my_size += 5;
        }
        if self.exploitability_score != 0. {
            my_size += 5;
        }
        if self.impact_score != 0. {
            my_size += 5;
        }
        if self.attack_vector != CVSSv3_AttackVector::ATTACK_VECTOR_UNSPECIFIED {
            my_size += ::protobuf::rt::enum_size(5, self.attack_vector);
        }
        if self.attack_complexity != CVSSv3_AttackComplexity::ATTACK_COMPLEXITY_UNSPECIFIED {
            my_size += ::protobuf::rt::enum_size(6, self.attack_complexity);
        }
        if self.privileges_required != CVSSv3_PrivilegesRequired::PRIVILEGES_REQUIRED_UNSPECIFIED {
            my_size += ::protobuf::rt::enum_size(7, self.privileges_required);
        }
        if self.user_interaction != CVSSv3_UserInteraction::USER_INTERACTION_UNSPECIFIED {
            my_size += ::protobuf::rt::enum_size(8, self.user_interaction);
        }
        if self.scope != CVSSv3_Scope::SCOPE_UNSPECIFIED {
            my_size += ::protobuf::rt::enum_size(9, self.scope);
        }
        if self.confidentiality_impact != CVSSv3_Impact::IMPACT_UNSPECIFIED {
            my_size += ::protobuf::rt::enum_size(10, self.confidentiality_impact);
        }
        if self.integrity_impact != CVSSv3_Impact::IMPACT_UNSPECIFIED {
            my_size += ::protobuf::rt::enum_size(11, self.integrity_impact);
        }
        if self.availability_impact != CVSSv3_Impact::IMPACT_UNSPECIFIED {
            my_size += ::protobuf::rt::enum_size(12, self.availability_impact);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.base_score != 0. {
            os.write_float(1, self.base_score)?;
        }
        if self.exploitability_score != 0. {
            os.write_float(2, self.exploitability_score)?;
        }
        if self.impact_score != 0. {
            os.write_float(3, self.impact_score)?;
        }
        if self.attack_vector != CVSSv3_AttackVector::ATTACK_VECTOR_UNSPECIFIED {
            os.write_enum(5, self.attack_vector.value())?;
        }
        if self.attack_complexity != CVSSv3_AttackComplexity::ATTACK_COMPLEXITY_UNSPECIFIED {
            os.write_enum(6, self.attack_complexity.value())?;
        }
        if self.privileges_required != CVSSv3_PrivilegesRequired::PRIVILEGES_REQUIRED_UNSPECIFIED {
            os.write_enum(7, self.privileges_required.value())?;
        }
        if self.user_interaction != CVSSv3_UserInteraction::USER_INTERACTION_UNSPECIFIED {
            os.write_enum(8, self.user_interaction.value())?;
        }
        if self.scope != CVSSv3_Scope::SCOPE_UNSPECIFIED {
            os.write_enum(9, self.scope.value())?;
        }
        if self.confidentiality_impact != CVSSv3_Impact::IMPACT_UNSPECIFIED {
            os.write_enum(10, self.confidentiality_impact.value())?;
        }
        if self.integrity_impact != CVSSv3_Impact::IMPACT_UNSPECIFIED {
            os.write_enum(11, self.integrity_impact.value())?;
        }
        if self.availability_impact != CVSSv3_Impact::IMPACT_UNSPECIFIED {
            os.write_enum(12, self.availability_impact.value())?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CVSSv3 {
        CVSSv3::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                    "base_score",
                    |m: &CVSSv3| { &m.base_score },
                    |m: &mut CVSSv3| { &mut m.base_score },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                    "exploitability_score",
                    |m: &CVSSv3| { &m.exploitability_score },
                    |m: &mut CVSSv3| { &mut m.exploitability_score },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                    "impact_score",
                    |m: &CVSSv3| { &m.impact_score },
                    |m: &mut CVSSv3| { &mut m.impact_score },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<CVSSv3_AttackVector>>(
                    "attack_vector",
                    |m: &CVSSv3| { &m.attack_vector },
                    |m: &mut CVSSv3| { &mut m.attack_vector },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<CVSSv3_AttackComplexity>>(
                    "attack_complexity",
                    |m: &CVSSv3| { &m.attack_complexity },
                    |m: &mut CVSSv3| { &mut m.attack_complexity },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<CVSSv3_PrivilegesRequired>>(
                    "privileges_required",
                    |m: &CVSSv3| { &m.privileges_required },
                    |m: &mut CVSSv3| { &mut m.privileges_required },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<CVSSv3_UserInteraction>>(
                    "user_interaction",
                    |m: &CVSSv3| { &m.user_interaction },
                    |m: &mut CVSSv3| { &mut m.user_interaction },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<CVSSv3_Scope>>(
                    "scope",
                    |m: &CVSSv3| { &m.scope },
                    |m: &mut CVSSv3| { &mut m.scope },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<CVSSv3_Impact>>(
                    "confidentiality_impact",
                    |m: &CVSSv3| { &m.confidentiality_impact },
                    |m: &mut CVSSv3| { &mut m.confidentiality_impact },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<CVSSv3_Impact>>(
                    "integrity_impact",
                    |m: &CVSSv3| { &m.integrity_impact },
                    |m: &mut CVSSv3| { &mut m.integrity_impact },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<CVSSv3_Impact>>(
                    "availability_impact",
                    |m: &CVSSv3| { &m.availability_impact },
                    |m: &mut CVSSv3| { &mut m.availability_impact },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<CVSSv3>(
                    "CVSSv3",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CVSSv3 {
        static mut instance: ::protobuf::lazy::Lazy<CVSSv3> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CVSSv3,
        };
        unsafe {
            instance.get(CVSSv3::new)
        }
    }
}

impl ::protobuf::Clear for CVSSv3 {
    fn clear(&mut self) {
        self.base_score = 0.;
        self.exploitability_score = 0.;
        self.impact_score = 0.;
        self.attack_vector = CVSSv3_AttackVector::ATTACK_VECTOR_UNSPECIFIED;
        self.attack_complexity = CVSSv3_AttackComplexity::ATTACK_COMPLEXITY_UNSPECIFIED;
        self.privileges_required = CVSSv3_PrivilegesRequired::PRIVILEGES_REQUIRED_UNSPECIFIED;
        self.user_interaction = CVSSv3_UserInteraction::USER_INTERACTION_UNSPECIFIED;
        self.scope = CVSSv3_Scope::SCOPE_UNSPECIFIED;
        self.confidentiality_impact = CVSSv3_Impact::IMPACT_UNSPECIFIED;
        self.integrity_impact = CVSSv3_Impact::IMPACT_UNSPECIFIED;
        self.availability_impact = CVSSv3_Impact::IMPACT_UNSPECIFIED;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CVSSv3 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CVSSv3 {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum CVSSv3_AttackVector {
    ATTACK_VECTOR_UNSPECIFIED = 0,
    ATTACK_VECTOR_NETWORK = 1,
    ATTACK_VECTOR_ADJACENT = 2,
    ATTACK_VECTOR_LOCAL = 3,
    ATTACK_VECTOR_PHYSICAL = 4,
}

impl ::protobuf::ProtobufEnum for CVSSv3_AttackVector {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<CVSSv3_AttackVector> {
        match value {
            0 => ::std::option::Option::Some(CVSSv3_AttackVector::ATTACK_VECTOR_UNSPECIFIED),
            1 => ::std::option::Option::Some(CVSSv3_AttackVector::ATTACK_VECTOR_NETWORK),
            2 => ::std::option::Option::Some(CVSSv3_AttackVector::ATTACK_VECTOR_ADJACENT),
            3 => ::std::option::Option::Some(CVSSv3_AttackVector::ATTACK_VECTOR_LOCAL),
            4 => ::std::option::Option::Some(CVSSv3_AttackVector::ATTACK_VECTOR_PHYSICAL),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [CVSSv3_AttackVector] = &[
            CVSSv3_AttackVector::ATTACK_VECTOR_UNSPECIFIED,
            CVSSv3_AttackVector::ATTACK_VECTOR_NETWORK,
            CVSSv3_AttackVector::ATTACK_VECTOR_ADJACENT,
            CVSSv3_AttackVector::ATTACK_VECTOR_LOCAL,
            CVSSv3_AttackVector::ATTACK_VECTOR_PHYSICAL,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("CVSSv3_AttackVector", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for CVSSv3_AttackVector {
}

impl ::std::default::Default for CVSSv3_AttackVector {
    fn default() -> Self {
        CVSSv3_AttackVector::ATTACK_VECTOR_UNSPECIFIED
    }
}

impl ::protobuf::reflect::ProtobufValue for CVSSv3_AttackVector {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum CVSSv3_AttackComplexity {
    ATTACK_COMPLEXITY_UNSPECIFIED = 0,
    ATTACK_COMPLEXITY_LOW = 1,
    ATTACK_COMPLEXITY_HIGH = 2,
}

impl ::protobuf::ProtobufEnum for CVSSv3_AttackComplexity {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<CVSSv3_AttackComplexity> {
        match value {
            0 => ::std::option::Option::Some(CVSSv3_AttackComplexity::ATTACK_COMPLEXITY_UNSPECIFIED),
            1 => ::std::option::Option::Some(CVSSv3_AttackComplexity::ATTACK_COMPLEXITY_LOW),
            2 => ::std::option::Option::Some(CVSSv3_AttackComplexity::ATTACK_COMPLEXITY_HIGH),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [CVSSv3_AttackComplexity] = &[
            CVSSv3_AttackComplexity::ATTACK_COMPLEXITY_UNSPECIFIED,
            CVSSv3_AttackComplexity::ATTACK_COMPLEXITY_LOW,
            CVSSv3_AttackComplexity::ATTACK_COMPLEXITY_HIGH,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("CVSSv3_AttackComplexity", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for CVSSv3_AttackComplexity {
}

impl ::std::default::Default for CVSSv3_AttackComplexity {
    fn default() -> Self {
        CVSSv3_AttackComplexity::ATTACK_COMPLEXITY_UNSPECIFIED
    }
}

impl ::protobuf::reflect::ProtobufValue for CVSSv3_AttackComplexity {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum CVSSv3_PrivilegesRequired {
    PRIVILEGES_REQUIRED_UNSPECIFIED = 0,
    PRIVILEGES_REQUIRED_NONE = 1,
    PRIVILEGES_REQUIRED_LOW = 2,
    PRIVILEGES_REQUIRED_HIGH = 3,
}

impl ::protobuf::ProtobufEnum for CVSSv3_PrivilegesRequired {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<CVSSv3_PrivilegesRequired> {
        match value {
            0 => ::std::option::Option::Some(CVSSv3_PrivilegesRequired::PRIVILEGES_REQUIRED_UNSPECIFIED),
            1 => ::std::option::Option::Some(CVSSv3_PrivilegesRequired::PRIVILEGES_REQUIRED_NONE),
            2 => ::std::option::Option::Some(CVSSv3_PrivilegesRequired::PRIVILEGES_REQUIRED_LOW),
            3 => ::std::option::Option::Some(CVSSv3_PrivilegesRequired::PRIVILEGES_REQUIRED_HIGH),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [CVSSv3_PrivilegesRequired] = &[
            CVSSv3_PrivilegesRequired::PRIVILEGES_REQUIRED_UNSPECIFIED,
            CVSSv3_PrivilegesRequired::PRIVILEGES_REQUIRED_NONE,
            CVSSv3_PrivilegesRequired::PRIVILEGES_REQUIRED_LOW,
            CVSSv3_PrivilegesRequired::PRIVILEGES_REQUIRED_HIGH,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("CVSSv3_PrivilegesRequired", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for CVSSv3_PrivilegesRequired {
}

impl ::std::default::Default for CVSSv3_PrivilegesRequired {
    fn default() -> Self {
        CVSSv3_PrivilegesRequired::PRIVILEGES_REQUIRED_UNSPECIFIED
    }
}

impl ::protobuf::reflect::ProtobufValue for CVSSv3_PrivilegesRequired {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum CVSSv3_UserInteraction {
    USER_INTERACTION_UNSPECIFIED = 0,
    USER_INTERACTION_NONE = 1,
    USER_INTERACTION_REQUIRED = 2,
}

impl ::protobuf::ProtobufEnum for CVSSv3_UserInteraction {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<CVSSv3_UserInteraction> {
        match value {
            0 => ::std::option::Option::Some(CVSSv3_UserInteraction::USER_INTERACTION_UNSPECIFIED),
            1 => ::std::option::Option::Some(CVSSv3_UserInteraction::USER_INTERACTION_NONE),
            2 => ::std::option::Option::Some(CVSSv3_UserInteraction::USER_INTERACTION_REQUIRED),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [CVSSv3_UserInteraction] = &[
            CVSSv3_UserInteraction::USER_INTERACTION_UNSPECIFIED,
            CVSSv3_UserInteraction::USER_INTERACTION_NONE,
            CVSSv3_UserInteraction::USER_INTERACTION_REQUIRED,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("CVSSv3_UserInteraction", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for CVSSv3_UserInteraction {
}

impl ::std::default::Default for CVSSv3_UserInteraction {
    fn default() -> Self {
        CVSSv3_UserInteraction::USER_INTERACTION_UNSPECIFIED
    }
}

impl ::protobuf::reflect::ProtobufValue for CVSSv3_UserInteraction {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum CVSSv3_Scope {
    SCOPE_UNSPECIFIED = 0,
    SCOPE_UNCHANGED = 1,
    SCOPE_CHANGED = 2,
}

impl ::protobuf::ProtobufEnum for CVSSv3_Scope {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<CVSSv3_Scope> {
        match value {
            0 => ::std::option::Option::Some(CVSSv3_Scope::SCOPE_UNSPECIFIED),
            1 => ::std::option::Option::Some(CVSSv3_Scope::SCOPE_UNCHANGED),
            2 => ::std::option::Option::Some(CVSSv3_Scope::SCOPE_CHANGED),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [CVSSv3_Scope] = &[
            CVSSv3_Scope::SCOPE_UNSPECIFIED,
            CVSSv3_Scope::SCOPE_UNCHANGED,
            CVSSv3_Scope::SCOPE_CHANGED,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("CVSSv3_Scope", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for CVSSv3_Scope {
}

impl ::std::default::Default for CVSSv3_Scope {
    fn default() -> Self {
        CVSSv3_Scope::SCOPE_UNSPECIFIED
    }
}

impl ::protobuf::reflect::ProtobufValue for CVSSv3_Scope {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum CVSSv3_Impact {
    IMPACT_UNSPECIFIED = 0,
    IMPACT_HIGH = 1,
    IMPACT_LOW = 2,
    IMPACT_NONE = 3,
}

impl ::protobuf::ProtobufEnum for CVSSv3_Impact {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<CVSSv3_Impact> {
        match value {
            0 => ::std::option::Option::Some(CVSSv3_Impact::IMPACT_UNSPECIFIED),
            1 => ::std::option::Option::Some(CVSSv3_Impact::IMPACT_HIGH),
            2 => ::std::option::Option::Some(CVSSv3_Impact::IMPACT_LOW),
            3 => ::std::option::Option::Some(CVSSv3_Impact::IMPACT_NONE),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [CVSSv3_Impact] = &[
            CVSSv3_Impact::IMPACT_UNSPECIFIED,
            CVSSv3_Impact::IMPACT_HIGH,
            CVSSv3_Impact::IMPACT_LOW,
            CVSSv3_Impact::IMPACT_NONE,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("CVSSv3_Impact", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for CVSSv3_Impact {
}

impl ::std::default::Default for CVSSv3_Impact {
    fn default() -> Self {
        CVSSv3_Impact::IMPACT_UNSPECIFIED
    }
}

impl ::protobuf::reflect::ProtobufValue for CVSSv3_Impact {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x18proto/v1beta1/cvss.proto\x12\x1dgrafeas.v1beta1.vulnerability\"\
    \x92\x0c\n\x06CVSSv3\x12\x1d\n\nbase_score\x18\x01\x20\x01(\x02R\tbaseSc\
    ore\x121\n\x14exploitability_score\x18\x02\x20\x01(\x02R\x13exploitabili\
    tyScore\x12!\n\x0cimpact_score\x18\x03\x20\x01(\x02R\x0bimpactScore\x12W\
    \n\rattack_vector\x18\x05\x20\x01(\x0e22.grafeas.v1beta1.vulnerability.C\
    VSSv3.AttackVectorR\x0cattackVector\x12c\n\x11attack_complexity\x18\x06\
    \x20\x01(\x0e26.grafeas.v1beta1.vulnerability.CVSSv3.AttackComplexityR\
    \x10attackComplexity\x12i\n\x13privileges_required\x18\x07\x20\x01(\x0e2\
    8.grafeas.v1beta1.vulnerability.CVSSv3.PrivilegesRequiredR\x12privileges\
    Required\x12`\n\x10user_interaction\x18\x08\x20\x01(\x0e25.grafeas.v1bet\
    a1.vulnerability.CVSSv3.UserInteractionR\x0fuserInteraction\x12A\n\x05sc\
    ope\x18\t\x20\x01(\x0e2+.grafeas.v1beta1.vulnerability.CVSSv3.ScopeR\x05\
    scope\x12c\n\x16confidentiality_impact\x18\n\x20\x01(\x0e2,.grafeas.v1be\
    ta1.vulnerability.CVSSv3.ImpactR\x15confidentialityImpact\x12W\n\x10inte\
    grity_impact\x18\x0b\x20\x01(\x0e2,.grafeas.v1beta1.vulnerability.CVSSv3\
    .ImpactR\x0fintegrityImpact\x12]\n\x13availability_impact\x18\x0c\x20\
    \x01(\x0e2,.grafeas.v1beta1.vulnerability.CVSSv3.ImpactR\x12availability\
    Impact\"\x99\x01\n\x0cAttackVector\x12\x1d\n\x19ATTACK_VECTOR_UNSPECIFIE\
    D\x10\0\x12\x19\n\x15ATTACK_VECTOR_NETWORK\x10\x01\x12\x1a\n\x16ATTACK_V\
    ECTOR_ADJACENT\x10\x02\x12\x17\n\x13ATTACK_VECTOR_LOCAL\x10\x03\x12\x1a\
    \n\x16ATTACK_VECTOR_PHYSICAL\x10\x04\"l\n\x10AttackComplexity\x12!\n\x1d\
    ATTACK_COMPLEXITY_UNSPECIFIED\x10\0\x12\x19\n\x15ATTACK_COMPLEXITY_LOW\
    \x10\x01\x12\x1a\n\x16ATTACK_COMPLEXITY_HIGH\x10\x02\"\x92\x01\n\x12Priv\
    ilegesRequired\x12#\n\x1fPRIVILEGES_REQUIRED_UNSPECIFIED\x10\0\x12\x1c\n\
    \x18PRIVILEGES_REQUIRED_NONE\x10\x01\x12\x1b\n\x17PRIVILEGES_REQUIRED_LO\
    W\x10\x02\x12\x1c\n\x18PRIVILEGES_REQUIRED_HIGH\x10\x03\"m\n\x0fUserInte\
    raction\x12\x20\n\x1cUSER_INTERACTION_UNSPECIFIED\x10\0\x12\x19\n\x15USE\
    R_INTERACTION_NONE\x10\x01\x12\x1d\n\x19USER_INTERACTION_REQUIRED\x10\
    \x02\"F\n\x05Scope\x12\x15\n\x11SCOPE_UNSPECIFIED\x10\0\x12\x13\n\x0fSCO\
    PE_UNCHANGED\x10\x01\x12\x11\n\rSCOPE_CHANGED\x10\x02\"R\n\x06Impact\x12\
    \x16\n\x12IMPACT_UNSPECIFIED\x10\0\x12\x0f\n\x0bIMPACT_HIGH\x10\x01\x12\
    \x0e\n\nIMPACT_LOW\x10\x02\x12\x0f\n\x0bIMPACT_NONE\x10\x03Bb\n\x20io.gr\
    afeas.v1beta1.vulnerabilityP\x01Z6github.com/grafeas/grafeas/proto/v1bet\
    a1/cvss_go_proto\xa2\x02\x03GRAJ\xcb\x17\n\x06\x12\x04\x0e\0T\x01\n\xda\
    \x04\n\x01\x0c\x12\x03\x0e\0\x122\xcf\x04\x20Copyright\x202018\x20The\
    \x20Grafeas\x20Authors.\x20All\x20rights\x20reserved.\n\n\x20Licensed\
    \x20under\x20the\x20Apache\x20License,\x20Version\x202.0\x20(the\x20\"Li\
    cense\");\n\x20you\x20may\x20not\x20use\x20this\x20file\x20except\x20in\
    \x20compliance\x20with\x20the\x20License.\n\x20You\x20may\x20obtain\x20a\
    \x20copy\x20of\x20the\x20License\x20at\n\n\x20\x20\x20\x20http://www.apa\
    che.org/licenses/LICENSE-2.0\n\n\x20Unless\x20required\x20by\x20applicab\
    le\x20law\x20or\x20agreed\x20to\x20in\x20writing,\x20software\n\x20distr\
    ibuted\x20under\x20the\x20License\x20is\x20distributed\x20on\x20an\x20\"\
    AS\x20IS\"\x20BASIS,\n\x20WITHOUT\x20WARRANTIES\x20OR\x20CONDITIONS\x20O\
    F\x20ANY\x20KIND,\x20either\x20express\x20or\x20implied.\n\x20See\x20the\
    \x20License\x20for\x20the\x20specific\x20language\x20governing\x20permis\
    sions\x20and\n\x20limitations\x20under\x20the\x20License.\n\n\x08\n\x01\
    \x02\x12\x03\x10\0&\n\x08\n\x01\x08\x12\x03\x12\0M\n\t\n\x02\x08\x0b\x12\
    \x03\x12\0M\n\x08\n\x01\x08\x12\x03\x13\0\"\n\t\n\x02\x08\n\x12\x03\x13\
    \0\"\n\x08\n\x01\x08\x12\x03\x14\09\n\t\n\x02\x08\x01\x12\x03\x14\09\n\
    \x08\n\x01\x08\x12\x03\x15\0!\n\t\n\x02\x08$\x12\x03\x15\0!\n\x80\x01\n\
    \x02\x04\0\x12\x04\x19\0T\x01\x1at\x20Common\x20Vulnerability\x20Scoring\
    \x20System\x20version\x203.\n\x20For\x20details,\x20see\x20https://www.f\
    irst.org/cvss/specification-document\n\n\n\n\x03\x04\0\x01\x12\x03\x19\
    \x08\x0e\nF\n\x04\x04\0\x02\0\x12\x03\x1b\x02\x17\x1a9\x20The\x20base\
    \x20score\x20is\x20a\x20function\x20of\x20the\x20base\x20metric\x20score\
    s.\n\n\r\n\x05\x04\0\x02\0\x04\x12\x04\x1b\x02\x19\x10\n\x0c\n\x05\x04\0\
    \x02\0\x05\x12\x03\x1b\x02\x07\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x1b\
    \x08\x12\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x1b\x15\x16\n\x0b\n\x04\x04\
    \0\x02\x01\x12\x03\x1d\x02!\n\r\n\x05\x04\0\x02\x01\x04\x12\x04\x1d\x02\
    \x1b\x17\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03\x1d\x02\x07\n\x0c\n\x05\
    \x04\0\x02\x01\x01\x12\x03\x1d\x08\x1c\n\x0c\n\x05\x04\0\x02\x01\x03\x12\
    \x03\x1d\x1f\x20\n\x0b\n\x04\x04\0\x02\x02\x12\x03\x1f\x02\x19\n\r\n\x05\
    \x04\0\x02\x02\x04\x12\x04\x1f\x02\x1d!\n\x0c\n\x05\x04\0\x02\x02\x05\
    \x12\x03\x1f\x02\x07\n\x0c\n\x05\x04\0\x02\x02\x01\x12\x03\x1f\x08\x14\n\
    \x0c\n\x05\x04\0\x02\x02\x03\x12\x03\x1f\x17\x18\n\x94\x01\n\x04\x04\0\
    \x02\x03\x12\x03$\x02!\x1a\x86\x01\x20Base\x20Metrics\n\x20Represents\
    \x20the\x20intrinsic\x20characteristics\x20of\x20a\x20vulnerability\x20t\
    hat\x20are\n\x20constant\x20over\x20time\x20and\x20across\x20user\x20env\
    ironments.\n\n\r\n\x05\x04\0\x02\x03\x04\x12\x04$\x02\x1f\x19\n\x0c\n\
    \x05\x04\0\x02\x03\x06\x12\x03$\x02\x0e\n\x0c\n\x05\x04\0\x02\x03\x01\
    \x12\x03$\x0f\x1c\n\x0c\n\x05\x04\0\x02\x03\x03\x12\x03$\x1f\x20\n\x0b\n\
    \x04\x04\0\x02\x04\x12\x03%\x02)\n\r\n\x05\x04\0\x02\x04\x04\x12\x04%\
    \x02$!\n\x0c\n\x05\x04\0\x02\x04\x06\x12\x03%\x02\x12\n\x0c\n\x05\x04\0\
    \x02\x04\x01\x12\x03%\x13$\n\x0c\n\x05\x04\0\x02\x04\x03\x12\x03%'(\n\
    \x0b\n\x04\x04\0\x02\x05\x12\x03&\x02-\n\r\n\x05\x04\0\x02\x05\x04\x12\
    \x04&\x02%)\n\x0c\n\x05\x04\0\x02\x05\x06\x12\x03&\x02\x14\n\x0c\n\x05\
    \x04\0\x02\x05\x01\x12\x03&\x15(\n\x0c\n\x05\x04\0\x02\x05\x03\x12\x03&+\
    ,\n\x0b\n\x04\x04\0\x02\x06\x12\x03'\x02'\n\r\n\x05\x04\0\x02\x06\x04\
    \x12\x04'\x02&-\n\x0c\n\x05\x04\0\x02\x06\x06\x12\x03'\x02\x11\n\x0c\n\
    \x05\x04\0\x02\x06\x01\x12\x03'\x12\"\n\x0c\n\x05\x04\0\x02\x06\x03\x12\
    \x03'%&\n\x0b\n\x04\x04\0\x02\x07\x12\x03(\x02\x12\n\r\n\x05\x04\0\x02\
    \x07\x04\x12\x04(\x02''\n\x0c\n\x05\x04\0\x02\x07\x06\x12\x03(\x02\x07\n\
    \x0c\n\x05\x04\0\x02\x07\x01\x12\x03(\x08\r\n\x0c\n\x05\x04\0\x02\x07\
    \x03\x12\x03(\x10\x11\n\x0b\n\x04\x04\0\x02\x08\x12\x03)\x02%\n\r\n\x05\
    \x04\0\x02\x08\x04\x12\x04)\x02(\x12\n\x0c\n\x05\x04\0\x02\x08\x06\x12\
    \x03)\x02\x08\n\x0c\n\x05\x04\0\x02\x08\x01\x12\x03)\t\x1f\n\x0c\n\x05\
    \x04\0\x02\x08\x03\x12\x03)\"$\n\x0b\n\x04\x04\0\x02\t\x12\x03*\x02\x1f\
    \n\r\n\x05\x04\0\x02\t\x04\x12\x04*\x02)%\n\x0c\n\x05\x04\0\x02\t\x06\
    \x12\x03*\x02\x08\n\x0c\n\x05\x04\0\x02\t\x01\x12\x03*\t\x19\n\x0c\n\x05\
    \x04\0\x02\t\x03\x12\x03*\x1c\x1e\n\x0b\n\x04\x04\0\x02\n\x12\x03+\x02\"\
    \n\r\n\x05\x04\0\x02\n\x04\x12\x04+\x02*\x1f\n\x0c\n\x05\x04\0\x02\n\x06\
    \x12\x03+\x02\x08\n\x0c\n\x05\x04\0\x02\n\x01\x12\x03+\t\x1c\n\x0c\n\x05\
    \x04\0\x02\n\x03\x12\x03+\x1f!\n\x0c\n\x04\x04\0\x04\0\x12\x04-\x023\x03\
    \n\x0c\n\x05\x04\0\x04\0\x01\x12\x03-\x07\x13\n\r\n\x06\x04\0\x04\0\x02\
    \0\x12\x03.\x04\"\n\x0e\n\x07\x04\0\x04\0\x02\0\x01\x12\x03.\x04\x1d\n\
    \x0e\n\x07\x04\0\x04\0\x02\0\x02\x12\x03.\x20!\n\r\n\x06\x04\0\x04\0\x02\
    \x01\x12\x03/\x04\x1e\n\x0e\n\x07\x04\0\x04\0\x02\x01\x01\x12\x03/\x04\
    \x19\n\x0e\n\x07\x04\0\x04\0\x02\x01\x02\x12\x03/\x1c\x1d\n\r\n\x06\x04\
    \0\x04\0\x02\x02\x12\x030\x04\x1f\n\x0e\n\x07\x04\0\x04\0\x02\x02\x01\
    \x12\x030\x04\x1a\n\x0e\n\x07\x04\0\x04\0\x02\x02\x02\x12\x030\x1d\x1e\n\
    \r\n\x06\x04\0\x04\0\x02\x03\x12\x031\x04\x1c\n\x0e\n\x07\x04\0\x04\0\
    \x02\x03\x01\x12\x031\x04\x17\n\x0e\n\x07\x04\0\x04\0\x02\x03\x02\x12\
    \x031\x1a\x1b\n\r\n\x06\x04\0\x04\0\x02\x04\x12\x032\x04\x1f\n\x0e\n\x07\
    \x04\0\x04\0\x02\x04\x01\x12\x032\x04\x1a\n\x0e\n\x07\x04\0\x04\0\x02\
    \x04\x02\x12\x032\x1d\x1e\n\x0c\n\x04\x04\0\x04\x01\x12\x045\x029\x03\n\
    \x0c\n\x05\x04\0\x04\x01\x01\x12\x035\x07\x17\n\r\n\x06\x04\0\x04\x01\
    \x02\0\x12\x036\x04&\n\x0e\n\x07\x04\0\x04\x01\x02\0\x01\x12\x036\x04!\n\
    \x0e\n\x07\x04\0\x04\x01\x02\0\x02\x12\x036$%\n\r\n\x06\x04\0\x04\x01\
    \x02\x01\x12\x037\x04\x1e\n\x0e\n\x07\x04\0\x04\x01\x02\x01\x01\x12\x037\
    \x04\x19\n\x0e\n\x07\x04\0\x04\x01\x02\x01\x02\x12\x037\x1c\x1d\n\r\n\
    \x06\x04\0\x04\x01\x02\x02\x12\x038\x04\x1f\n\x0e\n\x07\x04\0\x04\x01\
    \x02\x02\x01\x12\x038\x04\x1a\n\x0e\n\x07\x04\0\x04\x01\x02\x02\x02\x12\
    \x038\x1d\x1e\n\x0c\n\x04\x04\0\x04\x02\x12\x04;\x02@\x03\n\x0c\n\x05\
    \x04\0\x04\x02\x01\x12\x03;\x07\x19\n\r\n\x06\x04\0\x04\x02\x02\0\x12\
    \x03<\x04(\n\x0e\n\x07\x04\0\x04\x02\x02\0\x01\x12\x03<\x04#\n\x0e\n\x07\
    \x04\0\x04\x02\x02\0\x02\x12\x03<&'\n\r\n\x06\x04\0\x04\x02\x02\x01\x12\
    \x03=\x04!\n\x0e\n\x07\x04\0\x04\x02\x02\x01\x01\x12\x03=\x04\x1c\n\x0e\
    \n\x07\x04\0\x04\x02\x02\x01\x02\x12\x03=\x1f\x20\n\r\n\x06\x04\0\x04\
    \x02\x02\x02\x12\x03>\x04\x20\n\x0e\n\x07\x04\0\x04\x02\x02\x02\x01\x12\
    \x03>\x04\x1b\n\x0e\n\x07\x04\0\x04\x02\x02\x02\x02\x12\x03>\x1e\x1f\n\r\
    \n\x06\x04\0\x04\x02\x02\x03\x12\x03?\x04!\n\x0e\n\x07\x04\0\x04\x02\x02\
    \x03\x01\x12\x03?\x04\x1c\n\x0e\n\x07\x04\0\x04\x02\x02\x03\x02\x12\x03?\
    \x1f\x20\n\x0c\n\x04\x04\0\x04\x03\x12\x04B\x02F\x03\n\x0c\n\x05\x04\0\
    \x04\x03\x01\x12\x03B\x07\x16\n\r\n\x06\x04\0\x04\x03\x02\0\x12\x03C\x04\
    %\n\x0e\n\x07\x04\0\x04\x03\x02\0\x01\x12\x03C\x04\x20\n\x0e\n\x07\x04\0\
    \x04\x03\x02\0\x02\x12\x03C#$\n\r\n\x06\x04\0\x04\x03\x02\x01\x12\x03D\
    \x04\x1e\n\x0e\n\x07\x04\0\x04\x03\x02\x01\x01\x12\x03D\x04\x19\n\x0e\n\
    \x07\x04\0\x04\x03\x02\x01\x02\x12\x03D\x1c\x1d\n\r\n\x06\x04\0\x04\x03\
    \x02\x02\x12\x03E\x04\"\n\x0e\n\x07\x04\0\x04\x03\x02\x02\x01\x12\x03E\
    \x04\x1d\n\x0e\n\x07\x04\0\x04\x03\x02\x02\x02\x12\x03E\x20!\n\x0c\n\x04\
    \x04\0\x04\x04\x12\x04H\x02L\x03\n\x0c\n\x05\x04\0\x04\x04\x01\x12\x03H\
    \x07\x0c\n\r\n\x06\x04\0\x04\x04\x02\0\x12\x03I\x04\x1a\n\x0e\n\x07\x04\
    \0\x04\x04\x02\0\x01\x12\x03I\x04\x15\n\x0e\n\x07\x04\0\x04\x04\x02\0\
    \x02\x12\x03I\x18\x19\n\r\n\x06\x04\0\x04\x04\x02\x01\x12\x03J\x04\x18\n\
    \x0e\n\x07\x04\0\x04\x04\x02\x01\x01\x12\x03J\x04\x13\n\x0e\n\x07\x04\0\
    \x04\x04\x02\x01\x02\x12\x03J\x16\x17\n\r\n\x06\x04\0\x04\x04\x02\x02\
    \x12\x03K\x04\x16\n\x0e\n\x07\x04\0\x04\x04\x02\x02\x01\x12\x03K\x04\x11\
    \n\x0e\n\x07\x04\0\x04\x04\x02\x02\x02\x12\x03K\x14\x15\n\x0c\n\x04\x04\
    \0\x04\x05\x12\x04N\x02S\x03\n\x0c\n\x05\x04\0\x04\x05\x01\x12\x03N\x07\
    \r\n\r\n\x06\x04\0\x04\x05\x02\0\x12\x03O\x04\x1b\n\x0e\n\x07\x04\0\x04\
    \x05\x02\0\x01\x12\x03O\x04\x16\n\x0e\n\x07\x04\0\x04\x05\x02\0\x02\x12\
    \x03O\x19\x1a\n\r\n\x06\x04\0\x04\x05\x02\x01\x12\x03P\x04\x14\n\x0e\n\
    \x07\x04\0\x04\x05\x02\x01\x01\x12\x03P\x04\x0f\n\x0e\n\x07\x04\0\x04\
    \x05\x02\x01\x02\x12\x03P\x12\x13\n\r\n\x06\x04\0\x04\x05\x02\x02\x12\
    \x03Q\x04\x13\n\x0e\n\x07\x04\0\x04\x05\x02\x02\x01\x12\x03Q\x04\x0e\n\
    \x0e\n\x07\x04\0\x04\x05\x02\x02\x02\x12\x03Q\x11\x12\n\r\n\x06\x04\0\
    \x04\x05\x02\x03\x12\x03R\x04\x14\n\x0e\n\x07\x04\0\x04\x05\x02\x03\x01\
    \x12\x03R\x04\x0f\n\x0e\n\x07\x04\0\x04\x05\x02\x03\x02\x12\x03R\x12\x13\
    b\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
